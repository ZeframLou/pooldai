{"version":3,"sources":["node_modules/@ledgerhq/errors/dist/index.js","node_modules/@ledgerhq/hw-app-eth/lib-es/Eth.js","node_modules/@ledgerhq/hw-app-eth/lib-es/utils.js","node_modules/@ledgerhq/hw-transport-u2f/lib-es/TransportU2F.js","node_modules/@ledgerhq/hw-transport/lib-es/Transport.js","node_modules/@ledgerhq/logs/lib-es/index.js","node_modules/bnc-onboard/dist/esm/ledger-a060ac3c.js","node_modules/u2f-api/index.js","node_modules/u2f-api/lib/google-u2f-api.js","node_modules/u2f-api/lib/u2f-api.js"],"names":[],"mappings":";;g9EAAA,mBAAA,CAAA,CAAA,CAAA,mBAAA,EAAA,8BAAA,mBAAA,CAAA,CAAA,CAAA,mBAAA,CAAA,0BAAA,CAAA,UAAA,CAAA,MAAA,CAAA,wBAAA,CAAA,EAAA,8BAAA,mBAAA,CAAA,CAAA,CAAA,mBAAA,CAAA,qBAAA,CAAA,UAAA,CAAA,MAAA,CAAA,mBAAA,CAAA,EAAA,8BAAA,mBAAA,CAAA,CAAA,CAAA,mBAAA,CAAA,gBAAA,CAAA,UAAA,CAAA,MAAA,CAAA,cAAA,CAAA,EAAA,8BAAA,mBAAA,CAAA,CAAA,CAAA,mBAAA,CAAA,mBAAA,CAAA,UAAA,CAAA,MAAA,CAAA,iBAAA,CAAA,EAAA,8BAAA,mBAAA,CAAA,CAAA,CAAA,mBAAA,CAAA,iBAAA,CAAA,UAAA,CAAA,MAAA,CAAA,eAAA,CAAA,EAAA,8BAAA,mBAAA,CAAA,CAAA,CAAA,mBAAA,CAAA,gBAAA,CAAA,UAAA,CAAA,MAAA,CAAA,cAAA,CAAA,EAAA,8BAAA,mBAAA,CAAA,CAAA,CAAA,mBAAA,CAAA,gBAAA,CAAA,UAAA,CAAA,MAAA,CAAA,cAAA,CAAA,EAAA,8BAAA,mBAAA,CAAA,CAAA,CAAA,mBAAA,CAAA,sBAAA,CAAA,UAAA,CAAA,MAAA,CAAA,oBAAA,CAAA,EAAA,8BAAA,mBAAA,CAAA,CAAA,CAAA,mBAAA,CAAA,sBAAA,CAAA,UAAA,CAAA,MAAA,CAAA,oBAAA,CAAA,EAAA,8BAAA,mBAAA,CAAA,CAAA,CAAA,mBAAA,CAAA,YAAA,CAAA,UAAA,CAAA,MAAA,CAAA,UAAA,CAAA,EAAA,8BAAA,mBAAA,CAAA,CAAA,CAAA,mBAAA,CAAA,iBAAA,CAAA,UAAA,CAAA,MAAA,CAAA,eAAA,CAAA,EAAA,8BAAA,mBAAA,CAAA,CAAA,CAAA,mBAAA,CAAA,6BAAA,CAAA,UAAA,CAAA,MAAA,CAAA,2BAAA,CAAA,EAAA,8BAAA,mBAAA,CAAA,CAAA,CAAA,mBAAA,CAAA,+BAAA,CAAA,UAAA,CAAA,MAAA,CAAA,6BAAA,CAAA,EAAA,8BAAA,mBAAA,CAAA,CAAA,CAAA,mBAAA,CAAA,cAAA,CAAA,UAAA,CAAA,MAAA,CAAA,YAAA,CAAA,EAAA,8BAAA,mBAAA,CAAA,CAAA,CAAA,mBAAA,CAAA,qBAAA,CAAA,UAAA,CAAA,MAAA,CAAA,mBAAA,CAAA,EAAA,8BAAA,mBAAA,CAAA,CAAA,CAAA,mBAAA,CAAA,mBAAA,CAAA,UAAA,CAAA,MAAA,CAAA,iBAAA,CAAA,EAAA,8BAAA,mBAAA,CAAA,CAAA,CAAA,mBAAA,CAAA,uBAAA,CAAA,UAAA,CAAA,MAAA,CAAA,qBAAA,CAAA,EAAA,8BAAA,mBAAA,CAAA,CAAA,CAAA,mBAAA,CAAA,2BAAA,CAAA,UAAA,CAAA,MAAA,CAAA,yBAAA,CAAA,EAAA,8BAAA,mBAAA,CAAA,CAAA,CAAA,mBAAA,CAAA,6BAAA,CAAA,UAAA,CAAA,MAAA,CAAA,2BAAA,CAAA,EAAA,8BAAA,mBAAA,CAAA,CAAA,CAAA,mBAAA,CAAA,uBAAA,CAAA,UAAA,CAAA,MAAA,CAAA,qBAAA,CAAA,EAAA,8BAAA,mBAAA,CAAA,CAAA,CAAA,mBAAA,CAAA,kBAAA,CAAA,UAAA,CAAA,MAAA,CAAA,gBAAA,CAAA,EAAA,8BAAA,mBAAA,CAAA,CAAA,CAAA,mBAAA,CAAA,0BAAA,CAAA,UAAA,CAAA,MAAA,CAAA,wBAAA,CAAA,EAAA,8BAAA,mBAAA,CAAA,CAAA,CAAA,mBAAA,CAAA,oBAAA,CAAA,UAAA,CAAA,MAAA,CAAA,kBAAA,CAAA,EAAA,8BAAA,mBAAA,CAAA,CAAA,CAAA,mBAAA,CAAA,mCAAA,CAAA,UAAA,CAAA,MAAA,CAAA,iCAAA,CAAA,EAAA,8BAAA,mBAAA,CAAA,CAAA,CAAA,mBAAA,CAAA,kBAAA,CAAA,UAAA,CAAA,MAAA,CAAA,gBAAA,CAAA,EAAA,8BAAA,mBAAA,CAAA,CAAA,CAAA,mBAAA,CAAA,oBAAA,CAAA,UAAA,CAAA,MAAA,CAAA,kBAAA,CAAA,EAAA,8BAAA,mBAAA,CAAA,CAAA,CAAA,mBAAA,CAAA,gCAAA,CAAA,UAAA,CAAA,MAAA,CAAA,8BAAA,CAAA,EAAA,8BAAA,mBAAA,CAAA,CAAA,CAAA,mBAAA,CAAA,qBAAA,CAAA,UAAA,CAAA,MAAA,CAAA,mBAAA,CAAA,EAAA,8BAAA,mBAAA,CAAA,CAAA,CAAA,mBAAA,CAAA,cAAA,CAAA,UAAA,CAAA,MAAA,CAAA,YAAA,CAAA,EAAA,8BAAA,mBAAA,CAAA,CAAA,CAAA,mBAAA,CAAA,aAAA,CAAA,UAAA,CAAA,MAAA,CAAA,WAAA,CAAA,EAAA,8BAAA,mBAAA,CAAA,CAAA,CAAA,mBAAA,CAAA,YAAA,CAAA,UAAA,CAAA,MAAA,CAAA,UAAA,CAAA,EAAA,8BAAA,mBAAA,CAAA,CAAA,CAAA,mBAAA,CAAA,uBAAA,CAAA,UAAA,CAAA,MAAA,CAAA,qBAAA,CAAA,EAAA,8BAAA,mBAAA,CAAA,CAAA,CAAA,mBAAA,CAAA,6BAAA,CAAA,UAAA,CAAA,MAAA,CAAA,2BAAA,CAAA,EAAA,8BAAA,mBAAA,CAAA,CAAA,CAAA,mBAAA,CAAA,qBAAA,CAAA,UAAA,CAAA,MAAA,CAAA,mBAAA,CAAA,EAAA,8BAAA,mBAAA,CAAA,CAAA,CAAA,mBAAA,CAAA,oBAAA,CAAA,UAAA,CAAA,MAAA,CAAA,kBAAA,CAAA,EAAA,8BAAA,mBAAA,CAAA,CAAA,CAAA,mBAAA,CAAA,eAAA,CAAA,UAAA,CAAA,MAAA,CAAA,aAAA,CAAA,EAAA,8BAAA,mBAAA,CAAA,CAAA,CAAA,mBAAA,CAAA,gBAAA,CAAA,UAAA,CAAA,MAAA,CAAA,cAAA,CAAA,EAAA,8BAAA,mBAAA,CAAA,CAAA,CAAA,mBAAA,CAAA,8CAAA,CAAA,UAAA,CAAA,MAAA,CAAA,4CAAA,CAAA,EAAA,8BAAA,mBAAA,CAAA,CAAA,CAAA,mBAAA,CAAA,eAAA,CAAA,UAAA,CAAA,MAAA,CAAA,aAAA,CAAA,EAAA,8BAAA,mBAAA,CAAA,CAAA,CAAA,mBAAA,CAAA,yBAAA,CAAA,UAAA,CAAA,MAAA,CAAA,uBAAA,CAAA,EAAA,8BAAA,mBAAA,CAAA,CAAA,CAAA,mBAAA,CAAA,cAAA,CAAA,UAAA,CAAA,MAAA,CAAA,YAAA,CAAA,EAAA,8BAAA,mBAAA,CAAA,CAAA,CAAA,mBAAA,CAAA,cAAA,CAAA,UAAA,CAAA,MAAA,CAAA,YAAA,CAAA,EAAA,8BAAA,mBAAA,CAAA,CAAA,CAAA,mBAAA,CAAA,gBAAA,CAAA,UAAA,CAAA,MAAA,CAAA,cAAA,CAAA,EAAA,8BAAA,mBAAA,CAAA,CAAA,CAAA,mBAAA,CAAA,2BAAA,CAAA,UAAA,CAAA,MAAA,CAAA,yBAAA,CAAA,EAAA,8BAAA,mBAAA,CAAA,CAAA,CAAA,mBAAA,CAAA,uBAAA,CAAA,UAAA,CAAA,MAAA,CAAA,qBAAA,CAAA,EAAA,8BAAA,mBAAA,CAAA,CAAA,CAAA,mBAAA,CAAA,0BAAA,CAAA,UAAA,CAAA,MAAA,CAAA,wBAAA,CAAA,EAAA,8BAAA,mBAAA,CAAA,CAAA,CAAA,mBAAA,CAAA,iCAAA,CAAA,UAAA,CAAA,MAAA,CAAA,+BAAA,CAAA,EAAA,8BAAA,mBAAA,CAAA,CAAA,CAAA,mBAAA,CAAA,8BAAA,CAAA,UAAA,CAAA,MAAA,CAAA,4BAAA,CAAA,EAAA,8BAAA,mBAAA,CAAA,CAAA,CAAA,mBAAA,CAAA,gCAAA,CAAA,UAAA,CAAA,MAAA,CAAA,8BAAA,CAAA,EAAA,8BAAA,mBAAA,CAAA,CAAA,CAAA,mBAAA,CAAA,0BAAA,CAAA,UAAA,CAAA,MAAA,CAAA,wBAAA,CAAA,EAAA,8BAAA,mBAAA,CAAA,CAAA,CAAA,mBAAA,CAAA,0BAAA,CAAA,UAAA,CAAA,MAAA,CAAA,wBAAA,CAAA,EAAA,8BAAA,mBAAA,CAAA,CAAA,CAAA,mBAAA,CAAA,oCAAA,CAAA,UAAA,CAAA,MAAA,CAAA,kCAAA,CAAA,EAAA,8BAAA,mBAAA,CAAA,CAAA,CAAA,mBAAA,CAAA,4BAAA,CAAA,UAAA,CAAA,MAAA,CAAA,0BAAA,CAAA,EAAA,8BAAA,mBAAA,CAAA,CAAA,CAAA,mBAAA,CAAA,wBAAA,CAAA,UAAA,CAAA,MAAA,CAAA,sBAAA,CAAA,EAAA,8BAAA,mBAAA,CAAA,CAAA,CAAA,mBAAA,CAAA,aAAA,CAAA,UAAA,CAAA,MAAA,CAAA,WAAA,CAAA,EAAA,8BAAA,mBAAA,CAAA,CAAA,CAAA,mBAAA,CAAA,kBAAA,CAAA,UAAA,CAAA,MAAA,CAAA,gBAAA,CAAA,EAAA,8BAAA,mBAAA,CAAA,CAAA,CAAA,mBAAA,CAAA,kBAAA,CAAA,UAAA,CAAA,MAAA,CAAA,gBAAA,CAAA,EAAA,8BAAA,mBAAA,CAAA,CAAA,CAAA,mBAAA,CAAA,eAAA,CAAA,UAAA,CAAA,MAAA,CAAA,aAAA,CAAA,EAAA,8BAAA,mBAAA,CAAA,CAAA,CAAA,mBAAA,CAAA,kBAAA,CAAA,UAAA,CAAA,MAAA,CAAA,gBAAA,CAAA,EAAA,8BAAA,mBAAA,CAAA,CAAA,CAAA,mBAAA,CAAA,8CAAA,CAAA,UAAA,CAAA,MAAA,CAAA,4CAAA,CAAA,EAAA,8BAAA,mBAAA,CAAA,CAAA,CAAA,mBAAA,CAAA,iCAAA,CAAA,UAAA,CAAA,MAAA,CAAA,+BAAA,CAAA,EAAA,8BAAA,mBAAA,CAAA,CAAA,CAAA,mBAAA,CAAA,4BAAA,CAAA,UAAA,CAAA,MAAA,CAAA,0BAAA,CAAA,EAAA,8BAAA,mBAAA,CAAA,CAAA,CAAA,mBAAA,CAAA,cAAA,CAAA,UAAA,CAAA,MAAA,CAAA,YAAA,CAAA,EAAA,8BAAA,mBAAA,CAAA,CAAA,CAAA,mBAAA,CAAA,2BAAA,CAAA,UAAA,CAAA,MAAA,CAAA,yBAAA,CAAA,EAAA,8BAAA,mBAAA,CAAA,CAAA,CAAA,mBAAA,CAAA,2BAAA,CAAA,UAAA,CAAA,MAAA,CAAA,yBAAA,CAAA,EAAA,8BAAA,mBAAA,CAAA,CAAA,CAAA,mBAAA,CAAA,eAAA,CAAA,UAAA,CAAA,MAAA,CAAA,aAAA,CAAA,EAAA,8BAAA,mBAAA,CAAA,CAAA,CAAA,mBAAA,CAAA,wBAAA,CAAA,UAAA,CAAA,MAAA,CAAA,sBAAA,CAAA,EAAA,8BAAA,mBAAA,CAAA,CAAA,CAAA,mBAAA,CAAA,yBAAA,CAAA,UAAA,CAAA,MAAA,CAAA,uBAAA,CAAA,EAAA,8BAAA,mBAAA,CAAA,CAAA,CAAA,mBAAA,CAAA,mBAAA,CAAA,UAAA,CAAA,MAAA,CAAA,iBAAA,CAAA,EAAA,8BAAA,mBAAA,CAAA,CAAA,CAAA,mBAAA,CAAA,6BAAA,CAAA,UAAA,CAAA,MAAA,CAAA,2BAAA,CAAA,EAAA,8BAAA,mBAAA,CAAA,CAAA,CAAA,mBAAA,CAAA,uBAAA,CAAA,UAAA,CAAA,MAAA,CAAA,qBAAA,CAAA,EAAA,8BAAA,mBAAA,CAAA,CAAA,CAAA,mBAAA,CAAA,aAAA,CAAA,UAAA,CAAA,MAAA,CAAA,WAAA,CAAA,EAAA,8BAAA,mBAAA,CAAA,CAAA,CAAA,mBAAA,CAAA,WAAA,CAAA,UAAA,CAAA,MAAA,CAAA,SAAA,CAAA,EAAA,8BAAA,mBAAA,CAAA,CAAA,CAAA,mBAAA,CAAA,eAAA,CAAA,UAAA,CAAA,MAAA,CAAA,aAAA,CAAA,EAAA,8BAAA,mBAAA,CAAA,CAAA,CAAA,mBAAA,CAAA,gBAAA,CAAA,UAAA,CAAA,MAAA,CAAA,cAAA,CAAA,EAAA,8BAAA,mBAAA,CAAA,CAAA,CAAA,mBAAA,CAAA,gCAAA,CAAA,UAAA,CAAA,MAAA,CAAA,8BAAA,CAAA,EAAA,8BAAA,mBAAA,CAAA,CAAA,CAAA,mBAAA,CAAA,4BAAA,CAAA,UAAA,CAAA,MAAA,CAAA,0BAAA,CAAA,EAAA,8BAAA,mBAAA,CAAA,CAAA,CAAA,mBAAA,CAAA,wBAAA,CAAA,UAAA,CAAA,MAAA,CAAA,sBAAA,CAAA,EAAA,8BAAA,mBAAA,CAAA,CAAA,CAAA,mBAAA,CAAA,sBAAA,CAAA,UAAA,CAAA,MAAA,CAAA,oBAAA,CAAA,EAAA,8BAAA,mBAAA,CAAA,CAAA,CAAA,mBAAA,CAAA,gCAAA,CAAA,UAAA,CAAA,MAAA,CAAA,8BAAA,CAAA,EAAA,8BAAA,mBAAA,CAAA,CAAA,CAAA,mBAAA,CAAA,0CAAA,CAAA,UAAA,CAAA,MAAA,CAAA,wCAAA,CAAA,EAAA,8BAAA,mBAAA,CAAA,CAAA,CAAA,mBAAA,CAAA,uCAAA,CAAA,UAAA,CAAA,MAAA,CAAA,qCAAA,CAAA,EAAA,8BAAA,mBAAA,CAAA,CAAA,CAAA,mBAAA,CAAA,sBAAA,CAAA,UAAA,CAAA,MAAA,CAAA,oBAAA,CAAA,EAAA,8BAAA,mBAAA,CAAA,CAAA,CAAA,mBAAA,CAAA,YAAA,CAAA,UAAA,CAAA,MAAA,CAAA,UAAA,CAAA,EAAA,8BAAA,mBAAA,CAAA,CAAA,CAAA,mBAAA,CAAA,qBAAA,CAAA,UAAA,CAAA,MAAA,CAAA,mBAAA,CAAA,EAAA,8BAAA,mBAAA,CAAA,CAAA,CAAA,mBAAA,CAAA,qBAAA,CAAA,UAAA,CAAA,MAAA,CAAA,mBAAA,CAAA,EAAA,8BAAA,mBAAA,CAAA,CAAA,CAAA,mBAAA,CAAA,oBAAA,CAAA,UAAA,CAAA,MAAA,CAAA,kBAAA,CAAA,EAAA,8BAAA,mBAAA,CAAA,CAAA,CAAA,mBAAA,CAAA,eAAA,CAAA,UAAA,CAAA,MAAA,CAAA,aAAA,CAAA,EAAA,8BAAA,mBAAA,CAAA,CAAA,CAAA,mBAAA,CAAA,oBAAA,CAAA,UAAA,CAAA,MAAA,CAAA,kBAAA,CAAA,EAAA,8BAAA,mBAAA,CAAA,CAAA,CAAA,mBAAA,CAAA,yBAAA,CAAA,UAAA,CAAA,MAAA,CAAA,uBAAA,CAAA,EAAA,8BAAA,mBAAA,CAAA,CAAA,CAAA,mBAAA,CAAA,6BAAA,CAAA,UAAA,CAAA,MAAA,CAAA,2BAAA,CAAA,EAAA,8BAAA,mBAAA,CAAA,CAAA,CAAA,mBAAA,CAAA,2BAAA,CAAA,UAAA,CAAA,MAAA,CAAA,yBAAA,CAAA,EAAA,8BAAA,mBAAA,CAAA,CAAA,CAAA,mBAAA,CAAA,qBAAA,CAAA,UAAA,CAAA,MAAA,CAAA,mBAAA,CAAA,EAAA,8BAAA,mBAAA,CAAA,CAAA,CAAA,mBAAA,CAAA,0BAAA,CAAA,UAAA,CAAA,MAAA,CAAA,wBAAA,CAAA,EAAA,8BAAA,mBAAA,CAAA,CAAA,CAAA,mBAAA,CAAA,2BAAA,CAAA,UAAA,CAAA,MAAA,CAAA,yBAAA,CAAA,EAAA,8BAAA,mBAAA,CAAA,CAAA,CAAA,mBAAA,CAAA,qBAAA,CAAA,UAAA,CAAA,MAAA,CAAA,mBAAA,CAAA,EAAA,8BAAA,mBAAA,CAAA,CAAA,CAAA,mBAAA,CAAA,uBAAA,CAAA,UAAA,CAAA,MAAA,CAAA,qBAAA,CAAA,EAAA,8BAAA,mBAAA,CAAA,CAAA,CAAA,mBAAA,CAAA,4BAAA,CAAA,UAAA,CAAA,MAAA,CAAA,0BAAA,CAAA,EAAA,8BAAA,mBAAA,CAAA,CAAA,CAAA,mBAAA,CAAA,wBAAA,CAAA,UAAA,CAAA,MAAA,CAAA,sBAAA,CAAA,EAAA,8BAAA,mBAAA,CAAA,CAAA,CAAA,mBAAA,CAAA,kBAAA,CAAA,UAAA,CAAA,MAAA,CAAA,gBAAA,CAAA,EAAA,8BAAA,mBAAA,CAAA,CAAA,CAAA,mBAAA,CAAA,qBAAA,CAAA,UAAA,CAAA,MAAA,CAAA,mBAAA,CAAA,EAAA,8BAAA,mBAAA,CAAA,CAAA,CAAA,mBAAA,CAAA,gBAAA,CAAA,UAAA,CAAA,MAAA,CAAA,cAAA,CAAA,EAAA,gC,CACA,sC,CACA,0CACA,GAAA,CAAA,YAAA,CAAA,EAAA,CACA,GAAA,CAAA,aAAA,CAAA,EAAA,CACA,GAAA,CAAA,0BAAA,CAAA,QAAA,CAAA,0BAAA,CAAA,IAAA,CAAA,YAAA,CAAA,CACA,aAAA,CAAA,IAAA,CAAA,CAAA,YACA,CAFA,CAGA,GAAA,CAAA,sBAAA,CAAA,QAAA,CAAA,sBAAA,CAAA,IAAA,CAAA,CACA,GAAA,CAAA,CAAA,CAAA,QAAA,CAAA,WAAA,CAAA,OAAA,CAAA,MAAA,CAAA,CACA,MAAA,CAAA,MAAA,CAAA,IAAA,CAAA,MAAA,EACA,KAAA,IAAA,CAAA,IAAA,CACA,KAAA,OAAA,CAAA,OAAA,EAAA,IAAA,CACA,KAAA,KAAA,CAAA,GAAA,CAAA,KAAA,GAAA,KACA,CALA,CAMA,CAAA,CAAA,SAAA,CAAA,GAAA,CAAA,KAAA,CACA,YAAA,CAAA,IAAA,CAAA,CAAA,CAAA,CACA,MAAA,CAAA,CACA,CAVA,CAWA;AACA,GAAA,CAAA,gBAAA,CAAA,QAAA,CAAA,gBAAA,CAAA,MAAA,CAAA,CACA,GAAA,MAAA,CAAA,MAAA,GAAA,QAAA,EAAA,MAAA,CAAA,CACA,GAAA,CACA;AACA,GAAA,CAAA,GAAA,CAAA,IAAA,CAAA,KAAA,CAAA,MAAA,CAAA,OAAA,CAAA,CACA,GAAA,GAAA,CAAA,OAAA,EAAA,GAAA,CAAA,IAAA,CAAA,CACA,MAAA,CAAA,GACA,CACA,CACA,MAAA,CAAA,CAAA,CACA;AACA,CACA,GAAA,CAAA,KAAA,CAAA,IAAA,EAAA,CACA,GAAA,MAAA,CAAA,MAAA,CAAA,IAAA,GAAA,QAAA,CAAA,CACA,GAAA,CAAA,MAAA,CAAA,MAAA,CAAA,IAAA,CACA,GAAA,CAAA,GAAA,CAAA,aAAA,CAAA,MAAA,CAAA,CACA,GAAA,GAAA,CAAA,CACA,KAAA,CAAA,GAAA,CAAA,MAAA,CACA,CAFA,IAGA,CACA,GAAA,CAAA,WAAA,CAAA,MAAA,GAAA,OAAA,CAAA,KAAA,CAAA,YAAA,CAAA,MAAA,CAAA,CACA,GAAA,CAAA,WAAA,CAAA,CACA,OAAA,CAAA,IAAA,CAAA,mCAAA,MAAA,CAAA,GAAA,EACA,WAAA,CAAA,sBAAA,CAAA,MAAA,CACA,CACA,KAAA,CAAA,MAAA,CAAA,MAAA,CAAA,WAAA,CAAA,SAAA,CAAA,CACA,GAAA,CACA,IAAA,GAAA,CAAA,IAAA,GAAA,CAAA,MAAA,CAAA,CACA,GAAA,MAAA,CAAA,cAAA,CAAA,IAAA,CAAA,CAAA,CACA,KAAA,CAAA,IAAA,CAAA,CAAA,MAAA,CAAA,IAAA,CACA,CACA,CACA,CACA,MAAA,CAAA,CAAA,CACA;AACA,CACA,CACA,CAxBA,IAyBA,CACA,KAAA,CAAA,GAAA,CAAA,KAAA,CAAA,MAAA,CAAA,OAAA,CACA,CACA,GAAA,CAAA,KAAA,CAAA,KAAA,EAAA,KAAA,CAAA,iBAAA,CAAA,CACA,KAAA,CAAA,iBAAA,CAAA,KAAA,CAAA,gBAAA,CACA,CACA,MAAA,CAAA,KACA,CACA,MAAA,IAAA,CAAA,KAAA,CAAA,MAAA,CAAA,MAAA,CAAA,CACA,CA/CA,CAgDA;AACA,GAAA,CAAA,cAAA,CAAA,QAAA,CAAA,cAAA,CAAA,KAAA,CAAA,CACA,GAAA,CAAA,KAAA,CACA,MAAA,CAAA,KAAA,CACA,GAAA,MAAA,CAAA,KAAA,GAAA,QAAA,CAAA,CACA,MAAA,CAAA,eAAA,CAAA,KAAA,CAAA,EAAA,CACA,CACA,GAAA,MAAA,CAAA,KAAA,GAAA,UAAA,CAAA,CACA,MAAA,eAAA,KAAA,CAAA,IAAA,EAAA,WAAA,EAAA,GACA,CACA,MAAA,CAAA,KACA,CAVA,CAWA;AACA,QAAA,CAAA,eAAA,CAAA,IAAA,CAAA,IAAA,CAAA,CACA,GAAA,CAAA,EAAA,CAAA,EAAA,CACA,IAAA,CAAA,IAAA,CAAA,IAAA,EACA,IAAA,GAAA,CAAA,EAAA,CAAA,CAAA,CAAA,EAAA,CAAA,MAAA,CAAA,IAAA,CAAA,IAAA,CAAA,CAA4C,EAAA,CAAA,EAAA,CAAA,MAA5C,CAA4D,EAAA,EAA5D,CAA4D,CAC5D,GAAA,CAAA,GAAA,CAAA,EAAA,CAAA,EAAA,CAAA,CACA,GAAA,CAAA,KAAA,CAAA,IAAA,CAAA,GAAA,CAAA,CACA,GAAA,MAAA,CAAA,KAAA,GAAA,UAAA,CAAA,CACA,QACA,CACA,GAAA,CAAA,KAAA,EAAA,MAAA,CAAA,KAAA,GAAA,QAAA,CAAA,CACA,EAAA,CAAA,GAAA,CAAA,CAAA,KAAA,CACA,QACA,CACA,GAAA,IAAA,CAAA,OAAA,CAAA,IAAA,CAAA,GAAA,CAAA,IAAA,CAAA,CAAA,CAAA,CACA,EAAA,CAAA,GAAA,CAAA,CAAA,eAAA,CAAA,IAAA,CAAA,GAAA,CAAA,CAAA,IAAA,CAAA,KAAA,CAAA,CAAA,CAAA,CAAA,CACA,QACA,CACA,EAAA,CAAA,GAAA,CAAA,CAAA,YACA,CACA,GAAA,MAAA,CAAA,IAAA,CAAA,IAAA,GAAA,QAAA,CAAA,CACA,EAAA,CAAA,IAAA,CAAA,IAAA,CAAA,IACA,CACA,GAAA,MAAA,CAAA,IAAA,CAAA,OAAA,GAAA,QAAA,CAAA,CACA,EAAA,CAAA,OAAA,CAAA,IAAA,CAAA,OACA,CACA,GAAA,MAAA,CAAA,IAAA,CAAA,KAAA,GAAA,QAAA,CAAA,CACA,EAAA,CAAA,KAAA,CAAA,IAAA,CAAA,KACA,CACA,MAAA,CAAA,EACA,CAEA,GAAA,CAAA,wBAAA,CAAA,sBAAA,CAAA,qBAAA,CAAA,CACA,GAAA,CAAA,mBAAA,CAAA,sBAAA,CAAA,qBAAA,CAAA,CACA,GAAA,CAAA,cAAA,CAAA,sBAAA,CAAA,gBAAA,CAAA,CACA,GAAA,CAAA,iBAAA,CAAA,sBAAA,CAAA,mBAAA,CAAA,CACA,GAAA,CAAA,eAAA,CAAA,sBAAA,CAAA,iBAAA,CAAA,CACA,GAAA,CAAA,cAAA,CAAA,sBAAA,CAAA,gBAAA,CAAA,CACA,GAAA,CAAA,oBAAA,CAAA,sBAAA,CAAA,sBAAA,CAAA,CACA,GAAA,CAAA,oBAAA,CAAA,sBAAA,CAAA,sBAAA,CAAA,CACA,GAAA,CAAA,2BAAA,CAAA,sBAAA,CAAA,6BAAA,CAAA,CACA,GAAA,CAAA,6BAAA,CAAA,sBAAA,CAAA,+BAAA,CAAA,CACA,GAAA,CAAA,qBAAA,CAAA,sBAAA,CAAA,kBAAA,CAAA,CACA,GAAA,CAAA,yBAAA,CAAA,sBAAA,CAAA,2BAAA,CAAA,CACA,GAAA,CAAA,2BAAA,CAAA,sBAAA,CAAA,6BAAA,CAAA,CACA,GAAA,CAAA,mBAAA,CAAA,sBAAA,CAAA,qBAAA,CAAA,CACA,GAAA,CAAA,YAAA,CAAA,sBAAA,CAAA,cAAA,CAAA,CACA,GAAA,CAAA,iBAAA,CAAA,sBAAA,CAAA,mBAAA,CAAA,CACA,GAAA,CAAA,gBAAA,CAAA,sBAAA,CAAA,kBAAA,CAAA,CACA,GAAA,CAAA,wBAAA,CAAA,sBAAA,CAAA,0BAAA,CAAA,CACA,GAAA,CAAA,kBAAA,CAAA,sBAAA,CAAA,oBAAA,CAAA,CACA,GAAA,CAAA,iCAAA,CAAA,sBAAA,CAAA,mCAAA,CAAA,CACA,GAAA,CAAA,kBAAA,CAAA,sBAAA,CAAA,eAAA,CAAA,CACA,GAAA,CAAA,8BAAA,CAAA,sBAAA,CAAA,gCAAA,CAAA,CACA,GAAA,CAAA,mBAAA,CAAA,sBAAA,CAAA,qBAAA,CAAA,CACA,GAAA,CAAA,qBAAA,CAAA,sBAAA,CAAA,uBAAA,CAAA,CACA,GAAA,CAAA,aAAA,CAAA,sBAAA,CAAA,eAAA,CAAA,CACA,GAAA,CAAA,aAAA,CAAA,sBAAA,CAAA,eAAA,CAAA,CACA,GAAA,CAAA,cAAA,CAAA,sBAAA,CAAA,gBAAA,CAAA,CACA,GAAA,CAAA,4CAAA,CAAA,sBAAA,CAAA,8CAAA,CAAA,CACA,GAAA,CAAA,uBAAA,CAAA,sBAAA,CAAA,yBAAA,CAAA,CACA,GAAA,CAAA,UAAA,CAAA,sBAAA,CAAA,YAAA,CAAA,CACA,GAAA,CAAA,cAAA,CAAA,sBAAA,CAAA,gBAAA,CAAA,CACA,GAAA,CAAA,yBAAA,CAAA,sBAAA,CAAA,2BAAA,CAAA,CACA,GAAA,CAAA,qBAAA,CAAA,sBAAA,CAAA,uBAAA,CAAA,CACA,GAAA,CAAA,+BAAA,CAAA,sBAAA,CAAA,4BAAA,CAAA,CACA,GAAA,CAAA,wBAAA,CAAA,sBAAA,CAAA,qBAAA,CAAA,CACA,GAAA,CAAA,4BAAA,CAAA,sBAAA,CAAA,8BAAA,CAAA,CACA,GAAA,CAAA,8BAAA,CAAA,sBAAA,CAAA,gCAAA,CAAA,CACA,GAAA,CAAA,wBAAA,CAAA,sBAAA,CAAA,qBAAA,CAAA,CACA,GAAA,CAAA,kCAAA,CAAA,sBAAA,CAAA,+BAAA,CAAA,CACA,GAAA,CAAA,0BAAA,CAAA,sBAAA,CAAA,uBAAA,CAAA,CACA,GAAA,CAAA,sBAAA,CAAA,sBAAA,CAAA,wBAAA,CAAA,CACA,GAAA,CAAA,WAAA,CAAA,sBAAA,CAAA,aAAA,CAAA,CACA,GAAA,CAAA,gBAAA,CAAA,sBAAA,CAAA,kBAAA,CAAA,CACA,GAAA,CAAA,gBAAA,CAAA,sBAAA,CAAA,kBAAA,CAAA,CACA,GAAA,CAAA,0BAAA,CAAA,sBAAA,CAAA,4BAAA,CAAA,CACA,GAAA,CAAA,+BAAA,CAAA,sBAAA,CAAA,iCAAA,CAAA,CACA,GAAA,CAAA,yBAAA,CAAA,sBAAA,CAAA,2BAAA,CAAA,CACA,GAAA,CAAA,4CAAA,CAAA,sBAAA,CAAA,8CAAA,CAAA,CACA,GAAA,CAAA,gBAAA,CAAA,sBAAA,CAAA,kBAAA,CAAA,CACA,GAAA,CAAA,YAAA,CAAA,sBAAA,CAAA,cAAA,CAAA,CACA,GAAA,CAAA,yBAAA,CAAA,sBAAA,CAAA,2BAAA,CAAA,CACA,GAAA,CAAA,mBAAA,CAAA,sBAAA,CAAA,qBAAA,CAAA,CACA,GAAA,CAAA,uBAAA,CAAA,sBAAA,CAAA,oBAAA,CAAA,CACA,GAAA,CAAA,sBAAA,CAAA,sBAAA,CAAA,mBAAA,CAAA,CACA,GAAA,CAAA,2BAAA,CAAA,sBAAA,CAAA,6BAAA,CAAA,CACA,GAAA,CAAA,qBAAA,CAAA,sBAAA,CAAA,uBAAA,CAAA,CACA,GAAA,CAAA,aAAA,CAAA,sBAAA,CAAA,eAAA,CAAA,CACA,GAAA,CAAA,oBAAA,CAAA,sBAAA,CAAA,sBAAA,CAAA,CACA,GAAA,CAAA,wBAAA,CAAA,sBAAA,CAAA,0BAAA,CAAA,CACA,GAAA,CAAA,iBAAA,CAAA,sBAAA,CAAA,mBAAA,CAAA,CACA,GAAA,CAAA,wCAAA,CAAA,sBAAA,CAAA,0CAAA,CAAA,CACA,GAAA,CAAA,qCAAA,CAAA,sBAAA,CAAA,uCAAA,CAAA,CACA,GAAA,CAAA,mBAAA,CAAA,sBAAA,CAAA,qBAAA,CAAA,CACA,GAAA,CAAA,mBAAA,CAAA,sBAAA,CAAA,qBAAA,CAAA,CACA,GAAA,CAAA,kBAAA,CAAA,sBAAA,CAAA,oBAAA,CAAA,CACA,GAAA,CAAA,aAAA,CAAA,sBAAA,CAAA,eAAA,CAAA,CACA,GAAA,CAAA,2BAAA,CAAA,sBAAA,CAAA,6BAAA,CAAA,CACA,GAAA,CAAA,kBAAA,CAAA,sBAAA,CAAA,oBAAA,CAAA,CACA,GAAA,CAAA,yBAAA,CAAA,sBAAA,CAAA,2BAAA,CAAA,CACA,GAAA,CAAA,uBAAA,CAAA,sBAAA,CAAA,yBAAA,CAAA,CACA,GAAA,CAAA,mBAAA,CAAA,sBAAA,CAAA,qBAAA,CAAA,CAAwE;AACxE,GAAA,CAAA,0BAAA,CAAA,sBAAA,CAAA,4BAAA,CAAA,CACA,GAAA,CAAA,8BAAA,CAAA,sBAAA,CAAA,gCAAA,CAAA,CACA,GAAA,CAAA,sBAAA,CAAA,sBAAA,CAAA,wBAAA,CAAA,CACA,GAAA,CAAA,8BAAA,CAAA,sBAAA,CAAA,gCAAA,CAAA,CACA,GAAA,CAAA,qBAAA,CAAA,sBAAA,CAAA,uBAAA,CAAA,CACA,GAAA,CAAA,wBAAA,CAAA,sBAAA,CAAA,0BAAA,CAAA,CACA,GAAA,CAAA,yBAAA,CAAA,sBAAA,CAAA,2BAAA,CAAA,CACA,GAAA,CAAA,qBAAA,CAAA,sBAAA,CAAA,uBAAA,CAAA,CACA,GAAA,CAAA,mBAAA,CAAA,sBAAA,CAAA,qBAAA,CAAA,CACA,GAAA,CAAA,gBAAA,CAAA,sBAAA,CAAA,kBAAA,CAAA,CACA,GAAA,CAAA,cAAA,CAAA,sBAAA,CAAA,gBAAA,CAAA,CACA,GAAA,CAAA,YAAA,CAAA,sBAAA,CAAA,cAAA,CAAA,CACA,GAAA,CAAA,WAAA,CAAA,sBAAA,CAAA,aAAA,CAAA,CACA,GAAA,CAAA,UAAA,CAAA,sBAAA,CAAA,YAAA,CAAA,CACA,GAAA,CAAA,SAAA,CAAA,sBAAA,CAAA,WAAA,CAAA,CACA,GAAA,CAAA,aAAA,CAAA,sBAAA,CAAA,eAAA,CAAA,CACA,GAAA,CAAA,kBAAA,CAAA,sBAAA,CAAA,oBAAA,CAAA,CACA,GAAA,CAAA,YAAA,CAAA,sBAAA,CAAA,cAAA,CAAA,CACA,GAAA,CAAA,YAAA,CAAA,sBAAA,CAAA,cAAA,CAAA,CACA,GAAA,CAAA,2BAAA,CAAA,sBAAA,CAAA,6BAAA,CAAA,CACA;AACA,GAAA,CAAA,aAAA,CAAA,sBAAA,CAAA,eAAA,CAAA,CACA,GAAA,CAAA,eAAA,CAAA,sBAAA,CAAA,iBAAA,CAAA,CACA,GAAA,CAAA,UAAA,CAAA,sBAAA,CAAA,YAAA,CAAA,CACA;;;GAIA,QAAA,CAAA,cAAA,CAAA,OAAA,CAAA,EAAA,CAAA,CACA,KAAA,IAAA,CAAA,gBAAA,CACA,KAAA,OAAA,CAAA,OAAA,CACA,KAAA,KAAA,CAAA,GAAA,CAAA,KAAA,GAAA,KAAA,CACA,KAAA,EAAA,CAAA,EACA,CACA,cAAA,CAAA,SAAA,CAAA,GAAA,CAAA,KAAA,CACA,0BAAA,CAAA,gBAAA,CAAA,SAAA,CAAA,CAAA,CAA2D,MAAA,IAAA,CAAA,cAAA,CAAA,CAAA,CAAA,OAAA,CAAA,CAAA,CAAA,EAAA,CAA8C,CAAzG,CAAA,CACA,GAAA,CAAA,WAAA,CAAA,CACA,sBAAA,CAAA,KADA,CAEA,gBAAA,CAAA,KAFA,CAGA,0BAAA,CAAA,KAHA,CAIA,mCAAA,CAAA,KAJA,CAKA,6BAAA,CAAA,KALA,CAMA,+BAAA,CAAA,KANA,CAOA,cAAA,CAAA,KAPA,CAQA,uBAAA,CAAA,KARA,CASA,yBAAA,CAAA,KATA,CAUA,mBAAA,CAAA,KAVA,CAWA,eAAA,CAAA,KAXA,CAYA,iBAAA,CAAA,KAZA,CAaA,iBAAA,CAAA,KAbA,CAcA,iBAAA,CAAA,KAdA,CAeA,EAAA,CAAA,KAfA,CAgBA,cAAA,CAAA,KAhBA,CAiBA,cAAA,CAAA,KAjBA,CAkBA,cAAA,CAAA,KAlBA,CAmBA,cAAA,CAAA,KAnBA,CAoBA,iBAAA,CAAA,KApBA,CAqBA,uBAAA,CAAA,KArBA,CAsBA,WAAA,CAAA,KAtBA,CAuBA,oBAAA,CAAA,KAvBA,CAwBA,8BAAA,CAAA,KAxBA,CAyBA,gCAAA,CAAA,KAzBA,CA0BA,0BAAA,CAAA,KA1BA,CA2BA,YAAA,CAAA,KA3BA,CA4BA,iBAAA,CAAA,KA5BA,CA6BA,cAAA,CAAA,KA7BA,CA8BA,SAAA,CAAA,KA9BA,CA+BA,MAAA,CAAA,KA/BA,CAAA,CAiCA,QAAA,CAAA,mBAAA,CAAA,IAAA,CAAA,CACA,OAAA,IAAA,EACA;AACA,IAAA,MAAA,CACA,MAAA,kBAAA,CACA,IAAA,MAAA,CACA,MAAA,4BAAA,CACA,IAAA,MAAA,CACA,MAAA,sEAAA,CACA,IAAA,MAAA,CACA,MAAA,sDAAA,CACA,IAAA,MAAA,CACA,MAAA,uBAAA,CACA,IAAA,MAAA,CACA,MAAA,4BAAA,CAbA,CAeA,GAAA,OAAA,IAAA,EAAA,IAAA,EAAA,KAAA,CAAA,CACA,MAAA,+BACA,CACA,CACA;;;GAIA,QAAA,CAAA,oBAAA,CAAA,UAAA,CAAA,CACA,KAAA,IAAA,CAAA,sBAAA,CACA,GAAA,CAAA,UAAA,CAAA,MAAA,CAAA,IAAA,CAAA,WAAA,EAAA,IAAA,CAAA,SAAA,CAAA,CAAA,CAAiE,MAAA,CAAA,WAAA,CAAA,CAAA,CAAA,GAAA,UAAwC,CAAzG,GACA,eADA,CAEA,GAAA,CAAA,IAAA,CAAA,mBAAA,CAAA,UAAA,CAAA,EAAA,UAAA,CACA,GAAA,CAAA,aAAA,CAAA,UAAA,CAAA,QAAA,CAAA,EAAA,CAAA,CACA,KAAA,OAAA,CAAA,kBAAA,IAAA,CAAA,MAAA,CAAA,aAAA,CAAA,GAAA,CACA,KAAA,KAAA,CAAA,GAAA,CAAA,KAAA,GAAA,KAAA,CACA,KAAA,UAAA,CAAA,UAAA,CACA,KAAA,UAAA,CAAA,UACA,CACA,oBAAA,CAAA,SAAA,CAAA,GAAA,CAAA,KAAA,CACA,0BAAA,CAAA,sBAAA,CAAA,SAAA,CAAA,CAAA,CAAiE,MAAA,IAAA,CAAA,oBAAA,CAAA,CAAA,CAAA,UAAA,CAAiD,CAAlH,CAAA,C;;iNChSA,mBAAA,CAAA,CAAA,CAAA,mBAAA,EAAA,2BAAA,UAAA,MAAA,CAAA,CAAA,8BAAA,mBAAA,CAAA,CAAA,CAAA,mBAAA,CAAA,SAAA,CAAA,UAAA,CAAA,MAAA,CAAA,GAAA,CAAA,EAAA,oBAAA,GAAA,CAAA,mCAAA,CAAA,mBAAA,CAAA,cAAA,qDAAA,CAAA,CAAA,oBAAA,GAAA,CAAA,6CAAA,CAAA,mBAAA,CAAA,uBAAA,+CAAA,CAAA,CAAA,oBAAA,GAAA,CAAA,yCAAA,CAAA,mBAAA,CAAA,mBAAA,0CAAA,CAAA,CAAA,oBAAA,GAAA,CAAA,iDAAA,CAAA,aAAA,mBAAA,CAAA,CAAA,CAAA,yCAAA,CAAA,CAAA;;;;;;;;;;;;;;;kFAAA,CAgBA;AAKA,QAAA,CAAA,SAAA,CAAA,GAAA,CAAA,CACA,MAAA,CAAA,MAAA,CAAA,IAAA,CAAA,GAAA,CAAA,UAAA,CAAA,IAAA,EAAA,GAAA,CAAA,KAAA,CAAA,CAAA,CAAA,CAAA,GAAA,CAAA,KAAA,CACA,CAEA,QAAA,CAAA,cAAA,CAAA,GAAA,CAAA,CACA,GAAA,CAAA,GAAA,CAAA,MAAA,KAAA,CACA,MAAA,CAAA,SAAA,CAAA,GAAA,CACA,CAEA,GAAA,CAAA,6BAAA,CAAA,QAAA,CAAA,6BAAA,CAAA,CAAA,CAAA,CACA,GAAA,CAAA,EAAA,CAAA,CAAA,UAAA,GAAA,KAAA,CAAA,CACA,MAAA,IAAe,CAAA,6CAAA,CAAA,gCAAA,CAAf,CAA6C,0DAA7C,CACA,CAEA,MAAA,CAAA,CACA,CANA,CAOA;;;;;;GArCA,GA8Ce,CAAA,GA9Cf,yBA+CA,aAAA,SAAA,CAAA,WAAA,CAAA,IAAA,WAAA,WAAA,WAAA,CAAA,KAAA,CACA,KAAA,SAAA,CAAA,IAAA,EAAA,CACA,KAAA,SAAA,CAAA,SAAA,CACA,SAAA,CAAA,qBAAA,CAAA,IAAA,CAAA,CAAA,YAAA,CAAA,8BAAA,CAAA,iBAAA,CAAA,qBAAA,CAAA,qBAAA,CAAA,mBAAA,CAAA,gBAAA,CAAA,mBAAA,CAAA,qBAAA,CAAA,CAAA,WAAA,CACA,CACA;;;;;;;;KApDA,gCA+DA,UA/DA,CA+DA,oBAAA,IAAA,CAAA,WAAA,CAAA,aAAA,CAAA,CACA,GAAA,CAAA,KAAA,CAAgB,MAAA,CAAA,mCAAA,CAAA,WAAA,CAAA,CAAA,CAAS,IAAT,CAAhB,CACA,GAAA,CAAA,MAAA,CAAA,MAAA,CAAA,KAAA,CAAA,EAAA,KAAA,CAAA,MAAA,CAAA,CAAA,CAAA,CACA,MAAA,CAAA,CAAA,CAAA,CAAA,KAAA,CAAA,MAAA,CACA,KAAA,CAAA,OAAA,CAAA,SAAA,OAAA,CAAA,KAAA,CAAA,CACA,MAAA,CAAA,aAAA,CAAA,OAAA,CAAA,EAAA,EAAA,KAAA,CACK,CAFL,EAGA,MAAA,MAAA,SAAA,CAAA,IAAA,CAAA,GAAA,CAAA,CAAA,CAAA,WAAA,CAAA,CAAA,CAAA,CAAA,CAAA,aAAA,CAAA,CAAA,CAAA,CAAA,CAAA,MAAA,EAAA,IAAA,CAAA,SAAA,QAAA,CAAA,CACA,GAAA,CAAA,MAAA,CAAA,EAAA,CACA,GAAA,CAAA,eAAA,CAAA,QAAA,CAAA,CAAA,CAAA,CACA,GAAA,CAAA,aAAA,CAAA,QAAA,CAAA,EAAA,eAAA,CAAA,CACA,MAAA,CAAA,SAAA,CAAA,QAAA,CAAA,KAAA,CAAA,CAAA,CAAA,EAAA,eAAA,EAAA,QAAA,CAAA,KAAA,CAAA,CACA,MAAA,CAAA,OAAA,CAAA,KAAA,QAAA,CAAA,KAAA,CAAA,EAAA,eAAA,CAAA,CAAA,CAAA,EAAA,eAAA,CAAA,CAAA,CAAA,aAAA,EAAA,QAAA,CAAA,OAAA,CAAA,CAEA,GAAA,aAAA,CAAA,CACA,MAAA,CAAA,SAAA,CAAA,QAAA,CAAA,KAAA,CAAA,EAAA,eAAA,CAAA,CAAA,CAAA,aAAA,CAAA,EAAA,eAAA,CAAA,CAAA,CAAA,aAAA,CAAA,EAAA,EAAA,QAAA,CAAA,KAAA,CACA,CAEA,MAAA,CAAA,MACK,CAZL,CAaA,CACA;;;;;;;;;;;;;;KApFA,QAqGA,4BArGA,CAqGA,4CAEG,IADH,CAAA,IACG,OADH,IACG,CACH,MAAA,MAAA,SAAA,CAAA,IAAA,CAAA,GAAA,CAAA,EAAA,CAAA,CAAA,CAAA,CAAA,CAAA,IAAA,EAAA,IAAA,CAAA,iBAAA,KAAA,CAAA,CAAA,SAAA,CAAA,CAAA,CACA,GAAA,CAAA,EAAA,CAAA,CAAA,UAAA,GAAA,KAAA,CAAA,CACA;AACA;AACA,MAAA,MACA,CAEA,KAAA,CAAA,CACK,CARL,CASA,CACA;;;;KAlHA,QAyHA,eAzHA,CAyHA,yBAAA,IAAA,CAAA,QAAA,CAAA,gBACA,GAAA,CAAA,KAAA,CAAgB,MAAA,CAAA,mCAAA,CAAA,WAAA,CAAA,CAAA,CAAS,IAAT,CAAhB,CACA,GAAA,CAAA,MAAA,CAAA,CAAA,CACA,GAAA,CAAA,KAAA,CAAA,MAAA,CAAA,IAAA,CAAA,QAAA,CAAA,KAAA,CAAA,CACA,GAAA,CAAA,MAAA,CAAA,EAAA,CACA,GAAA,CAAA,QAAA,CALA,2BAQA,GAAA,CAAA,YAAA,CAAA,MAAA,GAAA,CAAA,CAAA,IAAA,CAAA,CAAA,KAAA,CAAA,MAAA,CAAA,CAAA,CAAA,GAAA,CACA,GAAA,CAAA,SAAA,CAAA,MAAA,CAAA,YAAA,CAAA,KAAA,CAAA,MAAA,CAAA,KAAA,CAAA,MAAA,CAAA,MAAA,CAAA,YAAA,CACA,GAAA,CAAA,MAAA,CAAA,MAAA,CAAA,KAAA,CAAA,MAAA,GAAA,CAAA,CAAA,EAAA,KAAA,CAAA,MAAA,CAAA,CAAA,CAAA,SAAA,CAAA,SAAA,CAAA,CAEA,GAAA,MAAA,GAAA,CAAA,CAAA,CACA,MAAA,CAAA,CAAA,CAAA,CAAA,KAAA,CAAA,MAAA,CACA,KAAA,CAAA,OAAA,CAAA,SAAA,OAAA,CAAA,KAAA,CAAA,CACA,MAAA,CAAA,aAAA,CAAA,OAAA,CAAA,EAAA,EAAA,KAAA,CACS,CAFT,EAGA,KAAA,CAAA,IAAA,CAAA,MAAA,CAAA,EAAA,EAAA,KAAA,CAAA,MAAA,CAAA,MAAA,CAAA,MAAA,CAAA,SAAA,CACO,CANP,IAMO,CACP,KAAA,CAAA,IAAA,CAAA,MAAA,CAAA,CAAA,CAAA,MAAA,CAAA,MAAA,CAAA,SAAA,CACA,CAEA,MAAA,CAAA,IAAA,CAAA,MAAA,EACA,MAAA,EAAA,SAvBA,EAOA,MAAA,MAAA,GAAA,KAAA,CAAA,MAAA,CAAA,QAiBA,CAEA,MAAW,CAAA,MAAA,CAAA,mCAAA,CAAA,SAAA,CAAA,CAAA,CAAO,MAAP,CAAO,SAAA,IAAA,CAAA,CAAA,QAAA,CAAA,KAAA,CAAA,SAAA,CAAA,IAAA,CAAA,GAAA,CAAA,CAAA,CAAA,CAAA,GAAA,CAAA,CAAA,CAAA,CAAA,GAAA,CAAA,CAAA,CAAA,IAAA,EAAA,IAAA,CAAA,SAAA,YAAA,CAAA,CAClB,QAAA,CAAA,YACK,CAFa,CAAA,CAAP,EAEN,IAFM,CAEN,UAAA,CACL,GAAA,CAAA,CAAA,CAAA,QAAA,CAAA,KAAA,CAAA,CAAA,CAAA,CAAA,EAAA,QAAA,CAAA,KAAA,CAAA,CACA,GAAA,CAAA,CAAA,CAAA,QAAA,CAAA,KAAA,CAAA,CAAA,CAAA,EAAA,EAAA,EAAA,QAAA,CAAA,KAAA,CAAA,CACA,GAAA,CAAA,CAAA,CAAA,QAAA,CAAA,KAAA,CAAA,EAAA,EAAA,CAAA,EAAA,EAAA,CAAA,EAAA,EAAA,QAAA,CAAA,KAAA,CAAA,CACA,MAAA,CACA,CAAA,CAAA,CADA,CAEA,CAAA,CAAA,CAFA,CAGA,CAAA,CAAA,CAHA,CAKK,CAXM,CAWN,SAAA,CAAA,CAAA,CACL,KAAA,CAAA,6BAAA,CAAA,CAAA,CACK,CAbM,CAcX,CACA;KAlKA,QAsKA,mBAtKA,CAsKA,8BAAA,CACA,MAAA,MAAA,SAAA,CAAA,IAAA,CAAA,GAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,EAAA,IAAA,CAAA,SAAA,QAAA,CAAA,CACA,GAAA,CAAA,MAAA,CAAA,EAAA,CACA,MAAA,CAAA,oBAAA,CAAA,QAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CACA,MAAA,CAAA,0BAAA,CAAA,QAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CACA,MAAA,CAAA,YAAA,CAAA,QAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CACA,MAAA,CAAA,OAAA,CAAA,GAAA,QAAA,CAAA,CAAA,CAAA,CAAA,GAAA,CAAA,QAAA,CAAA,CAAA,CAAA,CAAA,GAAA,CAAA,QAAA,CAAA,CAAA,CAAA,CACA,MAAA,CAAA,MACK,CAPL,CAQA,CACA;;;;;;;;;;;KAhLA,QA8LA,mBA9LA,CA8LA,6BAAA,IAAA,CAAA,UAAA,CAAA,iBACA,GAAA,CAAA,KAAA,CAAgB,MAAA,CAAA,mCAAA,CAAA,WAAA,CAAA,CAAA,CAAS,IAAT,CAAhaAAA,CAAA,OAAA,CAAA,EAAA,EAAA,KAAA,CACS,CAFT,EAGA,MAAA,CAAA,aAAA,CAAA,OAAA,CAAA,MAAA,CAAA,EAAA,EAAA,KAAA,CAAA,MAAA,EACA,OAAA,CAAA,IAAA,CAAA,MAAA,CAAA,EAAA,EAAA,KAAA,CAAA,MAAA,CAAA,CAAA,CAAA,MAAA,CAAA,MAAA,CAAA,SAAA,CACO,CAPP,IAOO,CACP,OAAA,CAAA,IAAA,CAAA,MAAA,CAAA,CAAA,CAAA,MAAA,CAAA,MAAA,CAAA,SAAA,CACA,CAEA,MAAA,CAAA,IAAA,CAAA,MAAA,EACA,MAAA,EAAA,SAxBA,EAOA,MAAA,MAAA,GAAA,OAAA,CAAA,MAAA,CAAA,SAkBA,CAEA,MAAW,CAAA,MAAA,CAAA,mCAAA,CAAA,SAAA,CAAA,CAAA,CAAO,MAAP,CAAO,SAAA,IAAA,CAAA,CAAA,QAAA,CAAA,MAAA,CAAA,SAAA,CAAA,IAAA,CAAA,GAAA,CAAA,CAAA,CAAA,CAAA,GAAA,CAAA,CAAA,CAAA,CAAA,GAAA,CAAA,CAAA,CAAA,IAAA,EAAA,IAAA,CAAA,SAAA,YAAA,CAAA,CAClB,QAAA,CAAA,YACK,CAFa,CAAA,CAAP,EAEN,IAFM,CAEN,UAAA,CACL,GAAA,CAAA,CAAA,CAAA,QAAA,CAAA,CAAA,CAAA,CACA,GAAA,CAAA,CAAA,CAAA,QAAA,CAAA,KAAA,CAAA,CAAA,CAAA,EAAA,EAAA,EAAA,QAAA,CAAA,KAAA,CAAA,CACA,GAAA,CAAA,CAAA,CAAA,QAAA,CAAA,KAAA,CAAA,EAAA,EAAA,CAAA,EAAA,EAAA,CAAA,EAAA,EAAA,QAAA,CAAA,KAAA,CAAA,CACA,MAAA,CACA,CAAA,CAAA,CADA,CAEA,CAAA,CAAA,CAFA,CAGA,CAAA,CAAA,CAHA,CAKK,CAXM,CAYX,CACA;;;;;KAtOA,QA8OA,iBA9OA,CA8OA,2BAAA,IAAA,CAAA,WAAA,CAAA,CACA,GAAA,CAAA,KAAA,CAAgB,MAAA,CAAA,mCAAA,CAAA,WAAA,CAAA,CAAA,CAAS,IAAT,CAAhB,CACA,GAAA,CAAA,MAAA,CAAA,MAAA,CAAA,KAAA,CAAA,EAAA,KAAA,CAAA,MAAA,CAAA,CAAA,CAAA,CACA,MAAA,CAAA,CAAA,CAAA,CAAA,KAAA,CAAA,MAAA,CACA,KAAA,CAAA,OAAA,CAAA,SAAA,OAAA,CAAA,KAAA,CAAA,CACA,MAAA,CAAA,aAAA,CAAA,OAAA,CAAA,EAAA,EAAA,KAAA,CACK,CAFL,EAGA,MAAA,MAAA,SAAA,CAAA,IAAA,CAAA,GAAA,CAAA,CAAA,CAAA,WAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,MAAA,EAAA,IAAA,CAAA,SAAA,QAAA,CAAA,CACA,MAAA,CAAA,QAAA,CAAA,KAAA,CAAA,CAAA,CAAA,QAAA,CAAA,MAAA,CAAA,CAAA,CACK,CAFL,CAGA,CACA;;;;;;;;;;;;;;KAzPA,QA0QA,cA1QA,CA0QA,wBAAA,IAAA,CAAA,kBAAA,CAAA,kBAAA,CAAA,uBAAA,CAAA,uBAAA,CAAA,WAAA,CAAA,gBAAA,CAAA,UAAA,CAAA,SAAA,CAAA,KAAA,CAAA,SAAA,CAAA,CACA,GAAA,CAAA,qBAAA,CAAA,cAAA,CAAA,kBAAA,CAAA,CACA,GAAA,CAAA,0BAAA,CAAA,cAAA,CAAA,uBAAA,CAAA,CACA,GAAA,CAAA,KAAA,CAAgB,MAAA,CAAA,mCAAA,CAAA,WAAA,CAAA,CAAA,CAAS,IAAT,CAAhB,CACA,GAAA,CAAA,MAAA,CAAA,MAAA,CAAA,KAAA,CAAA,EAAA,KAAA,CAAA,MAAA,CAAA,CAAA,CAAA,EAAA,CAAA,EAAA,CAAA,EAAA,CAAA,EAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CACA,GAAA,CAAA,MAAA,CAAA,CAAA,CACA,MAAA,CAAA,CAAA,CAAA,CAAA,KAAA,CAAA,MAAA,CACA,KAAA,CAAA,OAAA,CAAA,SAAA,OAAA,CAAA,KAAA,CAAA,CACA,MAAA,CAAA,aAAA,CAAA,OAAA,CAAA,EAAA,EAAA,KAAA,CACK,CAFL,EAGA,MAAA,CAAA,EAAA,EAAA,KAAA,CAAA,MAAA,CAEA,GAAA,qBAAA,CAAA,CACA,qBAAA,CAAA,IAAA,CAAA,MAAA,CAAA,MAAA,CACA,CAEA,MAAA,EAAA,EAAA,CACA,MAAA,CAAA,IAAA,CAAA,kBAAA,CAAA,QAAA,CAAA,EAAA,EAAA,QAAA,CAAA,EAAA,CAAA,GAAA,CAAA,CAAA,KAAA,EAAA,IAAA,CAAA,MAAA,CAAA,MAAA,EACA,MAAA,EAAA,EAAA,CAEA,GAAA,0BAAA,CAAA,CACA,0BAAA,CAAA,IAAA,CAAA,MAAA,CAAA,MAAA,CACA,CAEA,MAAA,EAAA,EAAA,CACA,MAAA,CAAA,IAAA,CAAA,uBAAA,CAAA,QAAA,CAAA,EAAA,EAAA,QAAA,CAAA,EAAA,CAAA,GAAA,CAAA,CAAA,KAAA,EAAA,IAAA,CAAA,MAAA,CAAA,MAAA,EACA,MAAA,EAAA,EAAA,CACA,MAAA,CAAA,aAAA,CAAA,WAAA,CAAA,MAAA,EACA,MAAA,EAAA,CAAA,CACA,MAAA,CAAA,aAAA,CAAA,gBAAA,CAAA,MAAA,EACA,MAAA,EAAA,CAAA,CACA,MAAA,CAAA,IAAA,CAAA,UAAA,CAAA,QAAA,CAAA,EAAA,EAAA,QAAA,CAAA,EAAA,CAAA,GAAA,CAAA,CAAA,KAAA,EAAA,IAAA,CAAA,MAAA,CAAA,MAAA,EACA,MAAA,EAAA,CAAA,CACA,MAAA,CAAA,IAAA,CAAA,SAAA,CAAA,QAAA,CAAA,EAAA,EAAA,QAAA,CAAA,EAAA,CAAA,GAAA,CAAA,CAAA,KAAA,EAAA,IAAA,CAAA,MAAA,CAAA,MAAA,EACA,MAAA,EAAA,CAAA,CACA,MAAA,CAAA,aAAA,CAAA,KAAA,CAAA,MAAA,EACA,MAAA,EAAA,CAAA,CACA,MAAA,CAAA,aAAA,CAAA,SAAA,CAAA,MAAA,EACA,MAAA,MAAA,SAAA,CAAA,IAAA,CAAA,GAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,MAAA,EAAA,IAAA,CAAA,SAAA,QAAA,CAAA,CACA,GAAA,CAAA,CAAA,CAAA,QAAA,CAAA,KAAA,CAAA,CAAA,CAAA,EAAA,EAAA,EAAA,QAAA,CAAA,KAAA,CAAA,CACA,GAAA,CAAA,CAAA,CAAA,QAAA,CAAA,KAAA,CAAA,EAAA,EAAA,CAAA,EAAA,EAAA,CAAA,EAAA,EAAA,QAAA,CAAA,KAAA,CAAA,CACA,MAAA,CACA,CAAA,CAAA,CADA,CAEA,CAAA,CAAA,CAFA,CAIK,CAPL,CAQA,CACA;;;;;;;;;;;;KAzTA,QAwUA,iBAxUA,CAwUA,2BAAA,IAAA,CAAA,oBAAA,CAAA,oBAAA,CAAA,eAAA,CAAA,WAAA,CAAA,gBAAA,CAAA,cAAA,CAAA,KAAA,CAAA,SAAA,CAAA,CACA,GAAA,CAAA,uBAAA,CAAA,cAAA,CAAA,oBAAA,CAAA,CACA,GAAA,CAAA,kBAAA,CAAA,SAAA,CAAA,eAAA,CAAA,CACA,GAAA,CAAA,KAAA,CAAgB,MAAA,CAAA,mCAAA,CAAA,WAAA,CAAA,CAAA,CAAS,IAAT,CAAhB,CACA,GAAA,CAAA,MAAA,CAAA,MAAA,CAAA,KAAA,CAAA,EAAA,KAAA,CAAA,MAAA,CAAA,CAAA,CAAA,EAAA,CAAA,EAAA,CAAA,EAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CACA,GAAA,CAAA,MAAA,CAAA,CAAA,CACA,MAAA,CAAA,CAAA,CAAA,CAAA,KAAA,CAAA,MAAA,CACA,KAAA,CAAA,OAAA,CAAA,SAAA,OAAA,CAAA,KAAA,CAAA,CACA,MAAA,CAAA,aAAA,CAAA,OAAA,CAAA,EAAA,EAAA,KAAA,CACK,CAFL,EAGA,MAAA,CAAA,EAAA,EAAA,KAAA,CAAA,MAAA,CAEA,GAAA,uBAAA,CAAA,CACA,uBAAA,CAAA,IAAA,CAAA,MAAA,CAAA,MAAA,CACA,CAEA,MAAA,EAAA,EAAA,CACA,MAAA,CAAA,IAAA,CAAA,oBAAA,CAAA,QAAA,CAAA,EAAA,EAAA,QAAA,CAAA,EAAA,CAAA,GAAA,CAAA,CAAA,KAAA,EAAA,IAAA,CAAA,MAAA,CAAA,MAAA,EACA,MAAA,EAAA,EAAA,CACA,kBAAA,CAAA,IAAA,CAAA,MAAA,CAAA,MAAA,EACA,MAAA,EAAA,EAAA,CACA,MAAA,CAAA,aAAA,CAAA,WAAA,CAAA,MAAA,EACA,MAAA,EAAA,CAAA,CACA,MAAA,CAAA,aAAA,CAAA,gBAAA,CAAA,MAAA,EACA,MAAA,EAAA,CAAA,CACA,MAAA,CAAA,IAAA,CAAA,cAAA,CAAA,QAAA,CAAA,EAAA,EAAA,QAAA,CAAA,EAAA,CAAA,GAAA,CAAA,CAAA,KAAA,EAAA,IAAA,CAAA,MAAA,CAAA,MAAA,EACA,MAAA,EAAA,CAAA,CACA,MAAA,CAAA,aAAA,CAAA,KAAA,CAAA,MAAA,EACA,MAAA,EAAA,CAAA,CACA,MAAA,CAAA,aAAA,CAAA,SAAA,CAAA,MAAA,EACA,MAAA,MAAA,SAAA,CAAA,IAAA,CAAA,GAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,MAAA,EAAA,IAAA,CAAA,SAAA,QAAA,CAAA,CACA,GAAA,CAAA,CAAA,CAAA,QAAA,CAAA,KAAA,CAAA,CAAA,CAAA,EAAA,EAAA,EAAA,QAAA,CAAA,KAAA,CAAA,CACA,GAAA,CAAA,CAAA,CAAA,QAAA,CAAA,KAAA,CAAA,EAAA,EAAA,CAAA,EAAA,EAAA,CAAA,EAAA,EAAA,QAAA,CAAA,KAAA,CAAA,CACA,MAAA,CACA,CAAA,CAAA,CADA,CAEA,CAAA,CAAA,CAFA,CAIK,CAPL,CAQA,CACA;;;;;;;KA/WA,QAyXA,mBAzXA,CAyXA,6BAAA,iBAAA,CAAA,qBAAA,CAAA,CACA,GAAA,CAAA,oBAAA,CAAA,cAAA,CAAA,iBAAA,CAAA,CACA,GAAA,CAAA,MAAA,CAAA,MAAA,CAAA,KAAA,CAAA,GAAA,EAAA,CAAA,CAAA,CAAA,CAEA,GAAA,oBAAA,CAAA,CACA,oBAAA,CAAA,IAAA,CAAA,MAAA,CAAA,CAAA,CACA,CAEA,MAAA,CAAA,IAAA,CAAA,qBAAA,CAAA,QAAA,CAAA,EAAA,EAAA,QAAA,CAAA,EAAA,CAAA,GAAA,CAAA,CAAA,KAAA,EAAA,IAAA,CAAA,MAAA,CAAA,EAAA,EACA,MAAA,MAAA,SAAA,CAAA,IAAA,CAAA,GAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,MAAA,EAAA,IAAA,CAAA,iBAAA,KAAA,CAAA,CAAA,SAAA,CAAA,CAAA,CACA,GAAA,CAAA,EAAA,CAAA,CAAA,UAAA,GAAA,KAAA,CAAA,CACA;AACA,MAAA,MACA,CAEA,KAAA,CAAA,CACK,CAPL,CAQA,CA1YA,eA6YA;4BA7YA,E,IAAA,C,IAAA,C,2JAAA,CAAA,C;;qQCAA,mBAAA,CAAA,CAAA,CAAA,mBAAA,EAAA,8BAAA,mBAAA,CAAA,CAAA,CAAA,mBAAA,CAAA,OAAA,CAAA,UAAA,CAAA,MAAA,CAAA,KAAA,CAAA,EAAA,8BAAA,mBAAA,CAAA,CAAA,CAAA,mBAAA,CAAA,WAAA,CAAA,UAAA,CAAA,MAAA,CAAA,SAAA,CAAA,EAAA,8BAAA,mBAAA,CAAA,CAAA,CAAA,mBAAA,CAAA,YAAA,CAAA,UAAA,CAAA,MAAA,CAAA,UAAA,CAAA,EAAA,8BAAA,mBAAA,CAAA,CAAA,CAAA,mBAAA,CAAA,SAAA,CAAA,UAAA,CAAA,MAAA,CAAA,OAAA,CAAA,EAAA,8BAAA,mBAAA,CAAA,CAAA,CAAA,mBAAA,CAAA,MAAA,CAAA,UAAA,CAAA,MAAA,CAAA,IAAA,CAAA,EAAA,8BAAA,mBAAA,CAAA,CAAA,CAAA,mBAAA,CAAA,YAAA,CAAA,UAAA,CAAA,MAAA,CAAA,UAAA,CAAA,EAAA;;;;;;;;;;;;;;;kFAgBO,QAAA,CAAA,KAAA,EAAA,CACP,GAAA,CAAA,OAAA,CAAA,MAAA,CACA,GAAA,CAAA,OAAA,CAAA,GAAA,CAAA,OAAA,CAAA,SAAA,OAAA,CAAA,OAAA,CAAA,CACA,OAAA,CAAA,OAAA,CACA,MAAA,CAAA,OACG,CAHH,CAAA,CAIA,GAAA,CAAA,OAAA,EAAA,CAAA,MAAA,CAAA,KAAA,eAAA,CAAiD;AAEjD,MAAA,CACA,OAAA,CAAA,OADA,CAEA,OAAA,CAAA,OAFA,CAGA,MAAA,CAAA,MAHA,CAKC,CAAA;AAEM,QAAA,CAAA,SAAA,CAAA,IAAA,CAAA,CACP,GAAA,CAAA,MAAA,CAAA,EAAA,CACA,GAAA,CAAA,UAAA,CAAA,IAAA,CAAA,KAAA,CAAA,GAAA,CAAA,CACA,UAAA,CAAA,OAAA,CAAA,SAAA,OAAA,CAAA,CACA,GAAA,CAAA,MAAA,CAAA,QAAA,CAAA,OAAA,CAAA,EAAA,CAAA,CAEA,GAAA,KAAA,CAAA,MAAA,CAAA,CAAA,CACA,OAAa;AACb,CAEA,GAAA,OAAA,CAAA,MAAA,CAAA,CAAA,EAAA,OAAA,CAAA,OAAA,CAAA,MAAA,CAAA,CAAA,CAAA,GAAA,GAAA,CAAA,CACA,MAAA,EAAA,UACA,CAEA,MAAA,CAAA,IAAA,CAAA,MAAA,CACG,CAZH,EAaA,MAAA,CAAA,MACC,CAAA;AAEM,QAAA,CAAA,UAAA,CAAA,GAAA,CAAA,GAAA,CAAA,CACP,MAAA,CAAA,GAAA,CAAA,MAAA,CAAA,SAAA,CAAA,CAAA,CAAA,QAAA,CAAA,CAAA,CAAA,IAAA,CAAA,iBAAA,CAAA,GAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,OAAA,CAAA,OAAA,EAAA,CACA,CACO,QAAA,CAAA,OAAA,CAAA,GAAA,CAAA,QAAA,CAAA,CACP,QAAA,CAAA,OAAA,CAAA,KAAA,CAAA,KAAA,CAAA,MAAA,CAAA,CACA,GAAA,KAAA,EAAA,KAAA,CAAA,MAAA,CAAA,CACA,MAAA,CAAA,MACK,CAFL,IAEK,OAAA,CAAA,QAAA,CAAA,KAAA,CAAA,KAAA,CAAA,CAAA,KAAA,CAAA,CAAA,IAAA,CAAA,SAAA,GAAA,CAAA,CACL,MAAA,CAAA,IAAA,CAAA,GAAA,EACA,MAAA,CAAA,OAAA,CAAA,KAAA,CAAA,CAAA,CAAA,KAAA,CAAA,MAAA,CACK,CAHA,CAIL,CAEA,MAAA,CAAA,OAAA,CAAA,OAAA,GAAA,IAAA,CAAA,iBAAA,CAAA,OAAA,CAAA,CAAA,CAAA,GAAA,CAAA,EAAA,CAAA,CAAA,CACA,CACO,QAAA,CAAA,IAAA,CAAA,SAAA,CAAA,QAAA,CAAA,CACP,MAAA,CAAA,OAAA,CAAA,OAAA,GAAA,IAAA,CAAA,UAAA,CACA,GAAA,SAAA,CAAA,CACA,MAAA,CAAA,QAAA,EACA,CACG,CAJH,CAKA,CACO,QAAA,CAAA,UAAA,CAAA,SAAA,CAAA,QAAA,CAAA,CACP,QAAA,CAAA,OAAA,CAAA,MAAA,CAAA,CACA,GAAA,CAAA,SAAA,EAAA,CAAA,CACA,MAAA,CAAA,MACK,CAFL,IAEK,CACL,MAAA,CAAA,QAAA,GAAA,IAAA,CAAA,SAAA,GAAA,CAAA,CACA,MAAA,CAAA,IAAA,CAAA,GAAA,EACA,MAAA,CAAA,OAAA,CAAA,MAAA,CACO,CAHP,CAIA,CACA,CAEA,MAAA,CAAA,OAAA,CAAA,OAAA,CAAA,EAAA,EAAA,IAAA,CAAA,OAAA,CACA,CACA;;;+OCtFA,mBAAA,CAAA,CAAA,CAAA,mBAAA,EAAA,2BAAA,UAAA,MAAA,CAAA,CAAA,8BAAA,mBAAA,CAAA,CAAA,CAAA,mBAAA,CAAA,SAAA,CAAA,UAAA,CAAA,MAAA,CAAA,YAAA,CAAA,EAAA,oBAAA,GAAA,CAAA,oCAAA,CAAA,mBAAA,CAAA,cAAA,iCAAA,CAAA,CAAA,oBAAA,GAAA,CAAA,4CAAA,CAAA,aAAA,mBAAA,CAAA,CAAA,CAAA,oCAAA,CAAA,CAAA,oBAAA,GAAA,CAAA,mDAAA,CAAA,mBAAA,CAAA,6BAAA,2DAAA,CAAA,CAAA,oBAAA,GAAA,CAAA,2CAAA,CAAA,mBAAA,CAAA,qBAAA,+CAAA,CAAA,CAAA,oBAAA,GAAA,CAAA,6CAAA,CAAA,mBAAA,CAAA,uBAAA,+CAAA,CAAA,CAKA,QAAA,CAAA,qBAAA,CAAA,aAAA,CAAA,OAAA,CAAA,EAAA,CAAA,CACA,GAAA,CAAA,GAAA,CAAA,GAAkB,CAAA,6CAAA,CAAA,gBAAA,CAAlB,CAAgC,OAAhC,CAAgC,EAAhC,CAAA,CAA8C;AAE9C,GAAA,CAAA,aAAA,CAAA,aAAA,CACA,MAAA,CAAA,GACA,CAEA,QAAA,CAAA,QAAA,CAAA,IAAA,CAAA,GAAA,CAAA,CACA,GAAA,CAAA,MAAA,CAAA,MAAA,CAAA,KAAA,CAAA,IAAA,CAAA,MAAA,CAAA,CAEA,IAAA,GAAA,CAAA,CAAA,CAAA,CAAA,CAAiB,CAAA,CAAA,IAAA,CAAA,MAAjB,CAAkC,CAAA,EAAlC,CAAkC,CAClC,MAAA,CAAA,CAAA,CAAA,CAAA,IAAA,CAAA,CAAA,CAAA,CAAA,GAAA,CAAA,CAAA,CAAA,GAAA,CAAA,MAAA,CACA,CAEA,MAAA,CAAA,MACC,CAAA;AAGD,GAAA,CAAA,SAAA,CAAA,QAAA,CAAA,SAAA,CAAA,MAAA,QAAA,CAAA,MAAA,CAAA,OAAA,CAAA,KAAA,CAAA,GAAA,EAAA,OAAA,CAAA,KAAA,CAAA,GAAA,EAAA,OAAA,CAAA,KAAA,CAAA,EAAA,CAAA,CAAA,CAA8F;AAG9F,GAAA,CAAA,QAAA,CAAA,QAAA,CAAA,QAAA,CAAA,MAAA,QAAA,CAAA,MAAA,CAAA,OAAA,CAAA,IAAA,CAAA,GAAA,EAAA,OAAA,CAAA,IAAA,CAAA,GAAA,EAAA,KAAA,SAAA,CAAA,CAAA,CAAA,EAAA,MAAA,CAAA,MAAA,CAAA,CAAA,CAAA,CAAA,CAEA,QAAA,CAAA,eAAA,CAAA,IAAA,CAAA,aAAA,CAAA,WAAA,CAAA,MAAA,CAAA,CACA,GAAA,CAAA,SAAA,CAAA,QAAA,CAAA,IAAA,CAAA,WAAA,CAAA,CACA,GAAA,CAAA,SAAA,CAAA,MAAA,CAAA,IAAA,CAAA,kEAAA,CAAA,KAAA,CAAA,CACA,GAAA,CAAA,WAAA,CAAA,CACA,OAAA,CAAA,QADA,CAEA,SAAA,CAAA,SAAA,CAAA,SAAA,CAAA,QAAA,CAAA,QAAA,CAAA,CAFA,CAGA,SAAA,CAAA,SAAA,CAAA,SAAA,CAAA,QAAA,CAAA,QAAA,CAAA,CAHA,CAIA,KAAA,CAAA,QAAA,CAAA,MAJA,CAAA,CAME,MAAA,CAAA,2CAAA,CAAA,KAAA,CAAA,CAAA,CAAG,MAAH,CAAG,MAAA,IAAA,CAAA,QAAA,CAAA,KAAA,CAAH,EACF,MAAS,CAAA,MAAA,CAAA,oCAAA,CAAA,MAAA,CAAA,CAAA,CAAI,WAAJ,CAAI,aAAA,CAAA,IAAJ,EAAI,IAAJ,CAAI,SAAA,QAAA,CAAA,IAEb,CAAA,aAFa,CAGR,QAHQ,CAEb,aAFa,CAKb,GAAA,MAAA,CAAA,aAAA,GAAA,QAAA,CAAA,CACA,GAAA,CAAA,IAAA,CAAA,MAAA,CAAA,IAAA,CAAA,QAAA,CAAA,aAAA,CAAA,CAAA,QAAA,CAAA,CACA,GAAA,CAAA,MAAA,CAEA,GAAA,CAAA,MAAA,CAAA,CACA,MAAA,CAAA,IACO,CAFP,IAEO,CACP,MAAA,CAAA,IAAA,CAAA,KAAA,CAAA,CAAA,CACA,CAEM,MAAA,CAAA,2CAAA,CAAA,KAAA,CAAA,CAAA,CAAG,MAAH,CAAG,MAAA,MAAA,CAAA,QAAA,CAAA,KAAA,CAAH,EACN,MAAA,CAAA,MACK,CAZL,IAYK,CACL,KAAA,CAAA,QACA,CACG,CApBM,CAqBT,CAEA,GAAA,CAAA,kBAAA,CAAA,EAAA,CAEA,QAAA,CAAA,cAAA,EAAA,CACA,kBAAA,CAAA,OAAA,CAAA,SAAA,CAAA,QAAA,CAAA,CAAA,CAAA,IAAA,CAAA,YAAA,CAAA,CAAA,EACA,kBAAA,CAAA,EACA,CAEA,QAAA,CAAA,iBAAA,CAAA,QAAA,CAAA,CACA,MAAA,CAAA,QAAA,CAAA,QAAA,CAAA,IAAA,GAAA,CACA,CACA;;;;;;GAvEA,GAgFe,CAAA,YAhFf,iGAiFA;KAjFA,CAoFA;KApFA,CAuFA;;KAvFA,aA0FA,IA1FA,2FA0FA,mBAAA,CAAA,CAAA,YAAA,4HAAA,YAAA,WAAA,YAAA,CAAA,IAAA,mCACA,GAAA,CAAA,YADA,2DA1FA,6EA8FA,uBAAA,YACA,8CACA,OAAA,WAAA,CAAA,IAAA,EAAA,CACA,OAAA,MAAA,CAAA,IAAA,CACA,kBAAA,CAAA,IAAA,iCAJA,aAKA,CACA;;;;KApGA,2CA2GA,QA3GA,+FA2GA,mBAAA,IAAA,kLAEA,CAAA,eAAA,CAAA,IAAA,CAAA,KAAA,eAAA,CAAA,KAAA,WAAA,CAAA,KAAA,MAAA,CAFA,yHAIA,UAJA,CAIA,MAAA,eAAA,QAAA,GAAA,QAJA,KAMA,UANA,2BAOA,GAAA,iBAAA,eAAA,CAAA,CACA,cAAA,EACS,CAAA;AATT,KAYA,CAAA,qBAAA,eAAA,0CAAA,cAAA,QAAA,CAAA,IAAA,CAAA,OAAA,cAAA,QAAA,CAAA,IAAA,CAZA,oGA3GA,oFA6HA;KA7HA,SAiIA,cAjIA,CAiIA,wBAAA,WAAA,CAAA,CACA,KAAA,WAAA,CAAA,MAAA,CAAA,IAAA,CAAA,WAAA,CAAA,OAAA,CACA,CACA;KApIA,SAwIA,SAxIA,CAwIA,mBAAA,MAAA,CAAA,CACA,KAAA,MAAA,CAAA,MACA,CA1IA,SA4IA,KA5IA,CA4IA,gBAAA,CACA;AACA,MAAA,CAAA,OAAA,CAAA,OAAA,EACA,CA/IA,sBAgF0C,mDAAA,CAAA,SAAA,CAhF1C,EAkJA,YAAA,CAAA,WAAA,CAA2B,oCAAA,CAAA,aAAA,CAA3B,CAEA,YAAA,CAAA,IAAA,CAAA,iBAAA;AACA,MAAA,CAAA,oCAAA,CAAA,aAAA,CAAA,CAAA,GAAW,IAAX,CAAW,SAAA,SAAA,QAAA,CAAA,SAAA,CAAA,CAAA,IAAA,CAAA,CAAA,EAAA,CAAX,CADA,EAAA,CAGA,YAAA,CAAA,MAAA,CAAA,SAAA,QAAA,CAAA,CACA,GAAA,CAAA,YAAA,CAAA,KAAA,CACE,MAAA,CAAA,oCAAA,CAAA,aAAA,CAAA,CAAA,GAAW,IAAX,CAAW,SAAA,SAAA,CAAA,CACb,GAAA,YAAA,CAAA,OAEA,GAAA,SAAA,CAAA,CACA,QAAA,CAAA,IAAA,CAAA,CACA,IAAA,CAAA,KADA,CAEA,UAAA,CAAA,IAFA,CAAA,EAIA,QAAA,CAAA,QAAA,EACK,CANL,IAMK,CACL,QAAA,CAAA,KAAA,CAAA,GAAyB,CAAA,6CAAA,CAAA,gBAAA,CAAzB,CAAuC,6CAAA,4DAAA,CAAA,8CAAvC,CAAuC,iBAAvC,CAAA,CACA,CACG,CAZD,EAaF,MAAA,CACA,WAAA,CAAA,sBAAA,CACA,YAAA,CAAA,IACA,CAHA,CAKA,CApBA,CAqBA;4BA5KA,E,IAAA,C,IAAA,C,2JAAA,CAAA,C;;0SCAA,mBAAA,CAAA,CAAA,CAAA,mBAAA,EAAA,2BAAA,UAAA,MAAA,CAAA,CAAA,8BAAA,mBAAA,CAAA,CAAA,CAAA,mBAAA,CAAA,SAAA,CAAA,UAAA,CAAA,MAAA,CAAA,SAAA,CAAA,EAAA,oBAAA,GAAA,CAAA,mCAAA,CAAA,mBAAA,CAAA,aAAA,iCAAA,CAAA,CAAA,oBAAA,GAAA,CAAA,2CAAA,CAAA,aAAA,mBAAA,CAAA,CAAA,CAAA,mCAAA,CAAA,CAAA,oBAAA,GAAA,CAAA,6CAAA,CAAA,mBAAA,CAAA,uBAAA,+CAAA,CAAA,CAAA,6BAAA,mBAAA,CAAA,CAAA,CAAA,mBAAA,CAAA,gBAAA,CAAA,UAAA,CAAA,MAAA,CAAA,6CAAA,CAAA,gBAAA,CAAA,CAAA,EAAA,6BAAA,mBAAA,CAAA,CAAA,CAAA,mBAAA,CAAA,sBAAA,CAAA,UAAA,CAAA,MAAA,CAAA,6CAAA,CAAA,sBAAA,CAAA,CAAA,EAAA,6BAAA,mBAAA,CAAA,CAAA,CAAA,mBAAA,CAAA,aAAA,CAAA,UAAA,CAAA,MAAA,CAAA,6CAAA,CAAA,aAAA,CAAA,CAAA,EAAA,6BAAA,mBAAA,CAAA,CAAA,CAAA,mBAAA,CAAA,qBAAA,CAAA,UAAA,CAAA,MAAA,CAAA,6CAAA,CAAA,qBAAA,CAAA,CAAA,EAGA;GAHA,CAMA;;;;GANA,GAWe,CAAA,SAXf,yBAYA,oBAAA,iBACA,KAAA,eAAA,CAAA,KAAA,CACA,KAAA,mBAAA,CAAA,KAAA,CACA,KAAA,OAAA,CAAA,GAAuB,CAAA,2CAAA,CAAA,CAAvB,CAEA,KAAA,IAAA,2FAAA,mBAAA,GAAA,CAAA,GAAA,CAAA,EAAA,CAAA,EAAA,CAAA,IAAA,CAAA,UAAA,4IAAA,IAAA,WAAA,IAAA,CAAA,MAAA,CAAA,KAAA,CAAA,CAAA,CAAA,IAAA,UAAA,WAAA,UAAA,CAAA,CAA+E,6CAAA,CAAA,aAAA,CAAA,CAAW,EAA1F,CAAA,MACA,IAAA,CAAA,MAAA,EAAA,GADA,gCAEA,IAAkB,CAAA,6CAAA,CAAA,gBAAA,CAAlB,CAAgC,4CAAA,IAAA,CAAA,MAAhC,CAAgC,kBAAhC,CAFA,gCAKA,CAAA,MAAA,CAAA,QAAA,CAAA,MAAA,CAAA,MAAA,CAAA,CAAA,MAAA,CAAA,IAAA,CAAA,CAAA,GAAA,CAAA,GAAA,CAAA,EAAA,CAAA,EAAA,CAAA,CAAA,CAAA,MAAA,CAAA,IAAA,CAAA,CAAA,IAAA,CAAA,MAAA,CAAA,CAAA,CAAA,IAAA,CAAA,CAAA,CALA,QAKA,QALA,iBAMA,EANA,CAMA,QAAA,CAAA,YAAA,CAAA,QAAA,CAAA,MAAA,CAAA,CAAA,CANA,IAQA,UAAA,CAAA,IAAA,CAAA,SAAA,CAAA,QAAA,CAAA,CAAA,GAAA,EAAA,CAAA,CARA,gCASA,IAAkB,CAAA,6CAAA,CAAA,sBAAA,CAAlB,CAAsC,EAAtC,CATA,2CAYA,QAZA,4DAAA,yFAeA,KAAA,mBAAA,CAAA,IAAA,EAAA,CAEA,KAAA,kBAAA,2FAAA,mBAAA,CAAA,yLACA,MAAA,CAAA,mBADA,+BAEA,IAAkB,CAAA,6CAAA,CAAA,wBAAA,CAAlB,CAAwC,+EAAxC,CAFA,QAMA,WANA,CAMA,GAAA,CAAA,OAAA,CAAA,SAAA,CAAA,CAAA,CACA,WAAA,CAAA,CACO,CAFP,CANA,CASA,MAAA,CAAA,mBAAA,CAAA,WAAA,CACA,mBAVA,CAUA,KAVA,CAWA,OAXA,CAWA,UAAA,CAAA,UAAA,CACA,mBAAA,CAAA,IAAA,CACA,MAAA,CAAA,IAAA,CAAA,cAAA,CACO,CAHP,CAGO,MAAA,CAAA,mBAHP,CAXA,2CAiBA,CAAA,CAAA,EAjBA,QAiBA,GAjBA,iBAmBA,GAAA,mBAAA,CAAA,CACA,MAAA,CAAA,IAAA,CAAA,YAAA,CACA,CArBA,kCAuBA,GAvBA,6BAyBA,YAAA,CAAA,OAAA,CAAA,CACA,GAAA,WAAA,CAAA,WAAA,GACA,MAAA,CAAA,mBAAA,CAAA,IAAA,CA3BA,yGAAA,gEA+BA,KAAA,WAAA,CAAA,IACA,CAEA;;;;;;KApEA,wCA2EA,QA3EA,CA2EA,kBAAA,KAAA,CAAA,CACA,KAAA,IAAA,CAAA,KAAA,CAAA,0BAAA,CACA,CACA;;;;KA9EA,SAqFA,cArFA,CAqFA,wBAAA,IAAA,CAAA,CAAA,CACA;;;KAtFA,SA4FA,KA5FA,CA4FA,gBAAA,CACA,MAAA,CAAA,OAAA,CAAA,OAAA,EACA,CAEA;;;;KAhGA,SAqGA,EArGA,CAqGA,YAAA,SAAA,CAAA,EAAA,CAAA,CACA,KAAA,OAAA,CAAA,EAAA,CAAA,SAAA,CAAA,EAAA,CACA,CACA;;KAxGA,SA6GA,GA7GA,CA6GA,aAAA,SAAA,CAAA,EAAA,CAAA,CACA,KAAA,OAAA,CAAA,cAAA,CAAA,SAAA,CAAA,EAAA,CACA,CA/GA,SAiHA,IAjHA,CAiHA,cAAA,KAAA,CAAA,iDAAA,IAAA,wDAAA,IAAA,2BACA,oBAAA,OAAA,EAAA,IAAA,sBAAA,KAAA,SAAA,IAAA,EACA,CACA;;KApHA,SAyHA,YAzHA,CAyHA,uBAAA,CACA,OAAA,CAAA,IAAA,CAAA,8FAAA,CACA,CACA;;KA5HA,SAiIA,kBAjIA,CAiIA,4BAAA,eAAA,CAAA,CACA,KAAA,eAAA,CAAA,eACA,CACA;;KApIA,SAyIA,8BAzIA,CAyIA,wCAAA,mBAAA,CAAA,CACA,KAAA,mBAAA,CAAA,mBACA,CACA;;;;;;;;;KA5IA,CAwJA;;;;;;KAxJA,WA+JA,MA/JA,CA+JA,gBAAA,WAAA,CAAA,aAAA,CAAA,oBAAA,WAAA,WAAA,WAAA,CAAA,IAAA,CACA,MAAA,IAAA,CAAA,OAAA,CAAA,SAAA,OAAA,CAAA,MAAA,CAAA,CACA,GAAA,CAAA,KAAA,CAAA,KAAA,CACA,GAAA,CAAA,GAAA,CAAA,MAAA,CAAA,MAAA,CAAA,CACA,IAAA,CAAA,cAAA,CAAA,CAAA,CACA,KAAA,CAAA,IAAA,CACA,GAAA,GAAA,CAAA,GAAA,CAAA,WAAA,GACA,GAAA,eAAA,CAAA,YAAA,CAAA,eAAA,CAAA,CACA,MAAA,CAAA,IAAA,CAAA,CAAA,CAAA,UAAA,CAAA,WAAA,EAAA,IAAA,CAAA,OAAA,CAAA,MAAA,CACS,CANT,CAOA,KAAA,CAAA,eAAA,CAAA,CAAA,CACA,GAAA,eAAA,CAAA,YAAA,CAAA,eAAA,CAAA,CACA,MAAA,CAAA,CAAA,CACS,CAVT,CAWA,QAAA,CAAA,mBAAA,CACA,GAAA,eAAA,CAAA,YAAA,CAAA,eAAA,CAAA,CAEA,GAAA,CAAA,KAAA,CAAA,CACA,MAAA,CAAA,GAAuB,CAAA,6CAAA,CAAA,gBAAA,CAAvB,CAAqC,MAAA,CAAA,0BAArC,CAAqC,eAArC,CAAA,CACA,CACA,CAjBA,CAAA,CAAA,CAmBA,GAAA,CAAA,eAAA,CAAA,aAAA,CAAA,UAAA,CAAA,UAAA,CACA,GAAA,CAAA,WAAA,GACA,MAAA,CAAA,GAAmB,CAAA,6CAAA,CAAA,gBAAA,CAAnB,CAAiC,MAAA,CAAA,0BAAjC,CAAiC,eAAjC,CAAA,CACO,CAHP,CAGO,aAHP,CAAA,CAGO,IACF,CAzBL,CA0BA,CA1LA,SA4LA,qBA5LA,CA4LA,+BAAA,IAAA,CAAA,OAAA,CAAA,WAAA,CAAA,CACA,kBAAA,OAAA,qGAAA,6IAAA,CAAA,UAAA,OACA,IAAA,CAAA,UAAA,CAAA,CAAA,KAAA,oBAAA,CAAA,UAAA,CAAA,IAAA,CAAA,UAAA,CAAA,CAAA,IAAA,CAAA,WAAA,CACA,CACA,CAhMA,SAkMA,oBAlMA,CAkMA,8BAAA,UAAA,CAAA,CAAA,CAAA,GAAA,CAAA,WAAA,CAAA,iBACA,4EAAA,8LAEA,WAFA,CAGO,MAHP,CAEA,WAFA,KAKA,WALA,4DAMA,OAAA,CAAA,MAAA,CAAA,GAAkC,CAAA,6CAAA,CAAA,gBAAA,CAAlC,CAAgD,+BAAA,WAAA,CAAA,GAAhD,CAAgD,iBAAhD,CAAA,CANA,2BAUA,MAAA,CAAA,WAAA,CAAA,UAAA,CACA,MAAA,CAAA,cAAA,CAAA,WAAA,EAXA,wBAAA,IAAA,+CAAA,IAAA,8CAYA,CAAA,CAAA,CAAA,KAAA,CAAA,GAAA,CAAA,IAAA,CAZA,sFAcA,MAAA,CAAA,WAAA,CAAA,IAAA,CAdA,yGAAA,GAiBA,CApNA,qBAuNA,SAAA,CAAA,WAAA,CAAA,IAAA,EAAA,CACA,SAAA,CAAA,IAAA,CAAA,IAAA,EAAA,CACA,SAAA,CAAA,MAAA,CAAA,IAAA,EAAA,CACA,SAAA,CAAA,IAAA,CAAA,IAAA,EAAA,CACA,SAAA,CAAA,0BAAA,CAAA,kCAAA,CACA,SAAA,CAAA,0BAAA,CAAA,wBAAA,CACA;4BA7NA,E,IAAA,C,IAAA,C,2JAAA,CAAA,C;;+MCAA,mBAAA,CAAA,CAAA,CAAA,mBAAA,EAAA,2BAAA,UAAA,MAAA,CAAA,CAAA,8BAAA,mBAAA,CAAA,CAAA,CAAA,mBAAA,CAAA,KAAA,CAAA,UAAA,CAAA,MAAA,CAAA,GAAA,CAAA,EAAA,8BAAA,mBAAA,CAAA,CAAA,CAAA,mBAAA,CAAA,QAAA,CAAA,UAAA,CAAA,MAAA,CAAA,MAAA,CAAA,EAAA;;GAGA,GAAA,CAAA,EAAA,CAAA,CAAA,CACA,GAAA,CAAA,WAAA,CAAA,EAAA,CACA;;;;GAMO,GAAA,CAAA,GAAA,CAAA,QAAA,CAAA,GAAA,CAAA,IAAA,CAAA,OAAA,CAAA,IAAA,CAAA,CACP,GAAA,CAAA,GAAA,CAAA,CACA,IAAA,CAAA,IADA,CAEA,EAAA,CAAA,MAAA,CAAA,EAAA,EAAA,CAFA,CAGA,IAAA,CAAA,GAAA,CAAA,IAHA,CAAA,CAKA,GAAA,OAAA,CAAA,GAAA,CAAA,OAAA,CAAA,OAAA,CACA,GAAA,IAAA,CAAA,GAAA,CAAA,IAAA,CAAA,IAAA,CACA,QAAA,CAAA,GAAA,CACA,CATO,CAUP;;;;GAMO,GAAA,CAAA,MAAA,CAAA,QAAA,CAAA,MAAA,CAAA,EAAA,CAAA,CACP,WAAA,CAAA,IAAA,CAAA,EAAA,EACA,MAAA,WAAA,CACA,GAAA,CAAA,CAAA,CAAA,WAAA,CAAA,OAAA,CAAA,EAAA,CAAA,CAEA,GAAA,CAAA,GAAA,CAAA,CAAA,CAAA,CACA;AACA,WAAA,CAAA,CAAA,CAAA,CAAA,WAAA,CAAA,WAAA,CAAA,MAAA,CAAA,CAAA,CAAA,CACA,WAAA,CAAA,GAAA,EACA,CACA,CACA,CAXO,CAaP,QAAA,CAAA,QAAA,CAAA,GAAA,CAAA,CACA,IAAA,GAAA,CAAA,CAAA,CAAA,CAAA,CAAiB,CAAA,CAAA,WAAA,CAAA,MAAjB,CAAyC,CAAA,EAAzC,CAAyC,CACzC,GAAA,CACA,WAAA,CAAA,CAAA,CAAA,CAAA,GAAA,CACK,CAAA,MAAA,CAAA,CAAA,CACL,OAAA,CAAA,KAAA,CAAA,CAAA,CACA,CACA,CACC,CAAA;AAGD,MAAA,CAAA,kBAAA,CAAA,MAAA,CACA;4BApDA,E,IAAA,C,IAAA,C,0GAAA,CAAA,C;;6NCAA,mBAAA,CAAA,CAAA,CAAA,mBAAA,EAAA,oBAAA,GAAA,CAAA,iDAAA,CAAA,mBAAA,CAAA,2BAAA,8CAAA,CAAA,CAAA,oBAAA,GAAA,CAAA,yDAAA,CAAA,aAAA,mBAAA,CAAA,CAAA,CAAA,iDAAA,CAAA,CAAA,oBAAA,GAAA,CAAA,kEAAA,CAAA,mBAAA,CAAA,4CAAA,yDAAA,CAAA,CAAA,oBAAA,GAAA,CAAA,0EAAA,CAAA,aAAA,mBAAA,CAAA,CAAA,CAAA,kEAAA,CAAA,CAAA,oBAAA,GAAA,CAAA,4EAAA,CAAA,mBAAA,CAAA,sDAAA,mEAAA,CAAA,CAAA,oBAAA,GAAA,CAAA,oFAAA,CAAA,aAAA,mBAAA,CAAA,CAAA,CAAA,4EAAA,CAAA,CAAA,oBAAA,GAAA,CAAA,4EAAA,CAAA,mBAAA,CAAA,sDAAA,mEAAA,CAAA,CAAA,oBAAA,GAAA,CAAA,oFAAA,CAAA,aAAA,mBAAA,CAAA,CAAA,CAAA,4EAAA,CAAA,CAAA,oBAAA,GAAA,CAAA,sEAAA,CAAA,mBAAA,CAAA,gDAAA,6DAAA,CAAA,CAAA,oBAAA,GAAA,CAAA,8EAAA,CAAA,aAAA,mBAAA,CAAA,CAAA,CAAA,sEAAA,CAAA,CAAA,oBAAA,GAAA,CAAA,mDAAA,CAAA,mBAAA,CAAA,8BAAA,2DAAA,CAAA,CAAA,oBAAA,GAAA,CAAA,kCAAA,CAAA,mBAAA,CAAA,YAAA,mCAAA,CAAA,CAAA,oBAAA,GAAA,CAAA,0CAAA,CAAA,aAAA,mBAAA,CAAA,CAAA,CAAA,kCAAA,CAAA,CAAA,oBAAA,GAAA,CAAA,4CAAA,CAAA,mBAAA,CAAA,sBAAA,8CAAA,CAAA,CAAA,oBAAA,GAAA,CAAA,oDAAA,CAAA,aAAA,mBAAA,CAAA,CAAA,CAAA,4CAAA,CAAA,CAAA,oBAAA,GAAA,CAAA,mCAAA,CAAA,mBAAA,CAAA,aAAA,+DAAA,CAAA,CAAA,oBAAA,GAAA,CAAA,2CAAA,CAAA,aAAA,mBAAA,CAAA,CAAA,CAAA,mCAAA,CAAA,CAAA,oBAAA,GAAA,CAAA,0CAAA,CAAA,mBAAA,CAAA,oBAAA,4CAAA,CAAA,CAAA,oBAAA,GAAA,CAAA,kDAAA,CAAA,aAAA,mBAAA,CAAA,CAAA,CAAA,0CAAA,CAAA,CAAA,oBAAA,GAAA,CAAA,wDAAA,CAAA,mBAAA,CAAA,iCAAA,kEAAA,CAAA,CAAA,oBAAA,GAAA,CAAA,kDAAA,CAAA,mBAAA,CAAA,2BAAA,mDAAA,CAAA,CAAA,QAAA,CAAA,cAAA,CAAA,GAAA,CAAA,CAAA,CAAA,CAAiC,MAAA,CAAA,eAAA,CAAA,GAAA,CAAA,EAAA,qBAAA,CAAA,GAAA,CAAA,CAAA,CAAA,EAAA,2BAAA,CAAA,GAAA,CAAA,CAAA,CAAA,EAAA,gBAAA,EAA2H,CAE5J,QAAA,CAAA,gBAAA,EAAA,CAA6B,KAAA,IAAA,CAAA,SAAA,CAAA,2IAAA,CAAkK,CAE/L,QAAA,CAAA,qBAAA,CAAA,GAAA,CAAA,CAAA,CAAA,CAAwC,GAAA,MAAA,CAAA,MAAA,GAAA,WAAA,EAAA,EAAA,MAAA,CAAA,QAAA,GAAA,CAAA,MAAA,CAAA,GAAA,CAAA,CAAA,CAAA,OAAgF,GAAA,CAAA,IAAA,CAAA,EAAA,CAAe,GAAA,CAAA,EAAA,CAAA,IAAA,CAAe,GAAA,CAAA,EAAA,CAAA,KAAA,CAAgB,GAAA,CAAA,EAAA,CAAA,SAAA,CAAoB,GAAA,CAAM,IAAA,GAAA,CAAA,EAAA,CAAA,GAAA,CAAA,MAAA,CAAA,QAAA,CAAA,EAAA,CAAA,EAAA,CAA0C,EAAA,EAAA,CAAA,CAAA,EAAA,CAAA,EAAA,CAAA,IAAA,EAAA,EAAA,IAAA,CAA1C,CAAyE,EAAA,CAAA,IAAzE,CAAyE,CAAa,IAAA,CAAA,IAAA,CAAA,EAAA,CAAA,KAAA,EAAqB,GAAA,CAAA,EAAA,IAAA,CAAA,MAAA,GAAA,CAAA,CAAA,KAAqC,CAAE,CAAA,MAAA,GAAA,CAAA,CAAc,EAAA,CAAA,IAAA,CAAW,EAAA,CAAA,GAAY,CAA7L,OAA6L,CAAU,GAAA,CAAM,GAAA,CAAA,EAAA,EAAA,EAAA,CAAA,QAAA,CAAA,EAAA,IAAA,CAAA,EAAA,CAAA,QAAA,CAAA,EAAmD,CAAzD,OAAyD,CAAU,GAAA,EAAA,CAAA,KAAA,CAAA,EAAoB,CAAE,CAAA,MAAA,CAAA,IAAa,CAEve,QAAA,CAAA,eAAA,CAAA,GAAA,CAAA,CAA+B,GAAA,KAAA,CAAA,OAAA,CAAA,GAAA,CAAA,CAAA,MAAA,CAAA,GAAoC,CAEnE,QAAA,CAAA,kBAAA,CAAA,GAAA,CAAA,CAAkC,MAAA,CAAA,kBAAA,CAAA,GAAA,CAAA,EAAA,gBAAA,CAAA,GAAA,CAAA,EAAA,2BAAA,CAAA,GAAA,CAAA,EAAA,kBAAA,EAAqH,CAEvJ,QAAA,CAAA,kBAAA,EAAA,CAA+B,KAAA,IAAA,CAAA,SAAA,CAAA,sIAAA,CAA6J,CAE5L,QAAA,CAAA,2BAAA,CAAA,CAAA,CAAA,MAAA,CAAA,CAAiD,GAAA,CAAA,CAAA,CAAA,OAAgB,GAAA,MAAA,CAAA,CAAA,GAAA,QAAA,CAAA,MAAA,CAAA,iBAAA,CAAA,CAAA,CAAA,MAAA,CAAA,CAAgE,GAAA,CAAA,CAAA,CAAA,MAAA,CAAA,SAAA,CAAA,QAAA,CAAA,IAAA,CAAA,CAAA,EAAA,KAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAwD,GAAA,CAAA,GAAA,QAAA,EAAA,CAAA,CAAA,WAAA,CAAA,CAAA,CAAA,CAAA,CAAA,WAAA,CAAA,IAAA,CAA6D,GAAA,CAAA,GAAA,KAAA,EAAA,CAAA,GAAA,KAAA,CAAA,MAAA,CAAA,KAAA,CAAA,IAAA,CAAA,CAAA,CAAA,CAAsD,GAAA,CAAA,GAAA,WAAA,EAAA,2CAAA,IAAA,CAAA,CAAA,CAAA,CAAA,MAAA,CAAA,iBAAA,CAAA,CAAA,CAAA,MAAA,CAAkH,CAE9Z,QAAA,CAAA,gBAAA,CAAA,IAAA,CAAA,CAAiC,GAAA,MAAA,CAAA,MAAA,GAAA,WAAA,EAAA,MAAA,CAAA,QAAA,GAAA,CAAA,MAAA,CAAA,IAAA,CAAA,CAAA,MAAA,CAAA,KAAA,CAAA,IAAA,CAAA,IAAA,CAA+F,CAEhI,QAAA,CAAA,kBAAA,CAAA,GAAA,CAAA,CAAkC,GAAA,KAAA,CAAA,OAAA,CAAA,GAAA,CAAA,CAAA,MAAA,CAAA,iBAAA,CAAA,GAAA,CAAuD,CAEzF,QAAA,CAAA,iBAAA,CAAA,GAAA,CAAA,GAAA,CAAA,CAAsC,GAAA,GAAA,EAAA,IAAA,EAAA,GAAA,CAAA,GAAA,CAAA,MAAA,CAAA,GAAA,CAAA,GAAA,CAAA,MAAA,CAAuD,IAAA,GAAA,CAAA,CAAA,CAAA,CAAA,CAAA,IAAA,CAAA,GAAA,CAAA,KAAA,CAAA,GAAA,CAAA,CAAuC,CAAA,CAAA,GAAvC,CAAgD,CAAA,EAAhD,CAAgD,CAAO,IAAA,CAAA,CAAA,CAAA,CAAA,GAAA,CAAA,CAAA,CAAoB,CAAA,MAAA,CAAA,IAAa,CAErL,QAAA,CAAA,kBAAA,CAAA,GAAA,CAAA,OAAA,CAAA,MAAA,CAAA,KAAA,CAAA,MAAA,CAAA,GAAA,CAAA,GAAA,CAAA,CAA4E,GAAA,CAAM,GAAA,CAAA,IAAA,CAAA,GAAA,CAAA,GAAA,CAAA,CAAA,GAAA,CAAA,CAA0B,GAAA,CAAA,KAAA,CAAA,IAAA,CAAA,KAA0B,CAAA,MAAA,KAAA,CAAA,CAAgB,MAAA,CAAA,KAAA,CAAA,CAAe,MAAU,CAAA,GAAA,IAAA,CAAA,IAAA,CAAA,CAAiB,OAAA,CAAA,KAAA,CAAkB,CAAnC,IAAmC,CAAO,OAAA,CAAA,OAAA,CAAA,KAAA,EAAA,IAAA,CAAA,KAAA,CAAA,MAAA,CAA8C,CAAA,CAEvQ,QAAA,CAAA,iBAAA,CAAA,EAAA,CAAA,CAAgC,MAAA,WAAA,CAAqB,GAAA,CAAA,IAAA,CAAA,IAAA,CAAA,IAAA,CAAA,SAAA,CAAmC,MAAA,IAAA,CAAA,OAAA,CAAA,SAAA,OAAA,CAAA,MAAA,CAAA,CAAgD,GAAA,CAAA,GAAA,CAAA,EAAA,CAAA,KAAA,CAAA,IAAA,CAAA,IAAA,CAAA,CAAgC,QAAA,CAAA,KAAA,CAAA,KAAA,CAAA,CAAwB,kBAAA,CAAA,GAAA,CAAA,OAAA,CAAA,MAAA,CAAA,KAAA,CAAA,MAAA,CAAA,MAAA,CAAA,KAAA,CAA0E,CAAA,QAAA,CAAA,MAAA,CAAA,GAAA,CAAA,CAAuB,kBAAA,CAAA,GAAA,CAAA,OAAA,CAAA,MAAA,CAAA,KAAA,CAAA,MAAA,CAAA,OAAA,CAAA,GAAA,CAAyE,CAAA,KAAA,CAAA,SAAA,CAAoB,CAAtS,CAAwS,CAAG,CAcnY,GAAA,CAAA,UAAA,CAAA,uoGAAA,CACA,GAAA,CAAA,gBAAA,CAAA,WAAA,CACA,GAAA,CAAA,eAAA,CAAA,CAAA,CAEA,QAAA,CAAA,MAAA,CAAA,OAAA,CAAA,CACA,GAAA,CAAA,MAAA,CAAA,OAAA,CAAA,MAAA,CACA,eAAA,CAAA,OAAA,CAAA,eADA,CAEA,SAAA,CAAA,OAAA,CAAA,SAFA,CAGA,SAAA,CAAA,OAAA,CAAA,SAHA,CAIA,KAAA,CAAA,OAAA,CAAA,KAJA,CAKA,OAAA,CAAA,OAAA,CAAA,OALA,CAMA,GAAA,CAAA,OAAA,CAAA,GANA,CAOA,MAAA,CACA,IAAA,CAAA,KAAA,EAAA,QADA,CAEA,GAAA,CAAA,GAAA,EAAA,UAFA,CAGA,OAAA,CAAA,OAHA,CAIA,MAAA,CAAA,UAAA,CACA,GAAA,CAAA,OAAA,CAAA,iBAAA,CAAA,aAAA,kBAAA,CAAA,IAAA,CAAA,QAAA,CAAA,QAAA,CAAA,OAAA,CAAA,CACA,GAAA,CAAA,SAAA,CAAA,WAAA,CAAA,QAAA,CACA,MAAA,CAAA,kBAAA,CAAA,IAAA,CAAA,QAAA,CAAA,SAAA,CAAA,SAAA,CAAA,CACA,MAAA,CAAA,CAAA,CACA,OAAA,SAAA,CAAA,IAAA,CAAA,SAAA,CAAA,IAAA,EACA,IAAA,EAAA,CACA,SAAA,CAAA,OAAA,CAAA,SAAA,CAAA,WAAA,CAAA,OAAA,CAAA,WAAA,CACA,SAAA,CAAA,IAAA,CAAA,CAAA,CACA,MAAA,CAAA,cAAA,CAAA,CACA,MAAA,CAAA,MADA,CAEA,SAAA,CAAA,SAFA,CAGA,eAAA,CAAA,eAHA,CAIA,SAAA,CAAA,SAJA,CAKA,WAAA,CAAA,WALA,CAAA,CAAA,CAQA,IAAA,EAAA,CACA,QAAA,CAAA,SAAA,CAAA,IAAA,CACA,MAAA,CAAA,SAAA,CAAA,MAAA,CAAA,QAAA,CAAA,CACA,QAAA,CAAA,QADA,CAEA,YAAA,CACA,IAAA,CAAA,QADA,CAEA,OAAA,CAAA,QAAA,CAAA,MAFA,CAGA,UAAA,CAAA,QAAA,CAAA,UAHA,CAIA,OAAA,CAAA,CACA,GAAA,CAAA,UAAA,CACA,GAAA,CAAA,IAAA,CAAA,iBAAA,CAAA,aAAA,kBAAA,CAAA,IAAA,CAAA,QAAA,CAAA,OAAA,EAAA,CACA,MAAA,CAAA,kBAAA,CAAA,IAAA,CAAA,QAAA,CAAA,QAAA,CAAA,QAAA,CAAA,CACA,MAAA,CAAA,CAAA,CACA,OAAA,QAAA,CAAA,IAAA,CAAA,QAAA,CAAA,IAAA,EACA,IAAA,EAAA,CACA,MAAA,CAAA,QAAA,CAAA,MAAA,CAAA,QAAA,CAAA,QAAA,CAAA,iBAAA,EAAA,CAAA,CAEA,IAAA,EAAA,CACA,IAAA,KAAA,CACA,MAAA,CAAA,QAAA,CAAA,IAAA,EAAA,CANA,CAQA,CAC2B,CAX3B,CAW2B,OAX3B,CAYyB,CAbzB,CAAA,CAAA,CAeA,QAAA,CAAA,GAAA,EAAA,CACA,MAAA,CAAA,IAAA,CAAA,KAAA,CAAA,IAAA,CAAA,SAAA,CACA,CAEA,MAAA,CAAA,GACuB,CArBvB,EADA,CAJA,CA4BA,OAAA,CAAA,CACA,GAAA,CAAA,UAAA,CACA,GAAA,CAAA,KAAA,CAAA,iBAAA,CAAA,aAAA,kBAAA,CAAA,IAAA,CAAA,QAAA,CAAA,QAAA,EAAA,CACA,MAAA,CAAA,kBAAA,CAAA,IAAA,CAAA,QAAA,CAAA,SAAA,CAAA,SAAA,CAAA,CACA,MAAA,CAAA,CAAA,CACA,OAAA,SAAA,CAAA,IAAA,CAAA,SAAA,CAAA,IAAA,EACA,IAAA,EAAA,CACA,MAAA,CAAA,SAAA,CAAA,MAAA,CAAA,QAAA,CAAA,SAAA,CAAA,CAEA,IAAA,EAAA,CACA,IAAA,KAAA,CACA,MAAA,CAAA,SAAA,CAAA,IAAA,EAAA,CANA,CAQA,CAC2B,CAX3B,CAW2B,QAX3B,CAYyB,CAbzB,CAAA,CAAA,CAeA,QAAA,CAAA,GAAA,EAAA,CACA,MAAA,CAAA,KAAA,CAAA,KAAA,CAAA,IAAA,CAAA,SAAA,CACA,CAEA,MAAA,CAAA,GACuB,CArBvB,EADA,CA5BA,CAoDA,OAAA,CAAA,CACA,GAAA,CAAA,UAAA,CACA,GAAA,CAAA,KAAA,CAAA,iBAAA,CAAA,aAAA,kBAAA,CAAA,IAAA,CAAA,QAAA,CAAA,QAAA,EAAA,CACA,GAAA,CAAA,OAAA,CACA,MAAA,CAAA,kBAAA,CAAA,IAAA,CAAA,QAAA,CAAA,SAAA,CAAA,SAAA,CAAA,CACA,MAAA,CAAA,CAAA,CACA,OAAA,SAAA,CAAA,IAAA,CAAA,SAAA,CAAA,IAAA,EACA,IAAA,EAAA,CACA,OAAA,CAAA,QAAA,CAAA,iBAAA,EAAA,CACA,MAAA,CAAA,SAAA,CAAA,MAAA,CAAA,QAAA,CAAA,OAAA,EAAA,QAAA,CAAA,UAAA,CAAA,OAAA,CAAA,CAAA,CAEA,IAAA,EAAA,CACA,IAAA,KAAA,CACA,MAAA,CAAA,SAAA,CAAA,IAAA,EAAA,CAPA,CASA,CAC2B,CAZ3B,CAY2B,QAZ3B,CAayB,CAfzB,CAAA,CAAA,CAiBA,QAAA,CAAA,GAAA,EAAA,CACA,MAAA,CAAA,KAAA,CAAA,KAAA,CAAA,IAAA,CAAA,SAAA,CACA,CAEA,MAAA,CAAA,GACuB,CAvBvB,EADA,CApDA,CAFA,CAAA,CAAA,CAmFA,IAAA,EAAA,CACA,IAAA,KAAA,CACA,MAAA,CAAA,SAAA,CAAA,IAAA,EAAA,CAnGA,CAqGA,CACS,CAxGT,CAwGS,QAxGT,CAyGO,CA3GP,CAAA,CAAA,CA6GA,QAAA,CAAA,MAAA,CAAA,EAAA,CAAA,CACA,MAAA,CAAA,OAAA,CAAA,KAAA,CAAA,IAAA,CAAA,SAAA,CACA,CAEA,MAAA,CAAA,MACK,CAnHL,EAJA,CAwHA,IAAA,CAAA,UAxHA,CAyHA,OAAA,CAAA,IAzHA,CA0HA,MAAA,CAAA,IA1HA,CA2HA,YAAA,CAAA,CAAA,KAAA,CA3HA,CA4HA,SAAA,CAAA,SA5HA,CA8HA,CAEA,QAAA,CAAA,cAAA,CAAA,GAAA,CAAA,CACA,MAAA,CAAA,eAAA,CAAA,KAAA,CAAA,IAAA,CAAA,SAAA,CACA,CAEA,QAAA,CAAA,eAAA,EAAA,CACA,eAAA,CAAA,iBAAA,CAAA,aAAA,kBAAA,CAAA,IAAA,CAAA,QAAA,CAAA,SAAA,CAAA,OAAA,CAAA,CACA,GAAA,CAAA,SAAA,CAAA,MAAA,CAAA,eAAA,CAAA,SAAA,CAAA,WAAA,CAAA,KAAA,CAAA,aAAA,CAAA,OAAA,CAAA,UAAA,CAAA,OAAA,CAAA,QAAA,CAAA,SAAA,CAAA,GAAA,CAAA,UAAA,CAAA,OAAA,CAAA,QAAA,CAAA,YAAA,CAAA,MAAA,CAAA,SAAA,CAAA,iBAAA,CAAA,UAAA,CAAA,WAAA,CAAA,YAAA,CAAA,aAAA,CAAA,iBAAA,CAAA,eAAA,CAAA,gBAAA,CAAA,YAAA,CAAA,aAAA,CAAA,WAAA,CAAA,UAAA,CAAA,gBAAA,CAAA,iBAAA,CAEA,MAAA,CAAA,kBAAA,CAAA,IAAA,CAAA,QAAA,CAAA,UAAA,CAAA,UAAA,CAAA,CACA,MAAA,CAAA,CAAA,CACA,OAAA,UAAA,CAAA,IAAA,CAAA,UAAA,CAAA,IAAA,EACA,IAAA,EAAA,CACA,iBAAA,CAAA,QAAA,CAAA,iBAAA,EAAA,CACA,iBAAA,CAAA,iBAAA,CAAA,aAAA,kBAAA,CAAA,IAAA,CAAA,QAAA,CAAA,SAAA,CAAA,eAAA,CAAA,CACA,GAAA,CAAA,IAAA,CAAA,WAAA,CAAA,YAAA,CACA,MAAA,CAAA,kBAAA,CAAA,IAAA,CAAA,QAAA,CAAA,UAAA,CAAA,UAAA,CAAA,CACA,MAAA,CAAA,CAAA,CACA,OAAA,UAAA,CAAA,IAAA,CAAA,UAAA,CAAA,IAAA,EACA,IAAA,EAAA,CACA,IAAA,CAAA,kBAAA,CAAA,aAAA,CAAA,MAAA,EAAA,CAAA,CAAA,CAAA,CAAA,CACA,UAAA,CAAA,IAAA,CAAA,CAAA,CACA,WAAA,CAAA,GAA0C,CAAA,0CAAA,CAAA,aAAA,CAA1C,CAAqD,eAArD,CAAqD,CACrD,KAAA,CAAA,WAAA,CAAA,SAAA,CADqD,CAArD,CAAA,CAGA,WAAA,CAAA,GAAA,CAAA,CAAA,EAA6C,2CAAA,CAAA,CAAA,CAAM,MAAN,CAAM,IAAN,CAAM,CAAA,SAAA,CAAN,CAA7C,CAA6E;AAE7E,WAAA,CAAA,GAAA,CAAA,CAAA,EAA6C,2CAAA,CAAA,CAAA,CAAM,MAAN,CAAM,IAAN,CAAM,EAAN,CAA7C,CAAoE;AAEpE,WAAA,CAAA,GAAA,CAAA,CAAA,EAA6C,2CAAA,CAAA,CAAA,CAAM,MAAN,CAAM,IAAN,CAAM,EAAN,CAA7C,CAAoE;AAEpE,UAAA,CAAA,IAAA,CAAA,CAAA,CACA,MAAA,CAAA,GAAA,CAAA,eAAA,CAAA,IAAA,CAAA,WAAA,CAAA,SAAA,GAAA,QAAA,CAAA,KAAA,CAAA,CAAA,CAEA,IAAA,EAAA,CACA,YAAA,CAAA,UAAA,CAAA,IAAA,CACA,WAAA,CAAA,CAAA,CAAwC,2CAAA,CAAA,CAAA,CAAM,MAAN,CAAM,IAAN,CAAM,YAAA,CAAA,CAAN,CAAM,KAAN,CAAxC,CACA,WAAA,CAAA,CAAA,CAAwC,2CAAA,CAAA,CAAA,CAAM,MAAN,CAAM,IAAN,CAAM,YAAA,CAAA,CAAN,CAAM,KAAN,CAAxC,CACA,WAAA,CAAA,CAAA,CAAwC,2CAAA,CAAA,CAAA,CAAM,MAAN,CAAM,IAAN,CAAM,YAAA,CAAA,CAAN,CAAM,KAAN,CAAxC,CACA,MAAA,CAAA,UAAA,CAAA,MAAA,CAAA,QAAA,CAAA,KAAA,MAAA,CAAA,WAAA,CAAA,SAAA,GAAA,QAAA,CAAA,KAAA,CAAA,CAAA,CAAA,CAEA,IAAA,GAAA,CACA,UAAA,CAAA,IAAA,CAAA,EAAA,CACA,UAAA,CAAA,EAAA,CAAA,UAAA,CAAA,OAAA,CAAA,CAAA,CAAA,CAAA,CACA,KAAA,CAAA,UAAA,CAAA,EAAA,CAEA,IAAA,GAAA,CACA,UAAA,CAAA,IAAA,CAAA,EAAA,CACA,SAAA,CAAA,KAAA,GACA,MAAA,CAAA,UAAA,CAAA,MAAA,CAAA,EAAA,CAAA,CAEA,IAAA,GAAA,CACA,IAAA,KAAA,CACA,MAAA,CAAA,UAAA,CAAA,IAAA,EAAA,CAnCA,CAqCA,CACiB,CAxCjB,CAwCiB,SAxCjB,CAwCiB,IAxCjB,CAwCiB,CAAA,CAAA,CAAA,CAAA,EAAA,CAAA,EAAA,CAAA,EAAA,CAAA,CAxCjB,CAyCe,CA3Cf,CAAA,CAAA,CA4CA,MAAA,CAAA,iBAAA,CAAA,KAAA,CAAA,IAAA,CAAA,SAAA,CACA,CA9CA,CAgDA,gBAAA,CAAA,QAAA,CAAA,iBAAA,CAAA,GAAA,CAAA,CACA,MAAA,CAAA,iBAAA,CAAA,KAAA,CAAA,IAAA,CAAA,SAAA,CACA,CAFA,CAIA,UAAA,CAAA,QAAA,CAAA,WAAA,CAAA,OAAA,CAAA,CACA,MAAA,IAAA,CAAA,OAAA,CAAA,SAAA,OAAA,CAAA,MAAA,CAAA,CACA,QAAA,CAAA,SAAA,CAAA,CACA,OAAA,CAAA,KADA,CAEA,MAAA,CAAA,gBAFA,CAGA,MAAA,CAAA,CAAA,OAAA,CAAA,QAAA,CAHA,CAIA,EAAA,CAAA,EAJA,CAAA,CAKiB,SAAA,CAAA,CAAA,GAAA,CAAA,CACjB,CAAA,EAAA,MAAA,CAAA,CAAA,CAAA,CACA,GAAA,CAAA,MAAA,CAAA,GAAA,EAAA,GAAA,CAAA,MAAA,CAEA,GAAA,MAAA,EAAA,IAAA,CAAA,CACA,OAAA,CAAA,GAAA,CAAA,SAAA,CAAA,MAAA,EAAA,QAAA,CAAA,EAAA,CAAA,CACmB,CAFnB,IAEmB,CACnB,OAAA,CAAA,IAAA,CACA,CACiB,CAdjB,CAee,CAhBf,CAiBA,CAlBA,CAoBA,WAAA,CAAA,QAAA,CAAA,YAAA,CAAA,SAAA,CAAA,CACA,MAAA,CAAA,OAAA,CAAA,GAAA,CAAA,SAAA,CAAA,GAAA,CAAA,SAAA,OAAA,CAAA,CACA,MAAA,IAAA,CAAA,OAAA,CAAA,aAAA,UAAA,CACA,GAAA,CAAA,KAAA,CAAA,iBAAA,CAAA,aAAA,kBAAA,CAAA,IAAA,CAAA,QAAA,CAAA,QAAA,CAAA,OAAA,CAAA,CACA,GAAA,CAAA,OAAA,CACA,MAAA,CAAA,kBAAA,CAAA,IAAA,CAAA,QAAA,CAAA,SAAA,CAAA,SAAA,CAAA,CACA,MAAA,CAAA,CAAA,CACA,OAAA,SAAA,CAAA,IAAA,CAAA,SAAA,CAAA,IAAA,EACA,IAAA,EAAA,CACA,SAAA,CAAA,IAAA,CAAA,CAAA,CACA,MAAA,CAAA,UAAA,CAAA,OAAA,CAAA,CAEA,IAAA,EAAA,CACA,OAAA,CAAA,SAAA,CAAA,IAAA,CACA,OAAA,CAAA,CACA,OAAA,CAAA,OADA,CAEA,OAAA,CAAA,OAFA,CAAA,CAAA,CAKA,IAAA,EAAA,CACA,IAAA,KAAA,CACA,MAAA,CAAA,SAAA,CAAA,IAAA,EAAA,CAdA,CAgBA,CACqB,CAnBrB,CAmBqB,QAnBrB,CAoBmB,CAtBnB,CAAA,CAAA,CAwBA,MAAA,UAAA,GAAA,CAAA,CACA,MAAA,CAAA,KAAA,CAAA,KAAA,CAAA,IAAA,CAAA,SAAA,CACA,CACiB,CA5BjB,EAAA,CA6Be,CA9Bf,CAAA,CA+BA,CAhCA,CAkCA,aAAA,CAAA,QAAA,CAAA,aAAA,EAAA,CACA,aAAA,CAAA,iBAAA,CAAA,aAAA,kBAAA,CAAA,IAAA,CAAA,QAAA,CAAA,SAAA,CAAA,OAAA,CAAA,CACA,GAAA,CAAA,eAAA,CAAA,KAAA,CAAA,CAAA,CAAA,GAAA,CAAA,MAAA,CAAA,IAAA,CAAA,GAAA,CAAA,WAAA,CAEA,MAAA,CAAA,kBAAA,CAAA,IAAA,CAAA,QAAA,CAAA,UAAA,CAAA,UAAA,CAAA,CACA,MAAA,CAAA,CAAA,CACA,OAAA,UAAA,CAAA,IAAA,CAAA,UAAA,CAAA,IAAA,EACA,IAAA,EAAA,CACA,GAAA,OAAA,CAAA,CACA,UAAA,CAAA,IAAA,CAAA,CAAA,CACA,KACA,CAEA,MAAA,CAAA,UAAA,CAAA,MAAA,CAAA,QAAA,CAAA,EAAA,CAAA,CAEA,IAAA,EAAA,CACA,GAAA,EAAA,aAAA,CAAA,IAAA,CAAA,CAAA,EAAA,CAAA,OAAA,CAAA,CAAA,CACA,UAAA,CAAA,IAAA,CAAA,CAAA,CACA,KACA,CAEA,MAAA,CAAA,UAAA,CAAA,MAAA,CAAA,QAAA,CAAA,SAAA,EAAA,CAAA,CAEA,IAAA,EAAA,CACA,GAAA,KAAA,GAAA,EAAA,CAAA,CACA,KAAA,CAAA,gBACA,CAEA,GAAA,EAAA,KAAA,GAAA,gBAAA,CAAA,CAAA,CACA,UAAA,CAAA,IAAA,CAAA,EAAA,CACA,KACA,CAEA,eAAA,CAAA,aAAA,CAAA,IAAA,CACA,KAAA,CAAA,EAAA,CAEA,IAAA,CAAA,CAAA,eAAA,CAAiD,CAAA,CAAA,eAAA,CAAA,eAAjD,CAAwF,CAAA,EAAxF,CAAwF,CACxF,KAAA,CAAA,IAAA,CAAA,GAAA,MAAA,CAAA,gBAAA,CAAA,GAAA,EAAA,MAAA,CAAA,CAAA,CAAA,OAAA,CAAA,CACA,CAEA,GAAA,CAAA,CAAA,CAAA,MAAA,CAAA,KAAA,CAEA,IAAA,GAAA,CACA,GAAA,EAAA,GAAA,CAAA,MAAA,CAAA,MAAA,CAAA,CAAA,CACA,UAAA,CAAA,IAAA,CAAA,EAAA,CACA,KACA,CAEA,IAAA,CAAA,MAAA,CAAA,GAAA,CAAA,CACA,UAAA,CAAA,IAAA,CAAA,EAAA,CACA,MAAA,CAAA,GAAA,CAAA,UAAA,CAAA,IAAA,CAAA,CAEA,IAAA,GAAA,CACA,GAAA,CAAA,UAAA,CAAA,IAAA,CACA,aAAA,CAAA,GAAA,CAAA,GAAA,CAAA,OAAA,CAAA,IAAA,EAEA,IAAA,GAAA,CACA,GAAA,GACA,UAAA,CAAA,IAAA,CAAA,EAAA,CACA,MAEA,IAAA,GAAA,CACA,UAAA,CAAA,IAAA,CAAA,EAAA,CACA,MAEA,IAAA,GAAA,CACA,GAAA,OAAA,CAAA,CACA,UAAA,CAAA,IAAA,CAAA,EAAA,CACA,KACA,CAEA,UAAA,CAAA,IAAA,CAAA,EAAA,CACA,UAAA,CAAA,IAAA,CAAA,EAAA,CACA,MAAA,CAAA,YAAA,EAAA,CAEA,IAAA,GAAA,CACA,OAAA,CAAA,UAAA,CAAA,IAAA,CACA,UAAA,CAAA,IAAA,CAAA,EAAA,CACA,MAEA,IAAA,GAAA,CACA,UAAA,CAAA,IAAA,CAAA,EAAA,CACA,UAAA,CAAA,EAAA,CAAA,UAAA,CAAA,OAAA,CAAA,CAAA,EAAA,CAAA,CACA,KAAA,CAAA,UAAA,CAAA,EAAA,CAEA,IAAA,GAAA,CACA,WAAA,CAAsC,MAAA,CAAA,mDAAA,CAAA,GAAA,CAAA,CAAA,CAAiB,OAAjB,CAAiB,aAAA,CAAA,IAAjB,CAAtC,CACA,WAAA,CAAA,OAAA,CAAA,SAAA,KAAA,CAAA,CACA,GAAA,CAAA,KAAA,CAAA,KAAA,CAAA,KAAA,CACA,OAAA,CAAA,KAAA,CAAA,OADA,CAEA,aAAA,CAAA,GAAA,CAAA,OAAA,CAAA,KAAA,CACyB,CAJzB,EAMA,IAAA,GAAA,CACA,MAAA,CAAA,UAAA,CAAA,MAAA,CAAA,QAAA,CAAA,SAAA,EAAA,CAAA,CAEA,IAAA,GAAA,CACA,IAAA,KAAA,CACA,MAAA,CAAA,UAAA,CAAA,IAAA,EAAA,CA5FA,CA8FA,CACiB,CAjGjB,CAiGiB,SAjGjB,CAiGiB,IAjGjB,CAiGiB,CAAA,CAAA,EAAA,CAAA,EAAA,CAAA,CAjGjB,CAkGe,CArGf,CAAA,CAAA,CAsGA,MAAA,CAAA,aAAA,CAAA,KAAA,CAAA,IAAA,CAAA,SAAA,CACA,CAxGA,CA0GA,YAAA,CAAA,QAAA,CAAA,aAAA,CAAA,GAAA,CAAA,CACA,MAAA,CAAA,aAAA,CAAA,KAAA,CAAA,IAAA,CAAA,SAAA,CACA,CAFA,CAIA,gBAAA,CAAA,QAAA,CAAA,iBAAA,EAAA,CACA,gBAAA,CAAA,iBAAA,CAAA,aAAA,kBAAA,CAAA,IAAA,CAAA,QAAA,CAAA,QAAA,EAAA,CACA,GAAA,CAAA,QAAA,CACA,MAAA,CAAA,kBAAA,CAAA,IAAA,CAAA,QAAA,CAAA,SAAA,CAAA,SAAA,CAAA,CACA,MAAA,CAAA,CAAA,CACA,OAAA,SAAA,CAAA,IAAA,CAAA,SAAA,CAAA,IAAA,EACA,IAAA,EAAA,CACA,SAAA,CAAA,IAAA,CAAA,CAAA,CACA,MAAA,CAAA,YAAA,CAAA,IAAA,CAAA,CAEA,IAAA,EAAA,CACA,QAAA,CAAA,SAAA,CAAA,IAAA,CACA,MAAA,CAAA,SAAA,CAAA,MAAA,CAAA,QAAA,CAAA,QAAA,EAAA,WAAA,CAAA,QAAA,CAAA,CAAA,CAEA,IAAA,EAAA,CACA,IAAA,KAAA,CACA,MAAA,CAAA,SAAA,CAAA,IAAA,EAAA,CAXA,CAaA,CACiB,CAhBjB,CAgBiB,QAhBjB,CAiBe,CAnBf,CAAA,CAAA,CAoBA,MAAA,CAAA,gBAAA,CAAA,KAAA,CAAA,IAAA,CAAA,SAAA,CACA,CAtBA,CAwBA,eAAA,CAAA,QAAA,CAAA,iBAAA,EAAA,CACA,MAAA,CAAA,gBAAA,CAAA,KAAA,CAAA,IAAA,CAAA,SAAA,CACA,CAFA,CAIA,iBAAA,CAAA,QAAA,CAAA,kBAAA,EAAA,CACA,MAAA,CAAA,OAAA,CAAA,SAAA,GAAA,CAAA,CAAA,CAAA,SACA,CAFA,CAIA,aAAA,CAAA,QAAA,CAAA,cAAA,EAAA,CACA,aAAA,CAAA,iBAAA,CAAA,aAAA,kBAAA,CAAA,IAAA,CAAA,QAAA,CAAA,QAAA,EAAA,CACA,GAAA,CAAA,MAAA,CAAA,SAAA,CAAA,SAAA,CACA,MAAA,CAAA,kBAAA,CAAA,IAAA,CAAA,QAAA,CAAA,SAAA,CAAA,SAAA,CAAA,CACA,MAAA,CAAA,CAAA,CACA,OAAA,SAAA,CAAA,IAAA,CAAA,SAAA,CAAA,IAAA,EACA,IAAA,EAAA,CACA,GAAA,KAAA,CAAA,CACA,SAAA,CAAA,IAAA,CAAA,CAAA,CACA,KACA,CAEA,KAAA,IAAA,CAAA,KAAA,CAAA,mDAAA,CAAA,CAEA,IAAA,EAAA,CACA,SAAA,CAAA,IAAA,CAAA,CAAA,CACA,SAAA,CAAA,IAAA,CAAA,CAAA,CACA,MAAA,CAAA,GAAA,CAAA,UAAA,CAAA,KAAA,CAAA,KAAA,CAAA,IAAA,CAAA,CAEA,IAAA,EAAA,CACA,MAAA,CAAA,SAAA,CAAA,IAAA,CACA,SAAA,CAAA,MAAA,CAAA,SAAA,CAAA,SAAA,CAAA,MAAA,CAAA,SAAA,CACA,OAAA,CAAA,CACA,SAAA,CAAA,SADA,CAEA,SAAA,CAAA,SAFA,CAGA,IAAA,CAAA,KAHA,CAAA,CAKA,MAAA,CAAA,SAAA,CAAA,MAAA,CAAA,QAAA,CAAA,OAAA,CAAA,CAEA,IAAA,GAAA,CACA,SAAA,CAAA,IAAA,CAAA,EAAA,CACA,SAAA,CAAA,EAAA,CAAA,SAAA,CAAA,OAAA,CAAA,CAAA,CAAA,CAAA,CACA,KAAA,IAAA,CAAA,KAAA,CAAA,qDAAA,CAAA,CAEA,IAAA,GAAA,CACA,IAAA,KAAA,CACA,MAAA,CAAA,SAAA,CAAA,IAAA,EAAA,CA/BA,CAiCA,CACiB,CApCjB,CAoCiB,QApCjB,CAoCiB,IApCjB,CAoCiB,CAAA,CAAA,CAAA,CAAA,EAAA,CAAA,CApCjB,CAqCe,CAvCf,CAAA,CAAA,CAwCA,MAAA,CAAA,aAAA,CAAA,KAAA,CAAA,IAAA,CAAA,SAAA,CACA,CA1CA,CA4CA,YAAA,CAAA,QAAA,CAAA,cAAA,EAAA,CACA,MAAA,CAAA,aAAA,CAAA,KAAA,CAAA,IAAA,CAAA,SAAA,CACA,CAFA,CAIA,WAAA,CAAA,QAAA,CAAA,YAAA,EAAA,CACA,WAAA,CAAA,iBAAA,CAAA,aAAA,kBAAA,CAAA,IAAA,CAAA,QAAA,CAAA,QAAA,CAAA,IAAA,CAAA,CACA,GAAA,CAAA,MAAA,CACA,MAAA,CAAA,khBA,CAkBA,CACiB,CArBjB,CAqBiB,QArBjB,CAqBiB,IArBjB,CAqBiB,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CArBjB,CAsBe,CAxBf,CAAA,CAAA,CAyBA,MAAA,CAAA,WAAA,CAAA,KAAA,CAAA,IAAA,CAAA,SAAA,CACA,CA3BA,CA6BA,UAAA,CAAA,QAAA,CAAA,YAAA,CAAA,GAAA,CAAA,CACA,MAAA,CAAA,WAAA,CAAA,KAAA,CAAA,IAAA,CAAA,SAAA,CACA,CAFA,CAIA,iBAAA,CAAA,QAAA,CAAA,kBAAA,CAAA,OAAA,CAAA,CACA;AACA,GAAA,CAAA,QAAA,CAAA,kBAAA,CAAA,aAAA,CAAA,OAAA,EAAA,CAAA,CAEA,GAAA,CAAA,YAAA,CAAA,QAAA,CAAA,SAAA,CAAA,SAAA,IAAA,CAAA,CACA,GAAA,CAAA,KAAA,CAAA,cAAA,CAAA,IAAA,CAAA,CAAA,CAAA,CACA,cAAA,CAAA,KAAA,CAAA,CAAA,CADA,CAGA,MAAA,CAAA,cAAA,GAAA,OACe,CALf,CAAA,CAKiB;AAEjB,QAAA,CAAA,OAAA,CAAA,QAAA,CAAA,MAAA,CAAA,YAAA,CAAA,CAAA,EAAA,CAAA,CAAA,EAAoE;AAEpE,aAAA,CAAA,GAAA,CAAA,GAAA,CAAA,QAAA,CACA,CAdA,CAgBA,SAAA,CAAA,QAAA,CAAA,UAAA,EAAA,CACA,MAAA,CAAA,KAAA,CAAA,IAAA,CAAA,aAAA,CAAA,IAAA,EAAA,CACA,CAFA,CAIA,MAAA,CAAA,QAAA,CAAA,OAAA,EAAA,CACA,OAAA,CAAA,IAAA,CACA,MAAA,CAAA,YAAA,EACA,CAHA,CAKA,YAAA,CAAA,QAAA,CAAA,aAAA,EAAA,CACA,MAAA,CAAA,UACA,CAFA,CAIA,QAAA,CAAA,QAAA,CAAA,SAAA,EAAA,CACA,QAAA,CAAA,iBAAA,CAAA,aAAA,kBAAA,CAAA,IAAA,CAAA,QAAA,CAAA,QAAA,CAAA,IAAA,CAAA,MAAA,CAAA,CACA,GAAA,CAAA,OAAA,CACA,MAAA,CAAA,kBAAA,CAAA,IAAA,CAAA,QAAA,CAAA,SAAA,CAAA,SAAA,CAAA,CACA,MAAA,CAAA,CAAA,CACA,OAAA,SAAA,CAAA,IAAA,CAAA,SAAA,CAAA,IAAA,EACA,IAAA,EAAA,CACA,GAA4B,MAAA,CAAA,mDAAA,CAAA,GAAA,CAAA,CAAA,CAAW,IAAX,CAA5B,CAAuC,CACvC,SAAA,CAAA,IAAA,CAAA,CAAA,CACA,KACA,CAEA,MAAA,CAAA,SAAA,CAAA,MAAA,CAAA,QAAA,CAAA,KAAA,CAAA,CAEA,IAAA,EAAA,CACA,GAAA,IAAA,GAAA,KAAA,CAAA,CACA;AACA,aAAA,CAAA,GAAA,CAAA,GACA,CAEA,GAAA,CAAA,MAAA,CAAA,CACA,SAAA,CAAA,IAAA,CAAA,EAAA,CACA,KACA,CAEA,SAAA,CAAA,IAAA,CAAA,CAAA,CACA,MAAA,CAAA,UAAA,CAAA,IAAA,CAAA,CAEA,IAAA,EAAA,CACA,OAAA,CAAA,SAAA,CAAA,IAAA,CACA,aAAA,CAAA,GAAA,CAAA,OAAA,CAAA,IAAA,EACA,UAAA,CAAA,IAAA,CACA,MAAA,CAAA,SAAA,CAAA,MAAA,CAAA,QAAA,CAAA,IAAA,CAAA,CAEA,IAAA,GAAA,CACA,UAAA,CAAA,KAAA,CACA,KAAA,CAAA,IAAA,CACA,MAAA,CAAA,SAAA,CAAA,MAAA,CAAA,QAAA,CAAA,IAAA,CAAA,CAEA,IAAA,GAAA,CACA,IAAA,KAAA,CACA,MAAA,CAAA,SAAA,CAAA,IAAA,EAAA,CApCA,CAsCA,CACiB,CAzCjB,CAyCiB,QAzCjB,CA0Ce,CA5Cf,CAAA,CAAA,CA6CA,MAAA,CAAA,QAAA,CAAA,KAAA,CAAA,IAAA,CAAA,SAAA,CACA,CA/CA,CAiDA,OAAA,CAAA,QAAA,CAAA,SAAA,CAAA,GAAA,CAAA,GAAA,CAAA,CACA,MAAA,CAAA,QAAA,CAAA,KAAA,CAAA,IAAA,CAAA,SAAA,CACA,CAFA,CAIA,UAAA,CAAA,QAAA,CAAA,WAAA,EAAA,CACA,SAAA,CAAA,KAAA,GACA,KAAA,CAAA,EAAA,CACA,aAAA,CAAA,GAAA,CAAA,GAAA,CACA,OAAA,CAAA,KAAA,CACA,QAAA,CAAA,IAAA,EACA,CANA,CAQA,SAAA,CAAA,OAAA,CAAA,SAAA,CAAA,MAAA,CAAA,OAAA,CAAA,MAAA,CAAA,eAAA,CAAA,OAAA,CAAA,eAAA,CAAA,SAAA,CAAA,OAAA,CAAA,SAAA,CAAA,WAAA,CAAA,OAAA,CAAA,WAAA,CACA,KAAA,CAAA,EAAA,CACA,aAAA,CAAA,GAAA,CAAA,GAAA,CACA,OAAA,CAAA,KAAA,CACA,UAAA,CAAA,KAAA,CACA,QAAA,CAAuB,MAAA,CAAA,mDAAA,CAAA,GAAA,CAAA,CAAA,CAAc,CACrC,WAAA,CAAA,QAAA,CAAA,WAAA,CAAA,QAAA,CAAA,CACA,YAAA,GAAA,IAAA,CAAA,SAAA,GAAA,CAAA,CACA,MAAA,CAAA,QAAA,CAAA,IAAA,CAAA,GAAA,CACiB,CAFjB,EAEiB,OAFjB,EAEiB,SAAA,GAAA,CAAA,CACjB,MAAA,CAAA,QAAA,CAAA,GAAA,CAAA,IAAA,CACiB,CAJjB,CAKe,CAPsB,CAQrC,eAAA,CAAA,QAAA,CAAA,eAAA,CAAA,eAAA,CAAA,QAAA,CAAA,CACA,gBAAA,CAAA,eAAA,CAAA,CAAA,IAAA,CAAA,SAAA,GAAA,CAAA,CACA,MAAA,CAAA,QAAA,CAAA,IAAA,CAAA,GAAA,CACiB,CAFjB,EAEiB,OAFjB,EAEiB,SAAA,GAAA,CAAA,CACjB,MAAA,CAAA,QAAA,CAAA,GAAA,CAAA,IAAA,CACiB,CAJjB,CAKe,CAdsB,CAerC,MAAA,CAAA,MAfqC,CAAd,CAAvB,CAiBA,QAAA,CAAA,OAAA,CAAA,OAAA,CACA,QAAA,CAAA,KAAA,CAAA,KAAA,CACA,QAAA,CAAA,MAAA,CAAA,MAAA,CACA,QAAA,CAAA,iBAAA,CAAA,iBAAA,CACA,QAAA,CAAA,iBAAA,CAAA,iBAAA,CACA,QAAA,CAAA,WAAA,CAAA,YAAA,CACA,QAAA,CAAA,eAAA,CAAA,eAAA,CACA,QAAA,CAAA,UAAA,CAAA,UAAA,CACA,QAAA,CAAA,WAAA,CAAA,WAAA,CACA,QAAA,CAAA,IAAA,CAAA,QAAA,CAAA,SAAA,CACA,QAAA,CAAA,UAAA,CAAA,UAAA,CACA,QAAA,CAAA,YAAA,CAAA,YAAA,CACA,UAAA,CAAA,IAAA,CAAA,EAAA,CAEA,GAAA,CAAA,eAAA,CAAA,CACA,UAAA,CAAA,IAAA,CAAA,EAAA,CACA,KACA,CAEA,UAAA,CAAA,IAAA,CAAA,EAAA,CACA,MAAA,CAAA,eAAA,CAAA,MAAA,EAAA,CAEA,IAAA,GAAA,CACA,UAAA,CAAA,EAAA,CAAA,UAAA,CAAA,IAAA,CACA,UAAA,CAAA,IAAA,CAAA,EAAA,CACA,MAEA,IAAA,GAAA,CACA,UAAA,CAAA,IAAA,CAAA,EAAA,CACA,MAAmB,CAAA,wDAAA,CAAA,SAAA,CAAA,CAAY,MAAZ,EAAnB,CAEA,IAAA,GAAA,CACA,UAAA,CAAA,EAAA,CAAA,UAAA,CAAA,IAAA,CAEA,IAAA,GAAA,CACA,SAAA,CAAA,UAAA,CAAA,EAAA,CACA,GAAA,CAAA,GAAsB,CAAA,kDAAA,CAAA,SAAA,CAAtB,CAAyB,SAAzB,CAAA,CACA,UAAA,CAAA,IAAA,CAAA,EAAA,CACA,MAEA,IAAA,GAAA,CACA,UAAA,CAAA,IAAA,CAAA,EAAA,CACA,UAAA,CAAA,EAAA,CAAA,UAAA,CAAA,OAAA,CAAA,CAAA,EAAA,CAAA,CACA,KAAA,IAAA,CAAA,KAAA,CAAA,mCAAA,CAAA,CAEA,IAAA,GAAA,CACA,MAAA,CAAA,UAAA,CAAA,MAAA,CAAA,QAAA,CAAA,QAAA,CAAA,CAEA,IAAA,GAAA,CACA,IAAA,KAAA,CACA,MAAA,CAAA,UAAA,CAAA,IAAA,EAAA,CA7eA,CA+eA,CACK,CAlfL,CAkfK,SAlfL,CAkfK,IAlfL,CAkfK,CAAA,CAAA,EAAA,CAAA,EAAA,CAAA,CAlfL,CAmfG,CAtfH,CAAA,CAAA,CAufA,MAAA,CAAA,eAAA,CAAA,KAAA,CAAA,IAAA,CAAA,SAAA,CACA,CAEe,4BAAA,mBAAA,CAAA,SAAA,CAAA,CAAA,MAAA,C;;oKC9qBf,MAAA,CAAA,OAAA,CAAiB,mBAAO,CAAE,oBAAA,uCAAF,CAAxB,C;;2LCDA;AACA;AACA;AACA;AACA;AAEA;;IAMA;;GAGA,GAAA,CAAA,GAAA,CAAA,GAAA,EAAA,EAAA,CAEA,MAAA,CAAA,OAAA,CAAA,GAAA,CAAqB;AAErB;;;;GAKA,GAAA,CAAA,YAAA,CAAA,kCAAA,CAEA;;;;GAKA,GAAA,CAAA,YAAA,CAAA,CACA,uBAAA,sBADA,CAEA,mBAAA,kBAFA,CAGA,wBAAA,uBAHA,CAIA,oBAAA,mBAJA,CAAA,CAOA;;;;GAKA,GAAA,CAAA,UAAA,CAAA,CACA,KAAA,CADA,CAEA,cAAA,CAFA,CAGA,cAAA,CAHA,CAIA,4BAAA,CAJA,CAKA,oBAAA,CALA,CAMA,UAAA,CANA,CAAA,CASA;;;;;;;;;GAUA,GAAA,CAAA,OAAA,CAEA;;;;;;;GAQA,GAAA,CAAA,QAAA,CAEA;;;;;;GAOA,GAAA,CAAA,KAAA,CAEA;;;;;;;;GASA,GAAA,CAAA,WAAA,CAEA;;;;;;;GAQA,GAAA,CAAA,YAAA,CAEA;;;;;;;GAQA,GAAA,CAAA,eAAA,CAEA;;;;;;GAOA,GAAA,CAAA,gBAAA,CAGA;AAEA;;GAGA,GAAA,CAAA,UAAA,CAAA,UAAA,CACA,GAAA,GAAA,CAAA,KAAA,EAAA,GAAA,CAAA,KAAA,CAAA,KAAA,CAAA,CACA,GAAA,CAAA,KAAA,CAAA,KAAA,CAAA,UAAA,GACA,GAAA,CAAA,KAAA,CAAA,IACA,CACA,CALA,CAOA;;;;GAKA,GAAA,CAAA,cAAA,CAAA,SAAA,QAAA,CAAA,CACA,GAAA,MAAA,CAAA,MAAA,EAAA,WAAA,EAAA,MAAA,CAAA,OAAA,CAAA,CACA;AACA;AACA;AACA,GAAA,CAAA,GAAA,CAAA,CACA,IAAA,CAAA,GAAA,CAAA,YAAA,CAAA,gBADA,CAEA,YAAA,CAAA,EAFA,CAAA,CAIA,MAAA,CAAA,OAAA,CAAA,WAAA,CAAA,GAAA,CAAA,YAAA,CAAA,GAAA,CAAA,UAAA,CACA,GAAA,CAAA,MAAA,CAAA,OAAA,CAAA,SAAA,CAAA,CACA;AACA;AACA,GAAA,CAAA,qBAAA,CAAA,QAAA,CACO,CAJP,IAIO,CACP;AACA;AACA,GAAA,CAAA,cAAA,CAAA,QAAA,CACA,CACK,CAVL,CAWG,CAnBH,IAmBG,CACH;AACA;AACA,GAAA,CAAA,cAAA,CAAA,QAAA,CACA,CACA,CAzBA,CA2BA;;;;GAKA,GAAA,CAAA,qBAAA,CAAA,SAAA,QAAA,CAAA,CACA,GAAA,CAAA,IAAA,CAAA,MAAA,CAAA,OAAA,CAAA,OAAA,CAAA,GAAA,CAAA,YAAA,CACA,CAAK,sBAAA,IAAL,CADA,CAAA,CAEA,UAAA,CAAA,UAAA,CACA,QAAA,CAAA,IAAA,CAAA,GAAA,CAAA,GAAA,CAAA,yBAAA,CAAA,IAAA,CAAA,CACG,CAFH,CAEG,CAFH,CAGA,CANA,CAQA;;;;;GAMA,GAAA,CAAA,yBAAA,CAAA,SAAA,IAAA,CAAA,CACA,KAAA,KAAA,CAAA,IACA,CAFA,CAIA;;;GAIA,GAAA,CAAA,yBAAA,CAAA,SAAA,CAAA,WAAA,CAAA,SAAA,OAAA,CAAA,CACA,KAAA,KAAA,CAAA,WAAA,CAAA,OAAA,CACA,CAFA,CAIA;;;;;GAMA,GAAA,CAAA,yBAAA,CAAA,SAAA,CAAA,gBAAA,CACA,SAAA,SAAA,CAAA,OAAA,CAAA,CACA,GAAA,CAAA,IAAA,CAAA,SAAA,CAAA,WAAA,EAAA,CACA,GAAA,IAAA,EAAA,SAAA,EAAA,IAAA,EAAA,WAAA,CAAA,CACA,KAAA,KAAA,CAAA,SAAA,CAAA,WAAA,CAAA,SAAA,OAAA,CAAA,CACA;AACA,OAAA,CAAA,CAAe,OAAA,OAAf,CAAA,CACK,CAHL,CAIG,CALH,IAKG,CACH,OAAA,CAAA,KAAA,CAAA,kDAAA,CACA,CACA,CAXA,CAaA;;;;GAKA,GAAA,CAAA,cAAA,CAAA,SAAA,QAAA,CAAA,CACA;AACA,GAAA,CAAA,YAAA,CAAA,sBAAA,GAAA,CAAA,YAAA,CACA,GAAA,CAAA,MAAA,CAAA,QAAA,CAAA,aAAA,CAAA,QAAA,CAAA,CACA,MAAA,CAAA,GAAA,CAAA,YAAA,CAAA,iBAAA,CACA,MAAA,CAAA,YAAA,CAAA,OAAA,CAAA,cAAA,EACA,QAAA,CAAA,IAAA,CAAA,WAAA,CAAA,MAAA,EAEA,GAAA,CAAA,aAAA,CAAA,KAAA,CAEA,GAAA,CAAA,OAAA,CAAA,GAAA,CAAA,cAAA,CACA,GAAA,CAAA,KAAA,CAAA,QAAA,CAAA,KAAA,CAAA,OAAA,CAAA,CACA,GAAA,OAAA,CAAA,IAAA,EAAA,OAAA,CAAA,CACA,OAAA,CAAA,KAAA,CAAA,mBAAA,CAAA,SAAA,CAAA,KAAA,EACA,GAAA,CAAA,aAAA,CACA,CACA,aAAA,CAAA,IAAA,CACA,QAAA,CAAA,IAAA,CAAA,OAAA,CAAA,KAAA,CACA,CACK,CAPL,IAOK,CACL,OAAA,CAAA,KAAA,CAAA,8CAAA,CACA,CACA,CAXA,CAYA,OAAA,CAAA,KAAA,CAAA,gBAAA,CAAA,SAAA,CAAA,KAAA,EACA,OAAA,CAAA,KAAA,CAAA,KAAA,GAEA,MAAA,CAAA,gBAAA,CAAA,MAAA,CAAA,UAAA,CACA;AACA,MAAA,CAAA,aAAA,CAAA,WAAA,CAAA,MAAA,CAAA,YAAA,CAAA,CAAA,OAAA,CAAA,KAAA,CAAA,CACG,CAHH,EAKA;AACA,UAAA,CAAA,UAAA,CACA,GAAA,CAAA,aAAA,CACA,CACA,aAAA,CAAA,IAAA,CACA,QAAA,CAAA,GAAA,CAAA,KAAA,CAAA,gCAAA,CAAA,CACA,CACG,CANH,CAMG,GANH,CAOA,CAvCA,CA0CA;AAEA;;;GAIA,GAAA,CAAA,qBAAA,CAAA,EAAA,CAEA;;;;GAKA,GAAA,CAAA,KAAA,CAAA,IAAA,CAEA;;;;GAKA,GAAA,CAAA,eAAA,CAAA,EAAA,CAEA;;;;GAKA,GAAA,CAAA,WAAA,CAAA,CAAA,CAEA;;;;;GAMA,GAAA,CAAA,YAAA,CAAA,EAAA,CAEA;;;;GAKA,GAAA,CAAA,iBAAA,CAAA,SAAA,QAAA,CAAA,CACA,GAAA,GAAA,CAAA,KAAA,CAAA,CACA,QAAA,CAAA,IAAA,CAAA,GAAA,CAAA,KAAA,CACG,CAFH,IAEG,CACH,GAAA,GAAA,CAAA,eAAA,CAAA,MAAA,EAAA,CAAA,CAAA,CACA,GAAA,CAAA,cAAA,CAAA,SAAA,GAAA,CAAA,IAAA,CAAA,CACA,GAAA,CAAA,GAAA,CAAA,CACA,GAAA,CAAA,KAAA,CAAA,IAAA,CACA,GAAA,CAAA,KAAA,CAAA,gBAAA,CAAA,SAAA,CACA,8BAAuC,GAAA,CAAA,gBADvC,CAEA,CAEA;AACA,MAAA,GAAA,CAAA,eAAA,CAAA,MAAA,EACA,GAAA,CAAA,eAAA,CAAA,KAAA,GAAA,GAAA,CAAA,IAAA,CADA,CAEO,CAVP,CAWA,CACA,GAAA,CAAA,eAAA,CAAA,IAAA,CAAA,QAAA,CACA,CACA,CAnBA,CAqBA;;;;GAKA,GAAA,CAAA,gBAAA,CAAA,SAAA,OAAA,CAAA,CACA,GAAA,CAAA,QAAA,CAAA,OAAA,CAAA,IAAA,CACA,GAAA,CAAA,KAAA,CAAA,QAAA,CAAA,WAAA,CAAA,CACA,GAAA,CAAA,KAAA,EAAA,CAAA,GAAA,CAAA,YAAA,CAAA,KAAA,CAAA,CAAA,CACA,OAAA,CAAA,KAAA,CAAA,2CAAA,EACA,MACA,CACA,GAAA,CAAA,EAAA,CAAA,GAAA,CAAA,YAAA,CAAA,KAAA,CAAA,CACA,MAAA,CAAA,GAAA,CAAA,YAAA,CAAA,KAAA,CAAA,CACA,EAAA,CAAA,IAAA,CAAA,QAAA,CAAA,cAAA,CAAA,CACA,CAVA,CAYA;;;GAIA,GAAA,CAAA,WAAA,CAAA,SAAA,QAAA,CAAA,CACA,GAAA,CAAA,iBAAA,CAAA,SAAA,GAAA,CAAA,IAAA,CAAA,CACA,QAAA,CAAA,CAAA,GAAA,CACG,CAFH,CAGA,CAJA,CAMA;;;;;GAMA,GAAA,CAAA,IAAA,CAAA,SAAA,YAAA,CAAA,QAAA,CAAA,kBAAA,CAAA,CACA,GAAA,CAAA,iBAAA,CAAA,SAAA,GAAA,CAAA,IAAA,CAAA,CACA,GAAA,GAAA,CACA,MAAA,CAAA,QAAA,CAAA,GAAA,CAAA,CAEA,GAAA,CAAA,KAAA,CAAA,EAAA,GAAA,CAAA,WAAA,CACA,GAAA,CAAA,YAAA,CAAA,KAAA,EAAA,QAAA,CACA,GAAA,CAAA,GAAA,CAAA,CACA,IAAA,CAAA,GAAA,CAAA,YAAA,CAAA,gBADA,CAEA,YAAA,CAAA,YAFA,CAGA,cAAA,CAAA,MAAA,CAAA,kBAAA,GAAA,WAAA,CACA,kBADA,CACA,GAAA,CAAA,qBAJA,CAKA,SAAA,CAAA,KALA,CAAA,CAOA,IAAA,CAAA,WAAA,CAAA,GAAA,CACG,CAdH,CAeA,CAhBA,CAkBA;;;;;;;GAQA,GAAA,CAAA,QAAA,CAAA,SAAA,gBAAA,CAAA,YAAA,CACA,QADA,CACA,kBADA,CACA,CACA,GAAA,CAAA,iBAAA,CAAA,SAAA,GAAA,CAAA,IAAA,CAAA,CACA,GAAA,GAAA,CACA,MAAA,CAAA,QAAA,CAAA,GAAA,CAAA,CAEA,GAAA,CAAA,KAAA,CAAA,EAAA,GAAA,CAAA,WAAA,CACA,GAAA,CAAA,YAAA,CAAA,KAAA,EAAA,QAAA,CACA,GAAA,CAAA,GAAA,CAAA,CACA,IAAA,CAAA,GAAA,CAAA,YAAA,CAAA,oBADA,CAEA,YAAA,CAAA,YAFA,CAGA,gBAAA,CAAA,gBAHA,CAIA,cAAA,CAAA,MAAA,CAAA,kBAAA,GAAA,WAAA,CACA,kBADA,CACA,GAAA,CAAA,qBALA,CAMA,SAAA,CAAA,KANA,CAAA,CAQA,IAAA,CAAA,WAAA,CAAA,GAAA,CACG,CAfH,CAgBA,CAlBA,C;;8KCnYA,2BAAA,UAAA,MAAA,CAAA,CAEA,MAAA,CAAA,OAAA,CAAA,GAAA,CAEA,GAAA,CAAA,SAAA,CAAgB,mBAAO,CAAE,uBAAA,8CAAF,CAAvB,CAEA;AACA,GAAA,CAAA,SAAA,CAAA,MAAA,CAAA,SAAA,GAAA,WAAA,EAAA,CAAA,CAAA,SAAA,CAAA,SAAA,CACA,GAAA,CAAA,QAAA,CAAA,SAAA,EAAA,SAAA,CAAA,SAAA,CAAA,KAAA,CAAA,UAAA,CAAA,EACA,CAAA,SAAA,CAAA,SAAA,CAAA,KAAA,CAAA,UAAA,CADA,CAEA,GAAA,CAAA,MAAA,CAAA,SAAA,EAAA,SAAA,CAAA,SAAA,CAAA,KAAA,CAAA,eAAA,CAAA,CAEA,GAAA,CAAA,QAAA,CAAA,IAAA,CACA,QAAA,CAAA,UAAA,CAAA,OAAA,CACA,CACA,GAAA,CAAA,QAAA,CACA,QAAA,CAAA,GAAA,CAAA,OAAA,CAAA,SAAA,OAAA,CAAA,MAAA,CACA,CACA,QAAA,CAAA,YAAA,EACA,CACA;AACA,OAAA,CAAA,CAAc,GAAA,CAAA,IAAd,CAAc,MAAA,CAAA,IAAd,CAAA,CACA,CAEA,GAAA,CAAA,SAAA,CACA,MAAA,CAAA,YAAA,EAAA,CAEA,GAAA,QAAA,CACA;AACA;AACA;AACA,MAAA,CAAA,YAAA,EAAA,CAEA,GAAA,CAAA,gBAAA,CACA,MAAA,CAAA,MAAA,CAAA,GAAA,GAAA,WAAA,EACA,MAAA,CAAA,MAAA,CAAA,GAAA,CAAA,IAAA,GAAA,UAFA,CAIA,GAAA,gBAAA,CACA,OAAA,CAAA,CAAc,GAAA,CAAA,MAAA,CAAA,GAAd,CAAc,MAAA,CAAA,IAAd,CAAA,CAAA,CAEA,GAAA,MAAA,CACA;AACA;AACA,MAAA,CAAA,YAAA,EAAA,CAEA,GAAA,QAAA,CAAA,QAAA,GAAA,OAAA,CACA;AACA,MAAA,CAAA,YAAA,EAAA,CAEA,GAAA,MAAA,CAAA,cAAA,GAAA,WAAA,CACA;AACA,MAAA,CAAA,YAAA,EAAA,CAEA;AACA,SAAA,CAAA,WAAA,CAAA,SAAA,EAAA,CACA,CACA,GAAA,EAAA,CACA,OAAA,CAAA,CAAe,GAAA,CAAA,SAAf,CAAe,MAAA,CAAA,KAAf,CAAA,CAAA,CADA,IAGA,CAAA,YAAA,EACI,CANJ,CAOG,CA7CH,CAAA,CA+CA,MAAA,CAAA,QACA,CAEA,QAAA,CAAA,GAAA,CAAA,OAAA,CACA,CACA,MAAA,CACA,WAAA,CAAA,WAAA,CAAA,IAAA,CAAA,OAAA,CADA,CAEA,aAAA,CAAA,aAAA,CAAA,IAAA,CAAA,OAAA,CAFA,CAGA,QAAA,CAAA,QAAA,CAAA,IAAA,CAAA,OAAA,CAHA,CAIA,IAAA,CAAA,IAAA,CAAA,IAAA,CAAA,OAAA,CAJA,CAKA,UAAA,CAAA,GAAA,CAAA,UALA,CAMA,UAAA,CAAA,GAAA,CAAA,UANA,CAQA,CAEA,GAAA,CAAA,UAAA,CAAA,CACA,SAAA,CAAA,CAAA,CADA,CAEA,EAAA,CAAA,CAFA,CAGA,WAAA,CAAA,CAHA,CAIA,WAAA,CAAA,CAJA,CAKA,yBAAA,CAAA,CALA,CAMA,iBAAA,CAAA,CANA,CAOA,OAAA,CAAA,CAPA,CAAA,CASA,GAAA,CAAA,UAAA,CAAA,CACA,KAAA,WADA,CAEA,IAAA,IAFA,CAGA,IAAA,aAHA,CAIA,IAAA,aAJA,CAKA,IAAA,2BALA,CAMA,IAAA,mBANA,CAOA,IAAA,SAPA,CAAA,CAUA,QAAA,CAAA,SAAA,CAAA,GAAA,CAAA,GAAA,CACA,CACA,GAAA,CAAA,IAAA,CAAA,GAAA,EAAA,IAAA,CAAA,GAAA,CAAA,SAAA,CAAA,CAAA,CAA4C;AAC5C,GAAA,CAAA,IAAA,CAAA,GAAA,CAAA,UAAA,CAAA,GAAA,IAAA,CAAA,CACA,GAAA,CAAA,KAAA,CAAA,GAAA,CAAA,KAAA,CAAA,GAAA,CAAA,CACA,KAAA,CAAA,QAAA,CAAA,CACA,IAAA,CAAA,IADA,CAEA,IAAA,CAAA,IAFA,CAAA,CAIA,MAAA,CAAA,KACA,CAEA,QAAA,CAAA,YAAA,CAAA,OAAA,CAAA,OAAA,CACA,CACA,GAAA,CAAA,GAAA,CAAA,EAAA,CACA,GAAA,CAAA,OAAA,CAAA,GAAA,CAAA,OAAA,CAAA,SAAA,OAAA,CAAA,MAAA,CAAA,CACA,GAAA,CAAA,OAAA,CAAA,OAAA,CACA,GAAA,CAAA,MAAA,CAAA,MAAA,CACA,OAAA,CAAA,IAAA,CAAA,OAAA,CAAA,MAAA,CACE,CAJF,CAAA,CAKA;;;;IAKA,GAAA,CAAA,OAAA,CAAA,MAAA,CAAA,SAAA,GAAA,CAAA,UAAA,CACA,CACA,UAAA,CAAA,OAAA,CAAA,CACA,IADA,CACA,SAAA,OAAA,CACA,CACA,GAAA,UAAA,EAAA,CAAA,OAAA,CAAA,MAAA,CACA,OAAA,CAAA,GAAA,CAAA,UAAA,GAEA,GAAA,CAAA,MAAA,CAAA,SAAA,CAAA,GAAA,CAAA,CAAgC,SAAA,CAAA,CAAA,CAAhC,CAAA,CAAA,CACG,CAPH,CAQA,CAVA,CAWA,MAAA,CAAA,GACA,CAEA,QAAA,CAAA,KAAA,CAAA,OAAA,CAAA,GAAA,CACA,CACA,MAAA,CAAA,YAAA,CAAA,OAAA,CAAA,GAAA,CAAA,OAAA,CAAA,SAAA,OAAA,CAAA,MAAA,CACA,CACA,GACA,CACA,GAAA,EAAA,GAAA,CAAA,OAAA,CAAA,MAAA,CACA,CACA,MAAA,GAAA,CACA,CACA,MAAA,CAAA,GAAA,CACA,CACE,CAVF,CAAA,CAWA,CAEA,QAAA,CAAA,WAAA,EACA,CACA,GAAA,CAAA,OAAA,CAAA,IAAA,CAEA,MAAA,CAAA,UAAA,CAAA,OAAA,CAAA,CACA,IADA,CACA,SAAA,OAAA,CACA,CACA,MAAA,CAAA,CAAA,OAAA,CAAA,GACE,CAJF,CAKA,CAEA,QAAA,CAAA,cAAA,CAAA,OAAA,CACA,CACA,GAAA,CAAA,OAAA,CAAA,GAAA,CACA,CACA,GAAA,QAAA,CAAA,QAAA,GAAA,OAAA,CACA,KAAA,IAAA,CAAA,KAAA,CAAA,2CAAA,CAAA,CACA,KAAA,IAAA,CAAA,KAAA,CAAA,mBAAA,CACA,CACA,CAEA,QAAA,CAAA,aAAA,EACA,CACA,GAAA,CAAA,OAAA,CAAA,IAAA,CAEA,MAAA,CAAA,UAAA,CAAA,OAAA,CAAA,CACA,IADA,CACA,cADA,CAEA,CAEA,QAAA,CAAA,QAAA,CAAA,gBAAA,CAAA,YAAA,YAAA,CAAA,OAAA,CACA,CACA,GAAA,CAAA,OAAA,CAAA,IAAA,CAEA,GAAA,CAAA,KAAA,CAAA,OAAA,CAAA,gBAAA,CAAA,CACA,gBAAA,CAAA,CAAA,gBAAA,CAAA,CAEA,GAAA,MAAA,CAAA,YAAA,GAAA,QAAA,EAAA,MAAA,CAAA,OAAA,GAAA,WAAA,CACA,CACA,OAAA,CAAA,YAAA,CACA,YAAA,CAAA,IACA,CAEA,GAAA,CAAA,YAAA,CACA,YAAA,CAAA,EAAA,CAEA,MAAA,CAAA,YAAA,CAAA,OAAA,CAAA,UAAA,CAAA,OAAA,CAAA,CACA,IADA,CACA,SAAA,OAAA,CACA,CACA,cAAA,CAAA,OAAA,CAAA,CAEA,GAAA,CAAA,MAAA,CAAA,OAAA,CAAA,MAAA,CACA,GAAA,CAAA,GAAA,CAAA,OAAA,CAAA,GAAA,CAEA,MAAA,IAAA,CAAA,OAAA,CAAA,SAAA,OAAA,CAAA,MAAA,CACA,CACA,QAAA,CAAA,QAAA,CAAA,QAAA,CACA,CACA,GAAA,QAAA,CAAA,SAAA,CACA,MAAA,CAAA,SAAA,CAAA,qBAAA,CAAA,QAAA,CAAA,CAAA,CADA,IAGA,CACA,MAAA,CAAA,QAAA,CAAA,SAAA,CACA,OAAA,CAAA,QAAA,CACA,CACA,CAEA,QAAA,CAAA,QAAA,CAAA,GAAA,CAAA,QAAA,CACA,CACA,GAAA,GAAA,CACA,MAAA,CAAA,GAAA,CAAA,CADA,IAEA,IAAA,QAAA,CAAA,SAAA,CACA,MAAA,CAAA,SAAA,CAAA,qBAAA,CAAA,QAAA,CAAA,CAAA,CADA,IAGA,CAAA,OAAA,CAAA,QAAA,CACA,CAEA,GAAA,MAAA,CACA,CACA,GAAA,CAAA,KAAA,CAAA,gBAAA,CAAA,CAAA,CAAA,CAAA,KAAA,CAEA,GAAA,CAAA,QAAA,CACA,KADA,CACA,gBADA,CACA,YADA,CACA,QADA,CACA,OADA,CAEA,CANA,IAQA,CACA,GAAA,CAAA,QAAA,CACA,gBADA,CACA,YADA,CACA,QADA,CACA,OADA,CAEA,CACG,CAnCH,CAoCE,CA5CF,CAAA,CAAA,CA4CE,OACF,CAEA,QAAA,CAAA,IAAA,CAAA,YAAA,CAAA,OAAA,CACA,CACA,GAAA,CAAA,OAAA,CAAA,IAAA,CAEA,GAAA,CAAA,KAAA,CAAA,OAAA,CAAA,YAAA,CAAA,CACA,YAAA,CAAA,CAAA,YAAA,CAAA,CAEA,MAAA,CAAA,YAAA,CAAA,OAAA,CAAA,UAAA,CAAA,OAAA,CAAA,CACA,IADA,CACA,SAAA,OAAA,CACA,CACA,cAAA,CAAA,OAAA,CAAA,CAEA,GAAA,CAAA,MAAA,CAAA,OAAA,CAAA,MAAA,CACA,GAAA,CAAA,GAAA,CAAA,OAAA,CAAA,GAAA,CAEA,MAAA,IAAA,CAAA,OAAA,CAAA,SAAA,OAAA,CAAA,MAAA,CACA,CACA,QAAA,CAAA,QAAA,CAAA,QAAA,CACA,CACA,GAAA,QAAA,CAAA,SAAA,CACA,MAAA,CAAA,SAAA,CAAA,aAAA,CAAA,QAAA,CAAA,CAAA,CADA,IAGA,CACA,MAAA,CAAA,QAAA,CAAA,SAAA,CACA,OAAA,CAAA,QAAA,CACA,CACA,CAEA,QAAA,CAAA,QAAA,CAAA,GAAA,CAAA,QAAA,CACA,CACA,GAAA,GAAA,CACA,MAAA,CAAA,GAAA,CAAA,CADA,IAEA,IAAA,QAAA,CAAA,SAAA,CACA,MAAA,CAAA,SAAA,CAAA,aAAA,CAAA,QAAA,CAAA,CAAA,CADA,IAGA,CAAA,OAAA,CAAA,QAAA,CACA,CAEA,GAAA,MAAA,CACA,CACA,GAAA,CAAA,KAAA,CAAA,YAAA,CAAA,CAAA,CAAA,CAAA,KAAA,CACA,GAAA,CAAA,SAAA,CAAA,YAAA,CAAA,CAAA,CAAA,CAAA,SAAA,CAEA,GAAA,CAAA,IAAA,CAAA,KAAA,CAAA,SAAA,CAAA,YAAA,CAAA,QAAA,CAAA,OAAA,CACA,CANA,IAQA,CACA,GAAA,CAAA,IAAA,CAAA,YAAA,CAAA,QAAA,CAAA,OAAA,CACA,CACG,CAlCH,CAmCE,CA3CF,CAAA,CAAA,CA2CE,OACF,CAEA,QAAA,CAAA,WAAA,CAAA,IAAA,CACA,CACA,GAAA,CAAA,IAAA,CAAA,CAAA,UACA,CACA,GAAA,CAAA,MAAA,CAAA,OAAA,CACA;AACA;AACA,KAAA,IAAA,CAAA,KAAA,CAAA,gDAAA,CAAA,CAEA,GAAA,CAAA,IAAA,CAAA,GAAA,KAAA,CAAA,IAAA,CAAA,SAAA,CAAA,CACA,MAAA,CAAA,GAAA,CAAA,MAAA,CAAA,OAAA,CAAA,CAAA,IAAA,EAAA,KAAA,CAAA,IAAA,CAAA,IAAA,CACA,CACA,CAEA;AACA,WAAA,CAAA,aAAA,CAAA,CACA,WAAA,CAAA,eAAA,CAAA,CACA,WAAA,CAAA,UAAA,CAAA,CACA,WAAA,CAAA,MAAA,CAAA,C,4BA1TA,E,IAAA,C,IAAA,C,uGAAA,CAAA,C","sourcesContent":["/* eslint-disable no-continue */\r\n/* eslint-disable no-param-reassign */\r\n/* eslint-disable no-prototype-builtins */\r\nvar errorClasses = {};\r\nvar deserializers = {};\r\nvar addCustomErrorDeserializer = function (name, deserializer) {\r\n    deserializers[name] = deserializer;\r\n};\r\nvar createCustomErrorClass = function (name) {\r\n    var C = function CustomError(message, fields) {\r\n        Object.assign(this, fields);\r\n        this.name = name;\r\n        this.message = message || name;\r\n        this.stack = new Error().stack;\r\n    };\r\n    C.prototype = new Error();\r\n    errorClasses[name] = C;\r\n    return C;\r\n};\r\n// inspired from https://github.com/programble/errio/blob/master/index.js\r\nvar deserializeError = function (object) {\r\n    if (typeof object === \"object\" && object) {\r\n        try {\r\n            // $FlowFixMe FIXME HACK\r\n            var msg = JSON.parse(object.message);\r\n            if (msg.message && msg.name) {\r\n                object = msg;\r\n            }\r\n        }\r\n        catch (e) {\r\n            // nothing\r\n        }\r\n        var error = void 0;\r\n        if (typeof object.name === \"string\") {\r\n            var name_1 = object.name;\r\n            var des = deserializers[name_1];\r\n            if (des) {\r\n                error = des(object);\r\n            }\r\n            else {\r\n                var constructor = name_1 === \"Error\" ? Error : errorClasses[name_1];\r\n                if (!constructor) {\r\n                    console.warn(\"deserializing an unknown class '\" + name_1 + \"'\");\r\n                    constructor = createCustomErrorClass(name_1);\r\n                }\r\n                error = Object.create(constructor.prototype);\r\n                try {\r\n                    for (var prop in object) {\r\n                        if (object.hasOwnProperty(prop)) {\r\n                            error[prop] = object[prop];\r\n                        }\r\n                    }\r\n                }\r\n                catch (e) {\r\n                    // sometimes setting a property can fail (e.g. .name)\r\n                }\r\n            }\r\n        }\r\n        else {\r\n            error = new Error(object.message);\r\n        }\r\n        if (!error.stack && Error.captureStackTrace) {\r\n            Error.captureStackTrace(error, deserializeError);\r\n        }\r\n        return error;\r\n    }\r\n    return new Error(String(object));\r\n};\r\n// inspired from https://github.com/sindresorhus/serialize-error/blob/master/index.js\r\nvar serializeError = function (value) {\r\n    if (!value)\r\n        return value;\r\n    if (typeof value === \"object\") {\r\n        return destroyCircular(value, []);\r\n    }\r\n    if (typeof value === \"function\") {\r\n        return \"[Function: \" + (value.name || \"anonymous\") + \"]\";\r\n    }\r\n    return value;\r\n};\r\n// https://www.npmjs.com/package/destroy-circular\r\nfunction destroyCircular(from, seen) {\r\n    var to = {};\r\n    seen.push(from);\r\n    for (var _i = 0, _a = Object.keys(from); _i < _a.length; _i++) {\r\n        var key = _a[_i];\r\n        var value = from[key];\r\n        if (typeof value === \"function\") {\r\n            continue;\r\n        }\r\n        if (!value || typeof value !== \"object\") {\r\n            to[key] = value;\r\n            continue;\r\n        }\r\n        if (seen.indexOf(from[key]) === -1) {\r\n            to[key] = destroyCircular(from[key], seen.slice(0));\r\n            continue;\r\n        }\r\n        to[key] = \"[Circular]\";\r\n    }\r\n    if (typeof from.name === \"string\") {\r\n        to.name = from.name;\r\n    }\r\n    if (typeof from.message === \"string\") {\r\n        to.message = from.message;\r\n    }\r\n    if (typeof from.stack === \"string\") {\r\n        to.stack = from.stack;\r\n    }\r\n    return to;\r\n}\n\nvar AccountNameRequiredError = createCustomErrorClass(\"AccountNameRequired\");\r\nvar AccountNotSupported = createCustomErrorClass(\"AccountNotSupported\");\r\nvar AmountRequired = createCustomErrorClass(\"AmountRequired\");\r\nvar BluetoothRequired = createCustomErrorClass(\"BluetoothRequired\");\r\nvar BtcUnmatchedApp = createCustomErrorClass(\"BtcUnmatchedApp\");\r\nvar CantOpenDevice = createCustomErrorClass(\"CantOpenDevice\");\r\nvar CashAddrNotSupported = createCustomErrorClass(\"CashAddrNotSupported\");\r\nvar CurrencyNotSupported = createCustomErrorClass(\"CurrencyNotSupported\");\r\nvar DeviceAppVerifyNotSupported = createCustomErrorClass(\"DeviceAppVerifyNotSupported\");\r\nvar DeviceGenuineSocketEarlyClose = createCustomErrorClass(\"DeviceGenuineSocketEarlyClose\");\r\nvar DeviceNotGenuineError = createCustomErrorClass(\"DeviceNotGenuine\");\r\nvar DeviceOnDashboardExpected = createCustomErrorClass(\"DeviceOnDashboardExpected\");\r\nvar DeviceOnDashboardUnexpected = createCustomErrorClass(\"DeviceOnDashboardUnexpected\");\r\nvar DeviceInOSUExpected = createCustomErrorClass(\"DeviceInOSUExpected\");\r\nvar DeviceHalted = createCustomErrorClass(\"DeviceHalted\");\r\nvar DeviceNameInvalid = createCustomErrorClass(\"DeviceNameInvalid\");\r\nvar DeviceSocketFail = createCustomErrorClass(\"DeviceSocketFail\");\r\nvar DeviceSocketNoBulkStatus = createCustomErrorClass(\"DeviceSocketNoBulkStatus\");\r\nvar DisconnectedDevice = createCustomErrorClass(\"DisconnectedDevice\");\r\nvar DisconnectedDeviceDuringOperation = createCustomErrorClass(\"DisconnectedDeviceDuringOperation\");\r\nvar EnpointConfigError = createCustomErrorClass(\"EnpointConfig\");\r\nvar EthAppPleaseEnableContractData = createCustomErrorClass(\"EthAppPleaseEnableContractData\");\r\nvar FeeEstimationFailed = createCustomErrorClass(\"FeeEstimationFailed\");\r\nvar FirmwareNotRecognized = createCustomErrorClass(\"FirmwareNotRecognized\");\r\nvar HardResetFail = createCustomErrorClass(\"HardResetFail\");\r\nvar InvalidXRPTag = createCustomErrorClass(\"InvalidXRPTag\");\r\nvar InvalidAddress = createCustomErrorClass(\"InvalidAddress\");\r\nvar InvalidAddressBecauseDestinationIsAlsoSource = createCustomErrorClass(\"InvalidAddressBecauseDestinationIsAlsoSource\");\r\nvar LatestMCUInstalledError = createCustomErrorClass(\"LatestMCUInstalledError\");\r\nvar UnknownMCU = createCustomErrorClass(\"UnknownMCU\");\r\nvar LedgerAPIError = createCustomErrorClass(\"LedgerAPIError\");\r\nvar LedgerAPIErrorWithMessage = createCustomErrorClass(\"LedgerAPIErrorWithMessage\");\r\nvar LedgerAPINotAvailable = createCustomErrorClass(\"LedgerAPINotAvailable\");\r\nvar ManagerAppAlreadyInstalledError = createCustomErrorClass(\"ManagerAppAlreadyInstalled\");\r\nvar ManagerAppRelyOnBTCError = createCustomErrorClass(\"ManagerAppRelyOnBTC\");\r\nvar ManagerAppDepInstallRequired = createCustomErrorClass(\"ManagerAppDepInstallRequired\");\r\nvar ManagerAppDepUninstallRequired = createCustomErrorClass(\"ManagerAppDepUninstallRequired\");\r\nvar ManagerDeviceLockedError = createCustomErrorClass(\"ManagerDeviceLocked\");\r\nvar ManagerFirmwareNotEnoughSpaceError = createCustomErrorClass(\"ManagerFirmwareNotEnoughSpace\");\r\nvar ManagerNotEnoughSpaceError = createCustomErrorClass(\"ManagerNotEnoughSpace\");\r\nvar ManagerUninstallBTCDep = createCustomErrorClass(\"ManagerUninstallBTCDep\");\r\nvar NetworkDown = createCustomErrorClass(\"NetworkDown\");\r\nvar NoAddressesFound = createCustomErrorClass(\"NoAddressesFound\");\r\nvar NotEnoughBalance = createCustomErrorClass(\"NotEnoughBalance\");\r\nvar NotEnoughBalanceToDelegate = createCustomErrorClass(\"NotEnoughBalanceToDelegate\");\r\nvar NotEnoughBalanceInParentAccount = createCustomErrorClass(\"NotEnoughBalanceInParentAccount\");\r\nvar NotEnoughSpendableBalance = createCustomErrorClass(\"NotEnoughSpendableBalance\");\r\nvar NotEnoughBalanceBecauseDestinationNotCreated = createCustomErrorClass(\"NotEnoughBalanceBecauseDestinationNotCreated\");\r\nvar NoAccessToCamera = createCustomErrorClass(\"NoAccessToCamera\");\r\nvar NotEnoughGas = createCustomErrorClass(\"NotEnoughGas\");\r\nvar NotSupportedLegacyAddress = createCustomErrorClass(\"NotSupportedLegacyAddress\");\r\nvar GasLessThanEstimate = createCustomErrorClass(\"GasLessThanEstimate\");\r\nvar PasswordsDontMatchError = createCustomErrorClass(\"PasswordsDontMatch\");\r\nvar PasswordIncorrectError = createCustomErrorClass(\"PasswordIncorrect\");\r\nvar RecommendSubAccountsToEmpty = createCustomErrorClass(\"RecommendSubAccountsToEmpty\");\r\nvar RecommendUndelegation = createCustomErrorClass(\"RecommendUndelegation\");\r\nvar TimeoutTagged = createCustomErrorClass(\"TimeoutTagged\");\r\nvar UnexpectedBootloader = createCustomErrorClass(\"UnexpectedBootloader\");\r\nvar MCUNotGenuineToDashboard = createCustomErrorClass(\"MCUNotGenuineToDashboard\");\r\nvar RecipientRequired = createCustomErrorClass(\"RecipientRequired\");\r\nvar UnavailableTezosOriginatedAccountReceive = createCustomErrorClass(\"UnavailableTezosOriginatedAccountReceive\");\r\nvar UnavailableTezosOriginatedAccountSend = createCustomErrorClass(\"UnavailableTezosOriginatedAccountSend\");\r\nvar UpdateFetchFileFail = createCustomErrorClass(\"UpdateFetchFileFail\");\r\nvar UpdateIncorrectHash = createCustomErrorClass(\"UpdateIncorrectHash\");\r\nvar UpdateIncorrectSig = createCustomErrorClass(\"UpdateIncorrectSig\");\r\nvar UpdateYourApp = createCustomErrorClass(\"UpdateYourApp\");\r\nvar UserRefusedDeviceNameChange = createCustomErrorClass(\"UserRefusedDeviceNameChange\");\r\nvar UserRefusedAddress = createCustomErrorClass(\"UserRefusedAddress\");\r\nvar UserRefusedFirmwareUpdate = createCustomErrorClass(\"UserRefusedFirmwareUpdate\");\r\nvar UserRefusedAllowManager = createCustomErrorClass(\"UserRefusedAllowManager\");\r\nvar UserRefusedOnDevice = createCustomErrorClass(\"UserRefusedOnDevice\"); // TODO rename because it's just for transaction refusal\r\nvar TransportOpenUserCancelled = createCustomErrorClass(\"TransportOpenUserCancelled\");\r\nvar TransportInterfaceNotAvailable = createCustomErrorClass(\"TransportInterfaceNotAvailable\");\r\nvar TransportRaceCondition = createCustomErrorClass(\"TransportRaceCondition\");\r\nvar TransportWebUSBGestureRequired = createCustomErrorClass(\"TransportWebUSBGestureRequired\");\r\nvar DeviceShouldStayInApp = createCustomErrorClass(\"DeviceShouldStayInApp\");\r\nvar WebsocketConnectionError = createCustomErrorClass(\"WebsocketConnectionError\");\r\nvar WebsocketConnectionFailed = createCustomErrorClass(\"WebsocketConnectionFailed\");\r\nvar WrongDeviceForAccount = createCustomErrorClass(\"WrongDeviceForAccount\");\r\nvar WrongAppForCurrency = createCustomErrorClass(\"WrongAppForCurrency\");\r\nvar ETHAddressNonEIP = createCustomErrorClass(\"ETHAddressNonEIP\");\r\nvar CantScanQRCode = createCustomErrorClass(\"CantScanQRCode\");\r\nvar FeeNotLoaded = createCustomErrorClass(\"FeeNotLoaded\");\r\nvar FeeRequired = createCustomErrorClass(\"FeeRequired\");\r\nvar FeeTooHigh = createCustomErrorClass(\"FeeTooHigh\");\r\nvar SyncError = createCustomErrorClass(\"SyncError\");\r\nvar PairingFailed = createCustomErrorClass(\"PairingFailed\");\r\nvar GenuineCheckFailed = createCustomErrorClass(\"GenuineCheckFailed\");\r\nvar LedgerAPI4xx = createCustomErrorClass(\"LedgerAPI4xx\");\r\nvar LedgerAPI5xx = createCustomErrorClass(\"LedgerAPI5xx\");\r\nvar FirmwareOrAppUpdateRequired = createCustomErrorClass(\"FirmwareOrAppUpdateRequired\");\r\n// db stuff, no need to translate\r\nvar NoDBPathGiven = createCustomErrorClass(\"NoDBPathGiven\");\r\nvar DBWrongPassword = createCustomErrorClass(\"DBWrongPassword\");\r\nvar DBNotReset = createCustomErrorClass(\"DBNotReset\");\r\n/**\r\n * TransportError is used for any generic transport errors.\r\n * e.g. Error thrown when data received by exchanges are incorrect or if exchanged failed to communicate with the device for various reason.\r\n */\r\nfunction TransportError(message, id) {\r\n    this.name = \"TransportError\";\r\n    this.message = message;\r\n    this.stack = new Error().stack;\r\n    this.id = id;\r\n}\r\nTransportError.prototype = new Error();\r\naddCustomErrorDeserializer(\"TransportError\", function (e) { return new TransportError(e.message, e.id); });\r\nvar StatusCodes = {\r\n    PIN_REMAINING_ATTEMPTS: 0x63c0,\r\n    INCORRECT_LENGTH: 0x6700,\r\n    MISSING_CRITICAL_PARAMETER: 0x6800,\r\n    COMMAND_INCOMPATIBLE_FILE_STRUCTURE: 0x6981,\r\n    SECURITY_STATUS_NOT_SATISFIED: 0x6982,\r\n    CONDITIONS_OF_USE_NOT_SATISFIED: 0x6985,\r\n    INCORRECT_DATA: 0x6a80,\r\n    NOT_ENOUGH_MEMORY_SPACE: 0x6a84,\r\n    REFERENCED_DATA_NOT_FOUND: 0x6a88,\r\n    FILE_ALREADY_EXISTS: 0x6a89,\r\n    INCORRECT_P1_P2: 0x6b00,\r\n    INS_NOT_SUPPORTED: 0x6d00,\r\n    CLA_NOT_SUPPORTED: 0x6e00,\r\n    TECHNICAL_PROBLEM: 0x6f00,\r\n    OK: 0x9000,\r\n    MEMORY_PROBLEM: 0x9240,\r\n    NO_EF_SELECTED: 0x9400,\r\n    INVALID_OFFSET: 0x9402,\r\n    FILE_NOT_FOUND: 0x9404,\r\n    INCONSISTENT_FILE: 0x9408,\r\n    ALGORITHM_NOT_SUPPORTED: 0x9484,\r\n    INVALID_KCV: 0x9485,\r\n    CODE_NOT_INITIALIZED: 0x9802,\r\n    ACCESS_CONDITION_NOT_FULFILLED: 0x9804,\r\n    CONTRADICTION_SECRET_CODE_STATUS: 0x9808,\r\n    CONTRADICTION_INVALIDATION: 0x9810,\r\n    CODE_BLOCKED: 0x9840,\r\n    MAX_VALUE_REACHED: 0x9850,\r\n    GP_AUTH_FAILED: 0x6300,\r\n    LICENSING: 0x6f42,\r\n    HALTED: 0x6faa\r\n};\r\nfunction getAltStatusMessage(code) {\r\n    switch (code) {\r\n        // improve text of most common errors\r\n        case 0x6700:\r\n            return \"Incorrect length\";\r\n        case 0x6800:\r\n            return \"Missing critical parameter\";\r\n        case 0x6982:\r\n            return \"Security not satisfied (dongle locked or have invalid access rights)\";\r\n        case 0x6985:\r\n            return \"Condition of use not satisfied (denied by the user?)\";\r\n        case 0x6a80:\r\n            return \"Invalid data received\";\r\n        case 0x6b00:\r\n            return \"Invalid parameter received\";\r\n    }\r\n    if (0x6f00 <= code && code <= 0x6fff) {\r\n        return \"Internal error, please report\";\r\n    }\r\n}\r\n/**\r\n * Error thrown when a device returned a non success status.\r\n * the error.statusCode is one of the `StatusCodes` exported by this library.\r\n */\r\nfunction TransportStatusError(statusCode) {\r\n    this.name = \"TransportStatusError\";\r\n    var statusText = Object.keys(StatusCodes).find(function (k) { return StatusCodes[k] === statusCode; }) ||\r\n        \"UNKNOWN_ERROR\";\r\n    var smsg = getAltStatusMessage(statusCode) || statusText;\r\n    var statusCodeStr = statusCode.toString(16);\r\n    this.message = \"Ledger device: \" + smsg + \" (0x\" + statusCodeStr + \")\";\r\n    this.stack = new Error().stack;\r\n    this.statusCode = statusCode;\r\n    this.statusText = statusText;\r\n}\r\nTransportStatusError.prototype = new Error();\r\naddCustomErrorDeserializer(\"TransportStatusError\", function (e) { return new TransportStatusError(e.statusCode); });\n\nexport { AccountNameRequiredError, AccountNotSupported, AmountRequired, BluetoothRequired, BtcUnmatchedApp, CantOpenDevice, CantScanQRCode, CashAddrNotSupported, CurrencyNotSupported, DBNotReset, DBWrongPassword, DeviceAppVerifyNotSupported, DeviceGenuineSocketEarlyClose, DeviceHalted, DeviceInOSUExpected, DeviceNameInvalid, DeviceNotGenuineError, DeviceOnDashboardExpected, DeviceOnDashboardUnexpected, DeviceShouldStayInApp, DeviceSocketFail, DeviceSocketNoBulkStatus, DisconnectedDevice, DisconnectedDeviceDuringOperation, ETHAddressNonEIP, EnpointConfigError, EthAppPleaseEnableContractData, FeeEstimationFailed, FeeNotLoaded, FeeRequired, FeeTooHigh, FirmwareNotRecognized, FirmwareOrAppUpdateRequired, GasLessThanEstimate, GenuineCheckFailed, HardResetFail, InvalidAddress, InvalidAddressBecauseDestinationIsAlsoSource, InvalidXRPTag, LatestMCUInstalledError, LedgerAPI4xx, LedgerAPI5xx, LedgerAPIError, LedgerAPIErrorWithMessage, LedgerAPINotAvailable, MCUNotGenuineToDashboard, ManagerAppAlreadyInstalledError, ManagerAppDepInstallRequired, ManagerAppDepUninstallRequired, ManagerAppRelyOnBTCError, ManagerDeviceLockedError, ManagerFirmwareNotEnoughSpaceError, ManagerNotEnoughSpaceError, ManagerUninstallBTCDep, NetworkDown, NoAccessToCamera, NoAddressesFound, NoDBPathGiven, NotEnoughBalance, NotEnoughBalanceBecauseDestinationNotCreated, NotEnoughBalanceInParentAccount, NotEnoughBalanceToDelegate, NotEnoughGas, NotEnoughSpendableBalance, NotSupportedLegacyAddress, PairingFailed, PasswordIncorrectError, PasswordsDontMatchError, RecipientRequired, RecommendSubAccountsToEmpty, RecommendUndelegation, StatusCodes, SyncError, TimeoutTagged, TransportError, TransportInterfaceNotAvailable, TransportOpenUserCancelled, TransportRaceCondition, TransportStatusError, TransportWebUSBGestureRequired, UnavailableTezosOriginatedAccountReceive, UnavailableTezosOriginatedAccountSend, UnexpectedBootloader, UnknownMCU, UpdateFetchFileFail, UpdateIncorrectHash, UpdateIncorrectSig, UpdateYourApp, UserRefusedAddress, UserRefusedAllowManager, UserRefusedDeviceNameChange, UserRefusedFirmwareUpdate, UserRefusedOnDevice, WebsocketConnectionError, WebsocketConnectionFailed, WrongAppForCurrency, WrongDeviceForAccount, addCustomErrorDeserializer, createCustomErrorClass, deserializeError, getAltStatusMessage, serializeError };\n","/********************************************************************************\n *   Ledger Node JS API\n *   (c) 2016-2017 Ledger\n *\n *  Licensed under the Apache License, Version 2.0 (the \"License\");\n *  you may not use this file except in compliance with the License.\n *  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n *  Unless required by applicable law or agreed to in writing, software\n *  distributed under the License is distributed on an \"AS IS\" BASIS,\n *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *  See the License for the specific language governing permissions and\n *  limitations under the License.\n ********************************************************************************/\n// FIXME drop:\nimport { splitPath, foreach } from \"./utils\";\nimport { EthAppPleaseEnableContractData } from \"@ledgerhq/errors\";\nimport { BigNumber } from \"bignumber.js\";\n\nfunction hexBuffer(str) {\n  return Buffer.from(str.startsWith(\"0x\") ? str.slice(2) : str, \"hex\");\n}\n\nfunction maybeHexBuffer(str) {\n  if (!str) return null;\n  return hexBuffer(str);\n}\n\nconst remapTransactionRelatedErrors = e => {\n  if (e && e.statusCode === 0x6a80) {\n    return new EthAppPleaseEnableContractData(\"Please enable Contract data on the Ethereum app Settings\");\n  }\n\n  return e;\n};\n/**\n * Ethereum API\n *\n * @example\n * import Eth from \"@ledgerhq/hw-app-eth\";\n * const eth = new Eth(transport)\n */\n\n\nexport default class Eth {\n  constructor(transport, scrambleKey = \"w0w\") {\n    this.transport = void 0;\n    this.transport = transport;\n    transport.decorateAppAPIMethods(this, [\"getAddress\", \"provideERC20TokenInformation\", \"signTransaction\", \"signPersonalMessage\", \"getAppConfiguration\", \"starkGetPublicKey\", \"starkSignOrder\", \"starkSignTransfer\", \"starkProvideQuantum\"], scrambleKey);\n  }\n  /**\n   * get Ethereum address for a given BIP 32 path.\n   * @param path a path in BIP 32 format\n   * @option boolDisplay optionally enable or not the display\n   * @option boolChaincode optionally enable or not the chaincode request\n   * @return an object with a publicKey, address and (optionally) chainCode\n   * @example\n   * eth.getAddress(\"44'/60'/0'/0/0\").then(o => o.address)\n   */\n\n\n  getAddress(path, boolDisplay, boolChaincode) {\n    let paths = splitPath(path);\n    let buffer = Buffer.alloc(1 + paths.length * 4);\n    buffer[0] = paths.length;\n    paths.forEach((element, index) => {\n      buffer.writeUInt32BE(element, 1 + 4 * index);\n    });\n    return this.transport.send(0xe0, 0x02, boolDisplay ? 0x01 : 0x00, boolChaincode ? 0x01 : 0x00, buffer).then(response => {\n      let result = {};\n      let publicKeyLength = response[0];\n      let addressLength = response[1 + publicKeyLength];\n      result.publicKey = response.slice(1, 1 + publicKeyLength).toString(\"hex\");\n      result.address = \"0x\" + response.slice(1 + publicKeyLength + 1, 1 + publicKeyLength + 1 + addressLength).toString(\"ascii\");\n\n      if (boolChaincode) {\n        result.chainCode = response.slice(1 + publicKeyLength + 1 + addressLength, 1 + publicKeyLength + 1 + addressLength + 32).toString(\"hex\");\n      }\n\n      return result;\n    });\n  }\n  /**\n   * This commands provides a trusted description of an ERC 20 token\n   * to associate a contract address with a ticker and number of decimals.\n   *\n   * It shall be run immediately before performing a transaction involving a contract\n   * calling this contract address to display the proper token information to the user if necessary.\n   *\n   * @param {*} info: a blob from \"erc20.js\" utilities that contains all token information.\n   *\n   * @example\n   * import { byContractAddress } from \"@ledgerhq/hw-app-eth/erc20\"\n   * const zrxInfo = byContractAddress(\"0xe41d2489571d322189246dafa5ebde1f4699f498\")\n   * if (zrxInfo) await appEth.provideERC20TokenInformation(zrxInfo)\n   * const signed = await appEth.signTransaction(path, rawTxHex)\n   */\n\n\n  provideERC20TokenInformation({\n    data\n  }) {\n    return this.transport.send(0xe0, 0x0a, 0x00, 0x00, data).then(() => true, e => {\n      if (e && e.statusCode === 0x6d00) {\n        // this case happen for older version of ETH app, since older app version had the ERC20 data hardcoded, it's fine to assume it worked.\n        // we return a flag to know if the call was effective or not\n        return false;\n      }\n\n      throw e;\n    });\n  }\n  /**\n   * You can sign a transaction and retrieve v, r, s given the raw transaction and the BIP 32 path of the account to sign\n   * @example\n   eth.signTransaction(\"44'/60'/0'/0/0\", \"e8018504e3b292008252089428ee52a8f3d6e5d15f8b131996950d7f296c7952872bd72a2487400080\").then(result => ...)\n   */\n\n\n  signTransaction(path, rawTxHex) {\n    let paths = splitPath(path);\n    let offset = 0;\n    let rawTx = Buffer.from(rawTxHex, \"hex\");\n    let toSend = [];\n    let response;\n\n    while (offset !== rawTx.length) {\n      let maxChunkSize = offset === 0 ? 150 - 1 - paths.length * 4 : 150;\n      let chunkSize = offset + maxChunkSize > rawTx.length ? rawTx.length - offset : maxChunkSize;\n      let buffer = Buffer.alloc(offset === 0 ? 1 + paths.length * 4 + chunkSize : chunkSize);\n\n      if (offset === 0) {\n        buffer[0] = paths.length;\n        paths.forEach((element, index) => {\n          buffer.writeUInt32BE(element, 1 + 4 * index);\n        });\n        rawTx.copy(buffer, 1 + 4 * paths.length, offset, offset + chunkSize);\n      } else {\n        rawTx.copy(buffer, 0, offset, offset + chunkSize);\n      }\n\n      toSend.push(buffer);\n      offset += chunkSize;\n    }\n\n    return foreach(toSend, (data, i) => this.transport.send(0xe0, 0x04, i === 0 ? 0x00 : 0x80, 0x00, data).then(apduResponse => {\n      response = apduResponse;\n    })).then(() => {\n      const v = response.slice(0, 1).toString(\"hex\");\n      const r = response.slice(1, 1 + 32).toString(\"hex\");\n      const s = response.slice(1 + 32, 1 + 32 + 32).toString(\"hex\");\n      return {\n        v,\n        r,\n        s\n      };\n    }, e => {\n      throw remapTransactionRelatedErrors(e);\n    });\n  }\n  /**\n   */\n\n\n  getAppConfiguration() {\n    return this.transport.send(0xe0, 0x06, 0x00, 0x00).then(response => {\n      let result = {};\n      result.arbitraryDataEnabled = response[0] & 0x01;\n      result.erc20ProvisioningNecessary = response[0] & 0x02;\n      result.starkEnabled = response[0] & 0x04;\n      result.version = \"\" + response[1] + \".\" + response[2] + \".\" + response[3];\n      return result;\n    });\n  }\n  /**\n  * You can sign a message according to eth_sign RPC call and retrieve v, r, s given the message and the BIP 32 path of the account to sign.\n  * @example\n  eth.signPersonalMessage(\"44'/60'/0'/0/0\", Buffer.from(\"test\").toString(\"hex\")).then(result => {\n  var v = result['v'] - 27;\n  v = v.toString(16);\n  if (v.length < 2) {\n    v = \"0\" + v;\n  }\n  console.log(\"Signature 0x\" + result['r'] + result['s'] + v);\n  })\n   */\n\n\n  signPersonalMessage(path, messageHex) {\n    let paths = splitPath(path);\n    let offset = 0;\n    let message = Buffer.from(messageHex, \"hex\");\n    let toSend = [];\n    let response;\n\n    while (offset !== message.length) {\n      let maxChunkSize = offset === 0 ? 150 - 1 - paths.length * 4 - 4 : 150;\n      let chunkSize = offset + maxChunkSize > message.length ? message.length - offset : maxChunkSize;\n      let buffer = Buffer.alloc(offset === 0 ? 1 + paths.length * 4 + 4 + chunkSize : chunkSize);\n\n      if (offset === 0) {\n        buffer[0] = paths.length;\n        paths.forEach((element, index) => {\n          buffer.writeUInt32BE(element, 1 + 4 * index);\n        });\n        buffer.writeUInt32BE(message.length, 1 + 4 * paths.length);\n        message.copy(buffer, 1 + 4 * paths.length + 4, offset, offset + chunkSize);\n      } else {\n        message.copy(buffer, 0, offset, offset + chunkSize);\n      }\n\n      toSend.push(buffer);\n      offset += chunkSize;\n    }\n\n    return foreach(toSend, (data, i) => this.transport.send(0xe0, 0x08, i === 0 ? 0x00 : 0x80, 0x00, data).then(apduResponse => {\n      response = apduResponse;\n    })).then(() => {\n      const v = response[0];\n      const r = response.slice(1, 1 + 32).toString(\"hex\");\n      const s = response.slice(1 + 32, 1 + 32 + 32).toString(\"hex\");\n      return {\n        v,\n        r,\n        s\n      };\n    });\n  }\n  /**\n   * get Stark public key for a given BIP 32 path.\n   * @param path a path in BIP 32 format\n   * @option boolDisplay optionally enable or not the display\n   * @return the Stark public key\n   */\n\n\n  starkGetPublicKey(path, boolDisplay) {\n    let paths = splitPath(path);\n    let buffer = Buffer.alloc(1 + paths.length * 4);\n    buffer[0] = paths.length;\n    paths.forEach((element, index) => {\n      buffer.writeUInt32BE(element, 1 + 4 * index);\n    });\n    return this.transport.send(0xf0, 0x02, boolDisplay ? 0x01 : 0x00, 0x00, buffer).then(response => {\n      return response.slice(0, response.length - 2);\n    });\n  }\n  /**\n   * sign a Stark order\n   * @param path a path in BIP 32 format\n   * @option sourceTokenAddress contract address of the source token (not present for ETH)\n   * @param sourceQuantization quantization used for the source token\n   * @option destinationTokenAddress contract address of the destination token (not present for ETH)\n   * @param destinationQuantization quantization used for the destination token\n   * @param sourceVault ID of the source vault\n   * @param destinationVault ID of the destination vault\n   * @param amountSell amount to sell\n   * @param amountBuy amount to buy\n   * @param nonce transaction nonce\n   * @param timestamp transaction validity timestamp\n   * @return the signature\n   */\n\n\n  starkSignOrder(path, sourceTokenAddress, sourceQuantization, destinationTokenAddress, destinationQuantization, sourceVault, destinationVault, amountSell, amountBuy, nonce, timestamp) {\n    const sourceTokenAddressHex = maybeHexBuffer(sourceTokenAddress);\n    const destinationTokenAddressHex = maybeHexBuffer(destinationTokenAddress);\n    let paths = splitPath(path);\n    let buffer = Buffer.alloc(1 + paths.length * 4 + 20 + 32 + 20 + 32 + 4 + 4 + 8 + 8 + 4 + 4, 0);\n    let offset = 0;\n    buffer[0] = paths.length;\n    paths.forEach((element, index) => {\n      buffer.writeUInt32BE(element, 1 + 4 * index);\n    });\n    offset = 1 + 4 * paths.length;\n\n    if (sourceTokenAddressHex) {\n      sourceTokenAddressHex.copy(buffer, offset);\n    }\n\n    offset += 20;\n    Buffer.from(sourceQuantization.toString(16).padStart(64, \"0\"), \"hex\").copy(buffer, offset);\n    offset += 32;\n\n    if (destinationTokenAddressHex) {\n      destinationTokenAddressHex.copy(buffer, offset);\n    }\n\n    offset += 20;\n    Buffer.from(destinationQuantization.toString(16).padStart(64, \"0\"), \"hex\").copy(buffer, offset);\n    offset += 32;\n    buffer.writeUInt32BE(sourceVault, offset);\n    offset += 4;\n    buffer.writeUInt32BE(destinationVault, offset);\n    offset += 4;\n    Buffer.from(amountSell.toString(16).padStart(16, \"0\"), \"hex\").copy(buffer, offset);\n    offset += 8;\n    Buffer.from(amountBuy.toString(16).padStart(16, \"0\"), \"hex\").copy(buffer, offset);\n    offset += 8;\n    buffer.writeUInt32BE(nonce, offset);\n    offset += 4;\n    buffer.writeUInt32BE(timestamp, offset);\n    return this.transport.send(0xf0, 0x04, 0x01, 0x00, buffer).then(response => {\n      const r = response.slice(1, 1 + 32).toString(\"hex\");\n      const s = response.slice(1 + 32, 1 + 32 + 32).toString(\"hex\");\n      return {\n        r,\n        s\n      };\n    });\n  }\n  /**\n   * sign a Stark transfer\n   * @param path a path in BIP 32 format\n   * @option transferTokenAddress contract address of the token to be transferred (not present for ETH)\n   * @param transferQuantization quantization used for the token to be transferred\n   * @param targetPublicKey target Stark public key\n   * @param sourceVault ID of the source vault\n   * @param destinationVault ID of the destination vault\n   * @param amountTransfer amount to transfer\n   * @param nonce transaction nonce\n   * @param timestamp transaction validity timestamp\n   * @return the signature\n   */\n\n\n  starkSignTransfer(path, transferTokenAddress, transferQuantization, targetPublicKey, sourceVault, destinationVault, amountTransfer, nonce, timestamp) {\n    const transferTokenAddressHex = maybeHexBuffer(transferTokenAddress);\n    const targetPublicKeyHex = hexBuffer(targetPublicKey);\n    let paths = splitPath(path);\n    let buffer = Buffer.alloc(1 + paths.length * 4 + 20 + 32 + 32 + 4 + 4 + 8 + 4 + 4, 0);\n    let offset = 0;\n    buffer[0] = paths.length;\n    paths.forEach((element, index) => {\n      buffer.writeUInt32BE(element, 1 + 4 * index);\n    });\n    offset = 1 + 4 * paths.length;\n\n    if (transferTokenAddressHex) {\n      transferTokenAddressHex.copy(buffer, offset);\n    }\n\n    offset += 20;\n    Buffer.from(transferQuantization.toString(16).padStart(64, \"0\"), \"hex\").copy(buffer, offset);\n    offset += 32;\n    targetPublicKeyHex.copy(buffer, offset);\n    offset += 32;\n    buffer.writeUInt32BE(sourceVault, offset);\n    offset += 4;\n    buffer.writeUInt32BE(destinationVault, offset);\n    offset += 4;\n    Buffer.from(amountTransfer.toString(16).padStart(16, \"0\"), \"hex\").copy(buffer, offset);\n    offset += 8;\n    buffer.writeUInt32BE(nonce, offset);\n    offset += 4;\n    buffer.writeUInt32BE(timestamp, offset);\n    return this.transport.send(0xf0, 0x04, 0x02, 0x00, buffer).then(response => {\n      const r = response.slice(1, 1 + 32).toString(\"hex\");\n      const s = response.slice(1 + 32, 1 + 32 + 32).toString(\"hex\");\n      return {\n        r,\n        s\n      };\n    });\n  }\n  /**\n   * provide quantization information before singing a deposit or withdrawal Stark powered contract call\n   *\n   * It shall be run following a provideERC20TokenInformation call for the given contract\n   *\n   * @param operationContract contract address of the token to be transferred (not present for ETH)\n   * @param operationQuantization quantization used for the token to be transferred\n   */\n\n\n  starkProvideQuantum(operationContract, operationQuantization) {\n    const operationContractHex = maybeHexBuffer(operationContract);\n    let buffer = Buffer.alloc(20 + 32, 0);\n\n    if (operationContractHex) {\n      operationContractHex.copy(buffer, 0);\n    }\n\n    Buffer.from(operationQuantization.toString(16).padStart(64, \"0\"), \"hex\").copy(buffer, 20);\n    return this.transport.send(0xf0, 0x08, 0x00, 0x00, buffer).then(() => true, e => {\n      if (e && e.statusCode === 0x6d00) {\n        // this case happen for ETH application versions not supporting Stark extensions\n        return false;\n      }\n\n      throw e;\n    });\n  }\n\n}\n//# sourceMappingURL=Eth.js.map","/********************************************************************************\n *   Ledger Node JS API\n *   (c) 2016-2017 Ledger\n *\n *  Licensed under the Apache License, Version 2.0 (the \"License\");\n *  you may not use this file except in compliance with the License.\n *  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n *  Unless required by applicable law or agreed to in writing, software\n *  distributed under the License is distributed on an \"AS IS\" BASIS,\n *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *  See the License for the specific language governing permissions and\n *  limitations under the License.\n ********************************************************************************/\nexport function defer() {\n  let resolve, reject;\n  let promise = new Promise(function (success, failure) {\n    resolve = success;\n    reject = failure;\n  });\n  if (!resolve || !reject) throw \"defer() error\"; // this never happens and is just to make flow happy\n\n  return {\n    promise,\n    resolve,\n    reject\n  };\n} // TODO use bip32-path library\n\nexport function splitPath(path) {\n  let result = [];\n  let components = path.split(\"/\");\n  components.forEach(element => {\n    let number = parseInt(element, 10);\n\n    if (isNaN(number)) {\n      return; // FIXME shouldn't it throws instead?\n    }\n\n    if (element.length > 1 && element[element.length - 1] === \"'\") {\n      number += 0x80000000;\n    }\n\n    result.push(number);\n  });\n  return result;\n} // TODO use async await\n\nexport function eachSeries(arr, fun) {\n  return arr.reduce((p, e) => p.then(() => fun(e)), Promise.resolve());\n}\nexport function foreach(arr, callback) {\n  function iterate(index, array, result) {\n    if (index >= array.length) {\n      return result;\n    } else return callback(array[index], index).then(function (res) {\n      result.push(res);\n      return iterate(index + 1, array, result);\n    });\n  }\n\n  return Promise.resolve().then(() => iterate(0, arr, []));\n}\nexport function doIf(condition, callback) {\n  return Promise.resolve().then(() => {\n    if (condition) {\n      return callback();\n    }\n  });\n}\nexport function asyncWhile(predicate, callback) {\n  function iterate(result) {\n    if (!predicate()) {\n      return result;\n    } else {\n      return callback().then(res => {\n        result.push(res);\n        return iterate(result);\n      });\n    }\n  }\n\n  return Promise.resolve([]).then(iterate);\n}\n//# sourceMappingURL=utils.js.map","import { sign, isSupported } from \"u2f-api\";\nimport Transport from \"@ledgerhq/hw-transport\";\nimport { log } from \"@ledgerhq/logs\";\nimport { TransportError } from \"@ledgerhq/errors\";\n\nfunction wrapU2FTransportError(originalError, message, id) {\n  const err = new TransportError(message, id); // $FlowFixMe\n\n  err.originalError = originalError;\n  return err;\n}\n\nfunction wrapApdu(apdu, key) {\n  const result = Buffer.alloc(apdu.length);\n\n  for (let i = 0; i < apdu.length; i++) {\n    result[i] = apdu[i] ^ key[i % key.length];\n  }\n\n  return result;\n} // Convert from normal to web-safe, strip trailing \"=\"s\n\n\nconst webSafe64 = base64 => base64.replace(/\\+/g, \"-\").replace(/\\//g, \"_\").replace(/=+$/, \"\"); // Convert from web-safe to normal, add trailing \"=\"s\n\n\nconst normal64 = base64 => base64.replace(/-/g, \"+\").replace(/_/g, \"/\") + \"==\".substring(0, 3 * base64.length % 4);\n\nfunction attemptExchange(apdu, timeoutMillis, scrambleKey, unwrap) {\n  const keyHandle = wrapApdu(apdu, scrambleKey);\n  const challenge = Buffer.from(\"0000000000000000000000000000000000000000000000000000000000000000\", \"hex\");\n  const signRequest = {\n    version: \"U2F_V2\",\n    keyHandle: webSafe64(keyHandle.toString(\"base64\")),\n    challenge: webSafe64(challenge.toString(\"base64\")),\n    appId: location.origin\n  };\n  log(\"apdu\", \"=> \" + apdu.toString(\"hex\"));\n  return sign(signRequest, timeoutMillis / 1000).then(response => {\n    const {\n      signatureData\n    } = response;\n\n    if (typeof signatureData === \"string\") {\n      const data = Buffer.from(normal64(signatureData), \"base64\");\n      let result;\n\n      if (!unwrap) {\n        result = data;\n      } else {\n        result = data.slice(5);\n      }\n\n      log(\"apdu\", \"<= \" + result.toString(\"hex\"));\n      return result;\n    } else {\n      throw response;\n    }\n  });\n}\n\nlet transportInstances = [];\n\nfunction emitDisconnect() {\n  transportInstances.forEach(t => t.emit(\"disconnect\"));\n  transportInstances = [];\n}\n\nfunction isTimeoutU2FError(u2fError) {\n  return u2fError.metaData.code === 5;\n}\n/**\n * U2F web Transport implementation\n * @example\n * import TransportU2F from \"@ledgerhq/hw-transport-u2f\";\n * ...\n * TransportU2F.create().then(transport => ...)\n */\n\n\nexport default class TransportU2F extends Transport {\n  /*\n   */\n\n  /*\n   */\n\n  /**\n   * static function to create a new Transport from a connected Ledger device discoverable via U2F (browser support)\n   */\n  static async open(_, _openTimeout = 5000) {\n    return new TransportU2F();\n  }\n\n  constructor() {\n    super();\n    this.scrambleKey = void 0;\n    this.unwrap = true;\n    transportInstances.push(this);\n  }\n  /**\n   * Exchange with the device using APDU protocol.\n   * @param apdu\n   * @returns a promise of apdu response\n   */\n\n\n  async exchange(apdu) {\n    try {\n      return await attemptExchange(apdu, this.exchangeTimeout, this.scrambleKey, this.unwrap);\n    } catch (e) {\n      const isU2FError = typeof e.metaData === \"object\";\n\n      if (isU2FError) {\n        if (isTimeoutU2FError(e)) {\n          emitDisconnect();\n        } // the wrapping make error more usable and \"printable\" to the end user.\n\n\n        throw wrapU2FTransportError(e, \"Failed to sign with Ledger device: U2F \" + e.metaData.type, \"U2F_\" + e.metaData.code);\n      } else {\n        throw e;\n      }\n    }\n  }\n  /**\n   */\n\n\n  setScrambleKey(scrambleKey) {\n    this.scrambleKey = Buffer.from(scrambleKey, \"ascii\");\n  }\n  /**\n   */\n\n\n  setUnwrap(unwrap) {\n    this.unwrap = unwrap;\n  }\n\n  close() {\n    // u2f have no way to clean things up\n    return Promise.resolve();\n  }\n\n}\nTransportU2F.isSupported = isSupported;\n\nTransportU2F.list = () => // this transport is not discoverable but we are going to guess if it is here with isSupported()\nisSupported().then(supported => supported ? [null] : []);\n\nTransportU2F.listen = observer => {\n  let unsubscribed = false;\n  isSupported().then(supported => {\n    if (unsubscribed) return;\n\n    if (supported) {\n      observer.next({\n        type: \"add\",\n        descriptor: null\n      });\n      observer.complete();\n    } else {\n      observer.error(new TransportError(\"U2F browser support is needed for Ledger. \" + \"Please use Chrome, Opera or Firefox with a U2F extension. \" + \"Also make sure you're on an HTTPS connection\", \"U2FNotSupported\"));\n    }\n  });\n  return {\n    unsubscribe: () => {\n      unsubscribed = true;\n    }\n  };\n};\n//# sourceMappingURL=TransportU2F.js.map","import EventEmitter from \"events\";\nimport { TransportRaceCondition, TransportError, StatusCodes, getAltStatusMessage, TransportStatusError } from \"@ledgerhq/errors\";\nexport { TransportError, TransportStatusError, StatusCodes, getAltStatusMessage };\n/**\n */\n\n/**\n * Transport defines the generic interface to share between node/u2f impl\n * A **Descriptor** is a parametric type that is up to be determined for the implementation.\n * it can be for instance an ID, an file path, a URL,...\n */\nexport default class Transport {\n  constructor() {\n    this.exchangeTimeout = 30000;\n    this.unresponsiveTimeout = 15000;\n    this._events = new EventEmitter();\n\n    this.send = async (cla, ins, p1, p2, data = Buffer.alloc(0), statusList = [StatusCodes.OK]) => {\n      if (data.length >= 256) {\n        throw new TransportError(\"data.length exceed 256 bytes limit. Got: \" + data.length, \"DataLengthTooBig\");\n      }\n\n      const response = await this.exchange(Buffer.concat([Buffer.from([cla, ins, p1, p2]), Buffer.from([data.length]), data]));\n      const sw = response.readUInt16BE(response.length - 2);\n\n      if (!statusList.some(s => s === sw)) {\n        throw new TransportStatusError(sw);\n      }\n\n      return response;\n    };\n\n    this.exchangeBusyPromise = void 0;\n\n    this.exchangeAtomicImpl = async f => {\n      if (this.exchangeBusyPromise) {\n        throw new TransportRaceCondition(\"An action was already pending on the Ledger device. Please deny or reconnect.\");\n      }\n\n      let resolveBusy;\n      const busyPromise = new Promise(r => {\n        resolveBusy = r;\n      });\n      this.exchangeBusyPromise = busyPromise;\n      let unresponsiveReached = false;\n      const timeout = setTimeout(() => {\n        unresponsiveReached = true;\n        this.emit(\"unresponsive\");\n      }, this.unresponsiveTimeout);\n\n      try {\n        const res = await f();\n\n        if (unresponsiveReached) {\n          this.emit(\"responsive\");\n        }\n\n        return res;\n      } finally {\n        clearTimeout(timeout);\n        if (resolveBusy) resolveBusy();\n        this.exchangeBusyPromise = null;\n      }\n    };\n\n    this._appAPIlock = null;\n  }\n\n  /**\n   * low level api to communicate with the device\n   * This method is for implementations to implement but should not be directly called.\n   * Instead, the recommanded way is to use send() method\n   * @param apdu the data to send\n   * @return a Promise of response data\n   */\n  exchange(_apdu) {\n    throw new Error(\"exchange not implemented\");\n  }\n  /**\n   * set the \"scramble key\" for the next exchanges with the device.\n   * Each App can have a different scramble key and they internally will set it at instanciation.\n   * @param key the scramble key\n   */\n\n\n  setScrambleKey(_key) {}\n  /**\n   * close the exchange with the device.\n   * @return a Promise that ends when the transport is closed.\n   */\n\n\n  close() {\n    return Promise.resolve();\n  }\n\n  /**\n   * Listen to an event on an instance of transport.\n   * Transport implementation can have specific events. Here is the common events:\n   * * `\"disconnect\"` : triggered if Transport is disconnected\n   */\n  on(eventName, cb) {\n    this._events.on(eventName, cb);\n  }\n  /**\n   * Stop listening to an event on an instance of transport.\n   */\n\n\n  off(eventName, cb) {\n    this._events.removeListener(eventName, cb);\n  }\n\n  emit(event, ...args) {\n    this._events.emit(event, ...args);\n  }\n  /**\n   * Enable or not logs of the binary exchange\n   */\n\n\n  setDebugMode() {\n    console.warn(\"setDebugMode is deprecated. use @ledgerhq/logs instead. No logs are emitted in this anymore.\");\n  }\n  /**\n   * Set a timeout (in milliseconds) for the exchange call. Only some transport might implement it. (e.g. U2F)\n   */\n\n\n  setExchangeTimeout(exchangeTimeout) {\n    this.exchangeTimeout = exchangeTimeout;\n  }\n  /**\n   * Define the delay before emitting \"unresponsive\" on an exchange that does not respond\n   */\n\n\n  setExchangeUnresponsiveTimeout(unresponsiveTimeout) {\n    this.unresponsiveTimeout = unresponsiveTimeout;\n  }\n  /**\n   * wrapper on top of exchange to simplify work of the implementation.\n   * @param cla\n   * @param ins\n   * @param p1\n   * @param p2\n   * @param data\n   * @param statusList is a list of accepted status code (shorts). [0x9000] by default\n   * @return a Promise of response buffer\n   */\n\n\n  /**\n   * create() allows to open the first descriptor available or\n   * throw if there is none or if timeout is reached.\n   * This is a light helper, alternative to using listen() and open() (that you may need for any more advanced usecase)\n   * @example\n  TransportFoo.create().then(transport => ...)\n   */\n  static create(openTimeout = 3000, listenTimeout) {\n    return new Promise((resolve, reject) => {\n      let found = false;\n      const sub = this.listen({\n        next: e => {\n          found = true;\n          if (sub) sub.unsubscribe();\n          if (listenTimeoutId) clearTimeout(listenTimeoutId);\n          this.open(e.descriptor, openTimeout).then(resolve, reject);\n        },\n        error: e => {\n          if (listenTimeoutId) clearTimeout(listenTimeoutId);\n          reject(e);\n        },\n        complete: () => {\n          if (listenTimeoutId) clearTimeout(listenTimeoutId);\n\n          if (!found) {\n            reject(new TransportError(this.ErrorMessage_NoDeviceFound, \"NoDeviceFound\"));\n          }\n        }\n      });\n      const listenTimeoutId = listenTimeout ? setTimeout(() => {\n        sub.unsubscribe();\n        reject(new TransportError(this.ErrorMessage_ListenTimeout, \"ListenTimeout\"));\n      }, listenTimeout) : null;\n    });\n  }\n\n  decorateAppAPIMethods(self, methods, scrambleKey) {\n    for (let methodName of methods) {\n      self[methodName] = this.decorateAppAPIMethod(methodName, self[methodName], self, scrambleKey);\n    }\n  }\n\n  decorateAppAPIMethod(methodName, f, ctx, scrambleKey) {\n    return async (...args) => {\n      const {\n        _appAPIlock\n      } = this;\n\n      if (_appAPIlock) {\n        return Promise.reject(new TransportError(\"Ledger Device is busy (lock \" + _appAPIlock + \")\", \"TransportLocked\"));\n      }\n\n      try {\n        this._appAPIlock = methodName;\n        this.setScrambleKey(scrambleKey);\n        return await f.apply(ctx, args);\n      } finally {\n        this._appAPIlock = null;\n      }\n    };\n  }\n\n}\nTransport.isSupported = void 0;\nTransport.list = void 0;\nTransport.listen = void 0;\nTransport.open = void 0;\nTransport.ErrorMessage_ListenTimeout = \"No Ledger device found (timeout)\";\nTransport.ErrorMessage_NoDeviceFound = \"No Ledger device found\";\n//# sourceMappingURL=Transport.js.map","/**\n * A Log object\n */\nlet id = 0;\nconst subscribers = [];\n/**\n * log something\n * @param type a namespaced identifier of the log (it is not a level like \"debug\", \"error\" but more like \"apdu-in\", \"apdu-out\", etc...)\n * @param message a clear message of the log associated to the type\n */\n\nexport const log = (type, message, data) => {\n  const obj = {\n    type,\n    id: String(++id),\n    date: new Date()\n  };\n  if (message) obj.message = message;\n  if (data) obj.data = data;\n  dispatch(obj);\n};\n/**\n * listen to logs.\n * @param cb that is called for each future log() with the Log object\n * @return a function that can be called to unsubscribe the listener\n */\n\nexport const listen = cb => {\n  subscribers.push(cb);\n  return () => {\n    const i = subscribers.indexOf(cb);\n\n    if (i !== -1) {\n      // equivalent of subscribers.splice(i, 1) // https://twitter.com/Rich_Harris/status/1125850391155965952\n      subscribers[i] = subscribers[subscribers.length - 1];\n      subscribers.pop();\n    }\n  };\n};\n\nfunction dispatch(log) {\n  for (let i = 0; i < subscribers.length; i++) {\n    try {\n      subscribers[i](log);\n    } catch (e) {\n      console.error(e);\n    }\n  }\n} // for debug purpose\n\n\nglobal.__ledgerLogsListen = listen;\n//# sourceMappingURL=index.js.map","function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }\n\nfunction _nonIterableRest() { throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\n\nfunction _iterableToArrayLimit(arr, i) { if (typeof Symbol === \"undefined\" || !(Symbol.iterator in Object(arr))) return; var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i[\"return\"] != null) _i[\"return\"](); } finally { if (_d) throw _e; } } return _arr; }\n\nfunction _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }\n\nfunction _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread(); }\n\nfunction _nonIterableSpread() { throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(n); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _iterableToArray(iter) { if (typeof Symbol !== \"undefined\" && Symbol.iterator in Object(iter)) return Array.from(iter); }\n\nfunction _arrayWithoutHoles(arr) { if (Array.isArray(arr)) return _arrayLikeToArray(arr); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nfunction asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }\n\nfunction _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err); } _next(undefined); }); }; }\n\nimport 'web3-provider-engine';\nimport 'web3-provider-engine/subproviders/rpc';\nimport 'web3-provider-engine/subproviders/hooked-wallet';\nimport 'web3-provider-engine/subproviders/subscriptions';\nimport 'web3-provider-engine/subproviders/filters';\nimport { c as createProvider, i as isValidPath, g as generateAddresses } from './hd-wallet-51f07955.js';\nimport 'hdkey';\nimport 'ethereumjs-util';\nimport buffer from 'buffer';\nimport { Transaction } from 'ethereumjs-tx';\nimport TransportU2F from '@ledgerhq/hw-transport-u2f';\nimport Eth from '@ledgerhq/hw-app-eth';\nvar ledgerIcon = \"\\n\\t<svg xmlns=\\\"http://www.w3.org/2000/svg\\\" viewBox=\\\"0 0 450 450\\\" width=\\\"37\\\" height=\\\"37\\\"><style>.st0{fill:currentColor}</style><g id=\\\"squares_1_\\\"><path class=\\\"st0\\\" d=\\\"M578.2 392.7V24.3h25.6v344.1h175.3v24.3H578.2zm327.5 5.1c-39.7 0-70.4-12.8-93.4-37.1-21.7-24.3-33.3-58.8-33.3-103.6 0-43.5 10.2-79.3 32-104.9 21.7-26.9 49.9-39.7 87-39.7 32 0 57.6 11.5 76.8 33.3 19.2 23 28.1 53.7 28.1 92.1v20.5H804.6c0 37.1 9 66.5 26.9 85.7 16.6 20.5 42.2 29.4 74.2 29.4 15.3 0 29.4-1.3 40.9-3.8 11.5-2.6 26.9-6.4 44.8-14.1v24.3c-15.3 6.4-29.4 11.5-42.2 14.1-14.3 2.6-28.9 3.9-43.5 3.8zM898 135.6c-26.9 0-47.3 9-64 25.6-15.3 17.9-25.6 42.2-28.1 75.5h168.9c0-32-6.4-56.3-20.5-74.2-12.8-18-32-26.9-56.3-26.9zm238-21.8c19.2 0 37.1 3.8 51.2 10.2 14.1 7.7 26.9 19.2 38.4 37.1h1.3c-1.3-21.7-1.3-42.2-1.3-62.7V0h24.3v392.7h-16.6l-6.4-42.2c-20.5 30.7-51.2 47.3-89.6 47.3s-66.5-11.5-87-35.8c-20.5-23-29.4-57.6-29.4-102.3 0-47.3 10.2-83.2 29.4-108.7 19.2-25.6 48.6-37.2 85.7-37.2zm0 21.8c-29.4 0-52.4 10.2-67.8 32-15.3 20.5-23 51.2-23 92.1 0 78 30.7 116.4 90.8 116.4 30.7 0 53.7-9 67.8-26.9 14.1-17.9 21.7-47.3 21.7-89.6v-3.8c0-42.2-7.7-72.9-21.7-90.8-12.8-20.5-35.8-29.4-67.8-29.4zm379.9-16.6v17.9l-56.3 3.8c15.3 19.2 23 39.7 23 61.4 0 26.9-9 47.3-26.9 64-17.9 16.6-40.9 24.3-70.4 24.3-12.8 0-21.7 0-25.6-1.3-10.2 5.1-17.9 11.5-23 17.9-5.1 7.7-7.7 14.1-7.7 23s3.8 15.3 10.2 19.2c6.4 3.8 17.9 6.4 33.3 6.4h47.3c29.4 0 52.4 6.4 67.8 17.9s24.3 29.4 24.3 53.7c0 29.4-11.5 51.2-34.5 66.5-23 15.3-56.3 23-99.8 23-34.5 0-61.4-6.4-80.6-20.5-19.2-12.8-28.1-32-28.1-55 0-19.2 6.4-34.5 17.9-47.3s28.1-20.5 47.3-25.6c-7.7-3.8-15.3-9-19.2-15.3-5-6.2-7.7-13.8-7.7-21.7 0-17.9 11.5-34.5 34.5-48.6-15.3-6.4-28.1-16.6-37.1-30.7-9-14.1-12.8-30.7-12.8-48.6 0-26.9 9-49.9 25.6-66.5 17.9-16.6 40.9-24.3 70.4-24.3 17.9 0 32 1.3 42.2 5.1h85.7v1.3h.2zm-222.6 319.8c0 37.1 28.1 56.3 84.4 56.3 71.6 0 107.5-23 107.5-69.1 0-16.6-5.1-28.1-16.6-35.8-11.5-7.7-29.4-11.5-55-11.5h-44.8c-49.9 1.2-75.5 20.4-75.5 60.1zm21.8-235.4c0 21.7 6.4 37.1 19.2 49.9 12.8 11.5 29.4 17.9 51.2 17.9 23 0 40.9-6.4 52.4-17.9 12.8-11.5 17.9-28.1 17.9-49.9 0-23-6.4-40.9-19.2-52.4-12.8-11.5-29.4-17.9-52.4-17.9-21.7 0-39.7 6.4-51.2 19.2-12.8 11.4-17.9 29.3-17.9 51.1z\\\"/><path class=\\\"st0\\\" d=\\\"M1640 397.8c-39.7 0-70.4-12.8-93.4-37.1-21.7-24.3-33.3-58.8-33.3-103.6 0-43.5 10.2-79.3 32-104.9 21.7-26.9 49.9-39.7 87-39.7 32 0 57.6 11.5 76.8 33.3 19.2 23 28.1 53.7 28.1 92.1v20.5h-197c0 37.1 9 66.5 26.9 85.7 16.6 20.5 42.2 29.4 74.2 29.4 15.3 0 29.4-1.3 40.9-3.8 11.5-2.6 26.9-6.4 44.8-14.1v24.3c-15.3 6.4-29.4 11.5-42.2 14.1-14.1 2.6-28.2 3.8-44.8 3.8zm-6.4-262.2c-26.9 0-47.3 9-64 25.6-15.3 17.9-25.6 42.2-28.1 75.5h168.9c0-32-6.4-56.3-20.5-74.2-12.8-18-32-26.9-56.3-26.9zm245.6-21.8c11.5 0 24.3 1.3 37.1 3.8l-5.1 24.3c-11.8-2.6-23.8-3.9-35.8-3.8-23 0-42.2 10.2-57.6 29.4-15.3 20.5-23 44.8-23 75.5v149.7h-25.6V119h21.7l2.6 49.9h1.3c11.5-20.5 23-34.5 35.8-42.2 15.4-9 30.7-12.9 48.6-12.9zM333.9 12.8h-183v245.6h245.6V76.7c.1-34.5-28.1-63.9-62.6-63.9zm-239.2 0H64c-34.5 0-64 28.1-64 64v30.7h94.7V12.8zM0 165h94.7v94.7H0V165zm301.9 245.6h30.7c34.5 0 64-28.1 64-64V316h-94.7v94.6zm-151-94.6h94.7v94.7h-94.7V316zM0 316v30.7c0 34.5 28.1 64 64 64h30.7V316H0z\\\"/></g></svg>\\n\";\nvar LEDGER_LIVE_PATH = \"m/44'/60'\";\nvar ACCOUNTS_TO_GET = 5;\n\nfunction ledger(options) {\n  var rpcUrl = options.rpcUrl,\n      LedgerTransport = options.LedgerTransport,\n      networkId = options.networkId,\n      preferred = options.preferred,\n      label = options.label,\n      iconSrc = options.iconSrc,\n      svg = options.svg;\n  return {\n    name: label || 'Ledger',\n    svg: svg || ledgerIcon,\n    iconSrc: iconSrc,\n    wallet: function () {\n      var _wallet = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee4(helpers) {\n        var BigNumber, networkName, provider;\n        return regeneratorRuntime.wrap(function _callee4$(_context4) {\n          while (1) {\n            switch (_context4.prev = _context4.next) {\n              case 0:\n                BigNumber = helpers.BigNumber, networkName = helpers.networkName;\n                _context4.next = 3;\n                return ledgerProvider({\n                  rpcUrl: rpcUrl,\n                  networkId: networkId,\n                  LedgerTransport: LedgerTransport,\n                  BigNumber: BigNumber,\n                  networkName: networkName\n                });\n\n              case 3:\n                provider = _context4.sent;\n                return _context4.abrupt(\"return\", {\n                  provider: provider,\n                  \"interface\": {\n                    name: 'Ledger',\n                    connect: provider.enable,\n                    disconnect: provider.disconnect,\n                    address: {\n                      get: function () {\n                        var _get = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee() {\n                          return regeneratorRuntime.wrap(function _callee$(_context) {\n                            while (1) {\n                              switch (_context.prev = _context.next) {\n                                case 0:\n                                  return _context.abrupt(\"return\", provider.getPrimaryAddress());\n\n                                case 1:\n                                case \"end\":\n                                  return _context.stop();\n                              }\n                            }\n                          }, _callee);\n                        }));\n\n                        function get() {\n                          return _get.apply(this, arguments);\n                        }\n\n                        return get;\n                      }()\n                    },\n                    network: {\n                      get: function () {\n                        var _get2 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2() {\n                          return regeneratorRuntime.wrap(function _callee2$(_context2) {\n                            while (1) {\n                              switch (_context2.prev = _context2.next) {\n                                case 0:\n                                  return _context2.abrupt(\"return\", networkId);\n\n                                case 1:\n                                case \"end\":\n                                  return _context2.stop();\n                              }\n                            }\n                          }, _callee2);\n                        }));\n\n                        function get() {\n                          return _get2.apply(this, arguments);\n                        }\n\n                        return get;\n                      }()\n                    },\n                    balance: {\n                      get: function () {\n                        var _get3 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee3() {\n                          var address;\n                          return regeneratorRuntime.wrap(function _callee3$(_context3) {\n                            while (1) {\n                              switch (_context3.prev = _context3.next) {\n                                case 0:\n                                  address = provider.getPrimaryAddress();\n                                  return _context3.abrupt(\"return\", address && provider.getBalance(address));\n\n                                case 2:\n                                case \"end\":\n                                  return _context3.stop();\n                              }\n                            }\n                          }, _callee3);\n                        }));\n\n                        function get() {\n                          return _get3.apply(this, arguments);\n                        }\n\n                        return get;\n                      }()\n                    }\n                  }\n                });\n\n              case 5:\n              case \"end\":\n                return _context4.stop();\n            }\n          }\n        }, _callee4);\n      }));\n\n      function wallet(_x) {\n        return _wallet.apply(this, arguments);\n      }\n\n      return wallet;\n    }(),\n    type: 'hardware',\n    desktop: true,\n    mobile: true,\n    osExclusions: ['iOS'],\n    preferred: preferred\n  };\n}\n\nfunction ledgerProvider(_x2) {\n  return _ledgerProvider.apply(this, arguments);\n}\n\nfunction _ledgerProvider() {\n  _ledgerProvider = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee12(options) {\n    var networkId, rpcUrl, LedgerTransport, BigNumber, networkName, dPath, addressToPath, enabled, customPath, account, provider, transport, eth, disconnect, setPath, _setPath, isCustomPath, enable, addresses, setPrimaryAccount, getAddress, _getAddress, getPublicKey, _getPublicKey, getPrimaryAddress, getMoreAccounts, _getMoreAccounts, _getAccounts, _getAccounts2, getBalances, getBalance, _signTransaction, _signTransaction2;\n\n    return regeneratorRuntime.wrap(function _callee12$(_context12) {\n      while (1) {\n        switch (_context12.prev = _context12.next) {\n          case 0:\n            _signTransaction2 = function _signTransaction4() {\n              _signTransaction2 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee11(transactionData) {\n                var path, transaction, ledgerResult;\n                return regeneratorRuntime.wrap(function _callee11$(_context11) {\n                  while (1) {\n                    switch (_context11.prev = _context11.next) {\n                      case 0:\n                        path = _toConsumableArray(addressToPath.values())[0];\n                        _context11.prev = 1;\n                        transaction = new Transaction(transactionData, {\n                          chain: networkName(networkId)\n                        });\n                        transaction.raw[6] = buffer.Buffer.from([networkId]); // v\n\n                        transaction.raw[7] = buffer.Buffer.from([]); // r\n\n                        transaction.raw[8] = buffer.Buffer.from([]); // s\n\n                        _context11.next = 8;\n                        return eth.signTransaction(path, transaction.serialize().toString('hex'));\n\n                      case 8:\n                        ledgerResult = _context11.sent;\n                        transaction.v = buffer.Buffer.from(ledgerResult.v, 'hex');\n                        transaction.r = buffer.Buffer.from(ledgerResult.r, 'hex');\n                        transaction.s = buffer.Buffer.from(ledgerResult.s, 'hex');\n                        return _context11.abrupt(\"return\", \"0x\".concat(transaction.serialize().toString('hex')));\n\n                      case 15:\n                        _context11.prev = 15;\n                        _context11.t0 = _context11[\"catch\"](1);\n                        throw _context11.t0;\n\n                      case 18:\n                        _context11.prev = 18;\n                        transport.close();\n                        return _context11.finish(18);\n\n                      case 21:\n                      case \"end\":\n                        return _context11.stop();\n                    }\n                  }\n                }, _callee11, null, [[1, 15, 18, 21]]);\n              }));\n              return _signTransaction2.apply(this, arguments);\n            };\n\n            _signTransaction = function _signTransaction3(_x8) {\n              return _signTransaction2.apply(this, arguments);\n            };\n\n            getBalance = function _getBalance(address) {\n              return new Promise(function (resolve, reject) {\n                provider.sendAsync({\n                  jsonrpc: '2.0',\n                  method: 'eth_getBalance',\n                  params: [address, 'latest'],\n                  id: 42\n                }, function (e, res) {\n                  e && reject(e);\n                  var result = res && res.result;\n\n                  if (result != null) {\n                    resolve(new BigNumber(result).toString(10));\n                  } else {\n                    resolve(null);\n                  }\n                });\n              });\n            };\n\n            getBalances = function _getBalances(addresses) {\n              return Promise.all(addresses.map(function (address) {\n                return new Promise( /*#__PURE__*/function () {\n                  var _ref3 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee5(resolve) {\n                    var balance;\n                    return regeneratorRuntime.wrap(function _callee5$(_context5) {\n                      while (1) {\n                        switch (_context5.prev = _context5.next) {\n                          case 0:\n                            _context5.next = 2;\n                            return getBalance(address);\n\n                          case 2:\n                            balance = _context5.sent;\n                            resolve({\n                              address: address,\n                              balance: balance\n                            });\n\n                          case 4:\n                          case \"end\":\n                            return _context5.stop();\n                        }\n                      }\n                    }, _callee5);\n                  }));\n\n                  return function (_x7) {\n                    return _ref3.apply(this, arguments);\n                  };\n                }());\n              }));\n            };\n\n            _getAccounts2 = function _getAccounts4() {\n              _getAccounts2 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee10(getMore) {\n                var currentAccounts, paths, i, _i2, _paths, path, res, addressInfo;\n\n                return regeneratorRuntime.wrap(function _callee10$(_context10) {\n                  while (1) {\n                    switch (_context10.prev = _context10.next) {\n                      case 0:\n                        if (enabled) {\n                          _context10.next = 2;\n                          break;\n                        }\n\n                        return _context10.abrupt(\"return\", []);\n\n                      case 2:\n                        if (!(addressToPath.size > 0 && !getMore)) {\n                          _context10.next = 4;\n                          break;\n                        }\n\n                        return _context10.abrupt(\"return\", addresses());\n\n                      case 4:\n                        if (dPath === '') {\n                          dPath = LEDGER_LIVE_PATH;\n                        }\n\n                        if (!(dPath === LEDGER_LIVE_PATH)) {\n                          _context10.next = 21;\n                          break;\n                        }\n\n                        currentAccounts = addressToPath.size;\n                        paths = [];\n\n                        for (i = currentAccounts; i < ACCOUNTS_TO_GET + currentAccounts; i++) {\n                          paths.push(\"\".concat(LEDGER_LIVE_PATH, \"/\").concat(i, \"'/0/0\"));\n                        }\n\n                        _i2 = 0, _paths = paths;\n\n                      case 10:\n                        if (!(_i2 < _paths.length)) {\n                          _context10.next = 19;\n                          break;\n                        }\n\n                        path = _paths[_i2];\n                        _context10.next = 14;\n                        return eth.getAddress(path);\n\n                      case 14:\n                        res = _context10.sent;\n                        addressToPath.set(res.address, path);\n\n                      case 16:\n                        _i2++;\n                        _context10.next = 10;\n                        break;\n\n                      case 19:\n                        _context10.next = 33;\n                        break;\n\n                      case 21:\n                        if (account) {\n                          _context10.next = 31;\n                          break;\n                        }\n\n                        _context10.prev = 22;\n                        _context10.next = 25;\n                        return getPublicKey();\n\n                      case 25:\n                        account = _context10.sent;\n                        _context10.next = 31;\n                        break;\n\n                      case 28:\n                        _context10.prev = 28;\n                        _context10.t0 = _context10[\"catch\"](22);\n                        throw _context10.t0;\n\n                      case 31:\n                        addressInfo = generateAddresses(account, addressToPath.size);\n                        addressInfo.forEach(function (_ref4) {\n                          var dPath = _ref4.dPath,\n                              address = _ref4.address;\n                          addressToPath.set(address, dPath);\n                        });\n\n                      case 33:\n                        return _context10.abrupt(\"return\", addresses());\n\n                      case 34:\n                      case \"end\":\n                        return _context10.stop();\n                    }\n                  }\n                }, _callee10, null, [[22, 28]]);\n              }));\n              return _getAccounts2.apply(this, arguments);\n            };\n\n            _getAccounts = function _getAccounts3(_x6) {\n              return _getAccounts2.apply(this, arguments);\n            };\n\n            _getMoreAccounts = function _getMoreAccounts3() {\n              _getMoreAccounts = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee9() {\n                var accounts;\n                return regeneratorRuntime.wrap(function _callee9$(_context9) {\n                  while (1) {\n                    switch (_context9.prev = _context9.next) {\n                      case 0:\n                        _context9.next = 2;\n                        return _getAccounts(true);\n\n                      case 2:\n                        accounts = _context9.sent;\n                        return _context9.abrupt(\"return\", accounts && getBalances(accounts));\n\n                      case 4:\n                      case \"end\":\n                        return _context9.stop();\n                    }\n                  }\n                }, _callee9);\n              }));\n              return _getMoreAccounts.apply(this, arguments);\n            };\n\n            getMoreAccounts = function _getMoreAccounts2() {\n              return _getMoreAccounts.apply(this, arguments);\n            };\n\n            getPrimaryAddress = function _getPrimaryAddress() {\n              return enabled ? addresses()[0] : undefined;\n            };\n\n            _getPublicKey = function _getPublicKey3() {\n              _getPublicKey = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee8() {\n                var result, publicKey, chainCode;\n                return regeneratorRuntime.wrap(function _callee8$(_context8) {\n                  while (1) {\n                    switch (_context8.prev = _context8.next) {\n                      case 0:\n                        if (dPath) {\n                          _context8.next = 2;\n                          break;\n                        }\n\n                        throw new Error('a derivation path is needed to get the public key');\n\n                      case 2:\n                        _context8.prev = 2;\n                        _context8.next = 5;\n                        return eth.getAddress(dPath, false, true);\n\n                      case 5:\n                        result = _context8.sent;\n                        publicKey = result.publicKey, chainCode = result.chainCode;\n                        account = {\n                          publicKey: publicKey,\n                          chainCode: chainCode,\n                          path: dPath\n                        };\n                        return _context8.abrupt(\"return\", account);\n\n                      case 11:\n                        _context8.prev = 11;\n                        _context8.t0 = _context8[\"catch\"](2);\n                        throw new Error('There was a problem accessing your Ledger accounts.');\n\n                      case 14:\n                      case \"end\":\n                        return _context8.stop();\n                    }\n                  }\n                }, _callee8, null, [[2, 11]]);\n              }));\n              return _getPublicKey.apply(this, arguments);\n            };\n\n            getPublicKey = function _getPublicKey2() {\n              return _getPublicKey.apply(this, arguments);\n            };\n\n            _getAddress = function _getAddress3() {\n              _getAddress = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee7(path) {\n                var result;\n                return regeneratorRuntime.wrap(function _callee7$(_context7) {\n                  while (1) {\n                    switch (_context7.prev = _context7.next) {\n                      case 0:\n                        _context7.prev = 0;\n                        _context7.next = 3;\n                        return eth.getAddress(path);\n\n                      case 3:\n                        result = _context7.sent;\n                        return _context7.abrupt(\"return\", result.address);\n\n                      case 7:\n                        _context7.prev = 7;\n                        _context7.t0 = _context7[\"catch\"](0);\n\n                      case 9:\n                      case \"end\":\n                        return _context7.stop();\n                    }\n                  }\n                }, _callee7, null, [[0, 7]]);\n              }));\n              return _getAddress.apply(this, arguments);\n            };\n\n            getAddress = function _getAddress2(_x5) {\n              return _getAddress.apply(this, arguments);\n            };\n\n            setPrimaryAccount = function _setPrimaryAccount(address) {\n              // make a copy and put in an array\n              var accounts = _toConsumableArray(addressToPath.entries());\n\n              var accountIndex = accounts.findIndex(function (_ref) {\n                var _ref2 = _slicedToArray(_ref, 1),\n                    accountAddress = _ref2[0];\n\n                return accountAddress === address;\n              }); // pull the item at the account index out of the array and place at the front\n\n              accounts.unshift(accounts.splice(accountIndex, 1)[0]); // reassign addressToPath to new ordered accounts\n\n              addressToPath = new Map(accounts);\n            };\n\n            addresses = function _addresses() {\n              return Array.from(addressToPath.keys());\n            };\n\n            enable = function _enable() {\n              enabled = true;\n              return _getAccounts();\n            };\n\n            isCustomPath = function _isCustomPath() {\n              return customPath;\n            };\n\n            _setPath = function _setPath3() {\n              _setPath = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee6(path, custom) {\n                var address;\n                return regeneratorRuntime.wrap(function _callee6$(_context6) {\n                  while (1) {\n                    switch (_context6.prev = _context6.next) {\n                      case 0:\n                        if (isValidPath(path)) {\n                          _context6.next = 2;\n                          break;\n                        }\n\n                        return _context6.abrupt(\"return\", false);\n\n                      case 2:\n                        if (path !== dPath) {\n                          // clear any exsting addresses if different path\n                          addressToPath = new Map();\n                        }\n\n                        if (!custom) {\n                          _context6.next = 10;\n                          break;\n                        }\n\n                        _context6.next = 6;\n                        return getAddress(path);\n\n                      case 6:\n                        address = _context6.sent;\n                        addressToPath.set(address, path);\n                        customPath = true;\n                        return _context6.abrupt(\"return\", true);\n\n                      case 10:\n                        customPath = false;\n                        dPath = path;\n                        return _context6.abrupt(\"return\", true);\n\n                      case 13:\n                      case \"end\":\n                        return _context6.stop();\n                    }\n                  }\n                }, _callee6);\n              }));\n              return _setPath.apply(this, arguments);\n            };\n\n            setPath = function _setPath2(_x3, _x4) {\n              return _setPath.apply(this, arguments);\n            };\n\n            disconnect = function _disconnect() {\n              transport.close();\n              dPath = '';\n              addressToPath = new Map();\n              enabled = false;\n              provider.stop();\n            };\n\n            networkId = options.networkId, rpcUrl = options.rpcUrl, LedgerTransport = options.LedgerTransport, BigNumber = options.BigNumber, networkName = options.networkName;\n            dPath = '';\n            addressToPath = new Map();\n            enabled = false;\n            customPath = false;\n            provider = createProvider({\n              getAccounts: function getAccounts(callback) {\n                _getAccounts().then(function (res) {\n                  return callback(null, res);\n                })[\"catch\"](function (err) {\n                  return callback(err, null);\n                });\n              },\n              signTransaction: function signTransaction(transactionData, callback) {\n                _signTransaction(transactionData).then(function (res) {\n                  return callback(null, res);\n                })[\"catch\"](function (err) {\n                  return callback(err, null);\n                });\n              },\n              rpcUrl: rpcUrl\n            });\n            provider.setPath = setPath;\n            provider.dPath = dPath;\n            provider.enable = enable;\n            provider.setPrimaryAccount = setPrimaryAccount;\n            provider.getPrimaryAddress = getPrimaryAddress;\n            provider.getAccounts = _getAccounts;\n            provider.getMoreAccounts = getMoreAccounts;\n            provider.getBalance = getBalance;\n            provider.getBalances = getBalances;\n            provider.send = provider.sendAsync;\n            provider.disconnect = disconnect;\n            provider.isCustomPath = isCustomPath;\n            _context12.prev = 38;\n\n            if (!LedgerTransport) {\n              _context12.next = 45;\n              break;\n            }\n\n            _context12.next = 42;\n            return LedgerTransport.create();\n\n          case 42:\n            _context12.t0 = _context12.sent;\n            _context12.next = 48;\n            break;\n\n          case 45:\n            _context12.next = 47;\n            return TransportU2F.create();\n\n          case 47:\n            _context12.t0 = _context12.sent;\n\n          case 48:\n            transport = _context12.t0;\n            eth = new Eth(transport);\n            _context12.next = 55;\n            break;\n\n          case 52:\n            _context12.prev = 52;\n            _context12.t1 = _context12[\"catch\"](38);\n            throw new Error('Error connecting to Ledger wallet');\n\n          case 55:\n            return _context12.abrupt(\"return\", provider);\n\n          case 56:\n          case \"end\":\n            return _context12.stop();\n        }\n      }\n    }, _callee12, null, [[38, 52]]);\n  }));\n  return _ledgerProvider.apply(this, arguments);\n}\n\nexport default ledger;","'use strict';\nmodule.exports = require( './lib/u2f-api' );","// Copyright 2014 Google Inc. All rights reserved\n//\n// Use of this source code is governed by a BSD-style\n// license that can be found in the LICENSE file or at\n// https://developers.google.com/open-source/licenses/bsd\n\n/**\n * @fileoverview The U2F api.\n */\n\n'use strict';\n\n/** Namespace for the U2F api.\n * @type {Object}\n */\nvar u2f = u2f || {};\n\nmodule.exports = u2f; // Adaptation for u2f-api package\n\n/**\n * The U2F extension id\n * @type {string}\n * @const\n */\nu2f.EXTENSION_ID = 'kmendfapggjehodndflmmgagdbamhnfd';\n\n/**\n * Message types for messsages to/from the extension\n * @const\n * @enum {string}\n */\nu2f.MessageTypes = {\n  'U2F_REGISTER_REQUEST': 'u2f_register_request',\n  'U2F_SIGN_REQUEST': 'u2f_sign_request',\n  'U2F_REGISTER_RESPONSE': 'u2f_register_response',\n  'U2F_SIGN_RESPONSE': 'u2f_sign_response'\n};\n\n/**\n * Response status codes\n * @const\n * @enum {number}\n */\nu2f.ErrorCodes = {\n  'OK': 0,\n  'OTHER_ERROR': 1,\n  'BAD_REQUEST': 2,\n  'CONFIGURATION_UNSUPPORTED': 3,\n  'DEVICE_INELIGIBLE': 4,\n  'TIMEOUT': 5\n};\n\n/**\n * A message type for registration requests\n * @typedef {{\n *   type: u2f.MessageTypes,\n *   signRequests: Array.<u2f.SignRequest>,\n *   registerRequests: ?Array.<u2f.RegisterRequest>,\n *   timeoutSeconds: ?number,\n *   requestId: ?number\n * }}\n */\nu2f.Request;\n\n/**\n * A message for registration responses\n * @typedef {{\n *   type: u2f.MessageTypes,\n *   responseData: (u2f.Error | u2f.RegisterResponse | u2f.SignResponse),\n *   requestId: ?number\n * }}\n */\nu2f.Response;\n\n/**\n * An error object for responses\n * @typedef {{\n *   errorCode: u2f.ErrorCodes,\n *   errorMessage: ?string\n * }}\n */\nu2f.Error;\n\n/**\n * Data object for a single sign request.\n * @typedef {{\n *   version: string,\n *   challenge: string,\n *   keyHandle: string,\n *   appId: string\n * }}\n */\nu2f.SignRequest;\n\n/**\n * Data object for a sign response.\n * @typedef {{\n *   keyHandle: string,\n *   signatureData: string,\n *   clientData: string\n * }}\n */\nu2f.SignResponse;\n\n/**\n * Data object for a registration request.\n * @typedef {{\n *   version: string,\n *   challenge: string,\n *   appId: string\n * }}\n */\nu2f.RegisterRequest;\n\n/**\n * Data object for a registration response.\n * @typedef {{\n *   registrationData: string,\n *   clientData: string\n * }}\n */\nu2f.RegisterResponse;\n\n\n// Low level MessagePort API support\n\n/**\n * Call MessagePort disconnect\n */\nu2f.disconnect = function() {\n  if (u2f.port_ && u2f.port_.port_) {\n    u2f.port_.port_.disconnect();\n    u2f.port_ = null;\n  }\n};\n\n/**\n * Sets up a MessagePort to the U2F extension using the\n * available mechanisms.\n * @param {function((MessagePort|u2f.WrappedChromeRuntimePort_))} callback\n */\nu2f.getMessagePort = function(callback) {\n  if (typeof chrome != 'undefined' && chrome.runtime) {\n    // The actual message here does not matter, but we need to get a reply\n    // for the callback to run. Thus, send an empty signature request\n    // in order to get a failure response.\n    var msg = {\n      type: u2f.MessageTypes.U2F_SIGN_REQUEST,\n      signRequests: []\n    };\n    chrome.runtime.sendMessage(u2f.EXTENSION_ID, msg, function() {\n      if (!chrome.runtime.lastError) {\n        // We are on a whitelisted origin and can talk directly\n        // with the extension.\n        u2f.getChromeRuntimePort_(callback);\n      } else {\n        // chrome.runtime was available, but we couldn't message\n        // the extension directly, use iframe\n        u2f.getIframePort_(callback);\n      }\n    });\n  } else {\n    // chrome.runtime was not available at all, which is normal\n    // when this origin doesn't have access to any extensions.\n    u2f.getIframePort_(callback);\n  }\n};\n\n/**\n * Connects directly to the extension via chrome.runtime.connect\n * @param {function(u2f.WrappedChromeRuntimePort_)} callback\n * @private\n */\nu2f.getChromeRuntimePort_ = function(callback) {\n  var port = chrome.runtime.connect(u2f.EXTENSION_ID,\n    {'includeTlsChannelId': true});\n  setTimeout(function() {\n    callback(null, new u2f.WrappedChromeRuntimePort_(port));\n  }, 0);\n};\n\n/**\n * A wrapper for chrome.runtime.Port that is compatible with MessagePort.\n * @param {Port} port\n * @constructor\n * @private\n */\nu2f.WrappedChromeRuntimePort_ = function(port) {\n  this.port_ = port;\n};\n\n/**\n * Posts a message on the underlying channel.\n * @param {Object} message\n */\nu2f.WrappedChromeRuntimePort_.prototype.postMessage = function(message) {\n  this.port_.postMessage(message);\n};\n\n/**\n * Emulates the HTML 5 addEventListener interface. Works only for the\n * onmessage event, which is hooked up to the chrome.runtime.Port.onMessage.\n * @param {string} eventName\n * @param {function({data: Object})} handler\n */\nu2f.WrappedChromeRuntimePort_.prototype.addEventListener =\n    function(eventName, handler) {\n  var name = eventName.toLowerCase();\n  if (name == 'message' || name == 'onmessage') {\n    this.port_.onMessage.addListener(function(message) {\n      // Emulate a minimal MessageEvent object\n      handler({'data': message});\n    });\n  } else {\n    console.error('WrappedChromeRuntimePort only supports onMessage');\n  }\n};\n\n/**\n * Sets up an embedded trampoline iframe, sourced from the extension.\n * @param {function(MessagePort)} callback\n * @private\n */\nu2f.getIframePort_ = function(callback) {\n  // Create the iframe\n  var iframeOrigin = 'chrome-extension://' + u2f.EXTENSION_ID;\n  var iframe = document.createElement('iframe');\n  iframe.src = iframeOrigin + '/u2f-comms.html';\n  iframe.setAttribute('style', 'display:none');\n  document.body.appendChild(iframe);\n\n  var hasCalledBack = false;\n\n  var channel = new MessageChannel();\n  var ready = function(message) {\n    if (message.data == 'ready') {\n      channel.port1.removeEventListener('message', ready);\n      if (!hasCalledBack)\n      {\n        hasCalledBack = true;\n        callback(null, channel.port1);\n      }\n    } else {\n      console.error('First event on iframe port was not \"ready\"');\n    }\n  };\n  channel.port1.addEventListener('message', ready);\n  channel.port1.start();\n\n  iframe.addEventListener('load', function() {\n    // Deliver the port to the iframe and initialize\n    iframe.contentWindow.postMessage('init', iframeOrigin, [channel.port2]);\n  });\n\n  // Give this 200ms to initialize, after that, we treat this method as failed\n  setTimeout(function() {\n    if (!hasCalledBack)\n    {\n      hasCalledBack = true;\n      callback(new Error(\"IFrame extension not supported\"));\n    }\n  }, 200);\n};\n\n\n// High-level JS API\n\n/**\n * Default extension response timeout in seconds.\n * @const\n */\nu2f.EXTENSION_TIMEOUT_SEC = 30;\n\n/**\n * A singleton instance for a MessagePort to the extension.\n * @type {MessagePort|u2f.WrappedChromeRuntimePort_}\n * @private\n */\nu2f.port_ = null;\n\n/**\n * Callbacks waiting for a port\n * @type {Array.<function((MessagePort|u2f.WrappedChromeRuntimePort_))>}\n * @private\n */\nu2f.waitingForPort_ = [];\n\n/**\n * A counter for requestIds.\n * @type {number}\n * @private\n */\nu2f.reqCounter_ = 0;\n\n/**\n * A map from requestIds to client callbacks\n * @type {Object.<number,(function((u2f.Error|u2f.RegisterResponse))\n *                       |function((u2f.Error|u2f.SignResponse)))>}\n * @private\n */\nu2f.callbackMap_ = {};\n\n/**\n * Creates or retrieves the MessagePort singleton to use.\n * @param {function((MessagePort|u2f.WrappedChromeRuntimePort_))} callback\n * @private\n */\nu2f.getPortSingleton_ = function(callback) {\n  if (u2f.port_) {\n    callback(null, u2f.port_);\n  } else {\n    if (u2f.waitingForPort_.length == 0) {\n      u2f.getMessagePort(function(err, port) {\n        if (!err) {\n          u2f.port_ = port;\n          u2f.port_.addEventListener('message',\n            /** @type {function(Event)} */ (u2f.responseHandler_));\n        }\n\n        // Careful, here be async callbacks. Maybe.\n        while (u2f.waitingForPort_.length)\n          u2f.waitingForPort_.shift()(err, port);\n      });\n    }\n    u2f.waitingForPort_.push(callback);\n  }\n};\n\n/**\n * Handles response messages from the extension.\n * @param {MessageEvent.<u2f.Response>} message\n * @private\n */\nu2f.responseHandler_ = function(message) {\n  var response = message.data;\n  var reqId = response['requestId'];\n  if (!reqId || !u2f.callbackMap_[reqId]) {\n    console.error('Unknown or missing requestId in response.');\n    return;\n  }\n  var cb = u2f.callbackMap_[reqId];\n  delete u2f.callbackMap_[reqId];\n  cb(null, response['responseData']);\n};\n\n/**\n * Calls the callback with true or false as first and only argument\n * @param {Function} callback\n */\nu2f.isSupported = function(callback) {\n  u2f.getPortSingleton_(function(err, port) {\n    callback(!err);\n  });\n}\n\n/**\n * Dispatches an array of sign requests to available U2F tokens.\n * @param {Array.<u2f.SignRequest>} signRequests\n * @param {function((u2f.Error|u2f.SignResponse))} callback\n * @param {number=} opt_timeoutSeconds\n */\nu2f.sign = function(signRequests, callback, opt_timeoutSeconds) {\n  u2f.getPortSingleton_(function(err, port) {\n    if (err)\n      return callback(err);\n\n    var reqId = ++u2f.reqCounter_;\n    u2f.callbackMap_[reqId] = callback;\n    var req = {\n      type: u2f.MessageTypes.U2F_SIGN_REQUEST,\n      signRequests: signRequests,\n      timeoutSeconds: (typeof opt_timeoutSeconds !== 'undefined' ?\n        opt_timeoutSeconds : u2f.EXTENSION_TIMEOUT_SEC),\n      requestId: reqId\n    };\n    port.postMessage(req);\n  });\n};\n\n/**\n * Dispatches register requests to available U2F tokens. An array of sign\n * requests identifies already registered tokens.\n * @param {Array.<u2f.RegisterRequest>} registerRequests\n * @param {Array.<u2f.SignRequest>} signRequests\n * @param {function((u2f.Error|u2f.RegisterResponse))} callback\n * @param {number=} opt_timeoutSeconds\n */\nu2f.register = function(registerRequests, signRequests,\n    callback, opt_timeoutSeconds) {\n  u2f.getPortSingleton_(function(err, port) {\n    if (err)\n      return callback(err);\n\n    var reqId = ++u2f.reqCounter_;\n    u2f.callbackMap_[reqId] = callback;\n    var req = {\n      type: u2f.MessageTypes.U2F_REGISTER_REQUEST,\n      signRequests: signRequests,\n      registerRequests: registerRequests,\n      timeoutSeconds: (typeof opt_timeoutSeconds !== 'undefined' ?\n        opt_timeoutSeconds : u2f.EXTENSION_TIMEOUT_SEC),\n      requestId: reqId\n    };\n    port.postMessage(req);\n  });\n};\n","'use strict';\n\nmodule.exports = API;\n\nvar chromeApi = require( './google-u2f-api' );\n\n// Feature detection (yes really)\nvar isBrowser = ( typeof navigator !== 'undefined' ) && !!navigator.userAgent;\nvar isSafari = isBrowser && navigator.userAgent.match( /Safari\\// )\n\t&& !navigator.userAgent.match( /Chrome\\// );\nvar isEDGE = isBrowser && navigator.userAgent.match( /Edge\\/1[2345]/ );\n\nvar _backend = null;\nfunction getBackend( Promise )\n{\n\tif ( !_backend )\n\t\t_backend = new Promise( function( resolve, reject )\n\t\t{\n\t\t\tfunction notSupported( )\n\t\t\t{\n\t\t\t\t// Note; {native: true} means *not* using Google's hack\n\t\t\t\tresolve( { u2f: null, native: true } );\n\t\t\t}\n\n\t\t\tif ( !isBrowser )\n\t\t\t\treturn notSupported( );\n\n\t\t\tif ( isSafari )\n\t\t\t\t// Safari doesn't support U2F, and the Safari-FIDO-U2F\n\t\t\t\t// extension lacks full support (Multi-facet apps), so we\n\t\t\t\t// block it until proper support.\n\t\t\t\treturn notSupported( );\n\n\t\t\tvar hasNativeSupport =\n\t\t\t\t( typeof window.u2f !== 'undefined' ) &&\n\t\t\t\t( typeof window.u2f.sign === 'function' );\n\n\t\t\tif ( hasNativeSupport )\n\t\t\t\tresolve( { u2f: window.u2f, native: true } );\n\n\t\t\tif ( isEDGE )\n\t\t\t\t// We don't want to check for Google's extension hack on EDGE\n\t\t\t\t// as it'll cause trouble (popups, etc)\n\t\t\t\treturn notSupported( );\n\n\t\t\tif ( location.protocol === 'http:' )\n\t\t\t\t// U2F isn't supported over http, only https\n\t\t\t\treturn notSupported( );\n\n\t\t\tif ( typeof MessageChannel === 'undefined' )\n\t\t\t\t// Unsupported browser, the chrome hack would throw\n\t\t\t\treturn notSupported( );\n\n\t\t\t// Test for google extension support\n\t\t\tchromeApi.isSupported( function( ok )\n\t\t\t{\n\t\t\t\tif ( ok )\n\t\t\t\t\tresolve( { u2f: chromeApi, native: false } );\n\t\t\t\telse\n\t\t\t\t\tnotSupported( );\n\t\t\t} );\n\t\t} );\n\n\treturn _backend;\n}\n\nfunction API( Promise )\n{\n\treturn {\n\t\tisSupported   : isSupported.bind( Promise ),\n\t\tensureSupport : ensureSupport.bind( Promise ),\n\t\tregister      : register.bind( Promise ),\n\t\tsign          : sign.bind( Promise ),\n\t\tErrorCodes    : API.ErrorCodes,\n\t\tErrorNames    : API.ErrorNames\n\t};\n}\n\nAPI.ErrorCodes = {\n\tCANCELLED: -1,\n\tOK: 0,\n\tOTHER_ERROR: 1,\n\tBAD_REQUEST: 2,\n\tCONFIGURATION_UNSUPPORTED: 3,\n\tDEVICE_INELIGIBLE: 4,\n\tTIMEOUT: 5\n};\nAPI.ErrorNames = {\n\t\"-1\": \"CANCELLED\",\n\t\"0\": \"OK\",\n\t\"1\": \"OTHER_ERROR\",\n\t\"2\": \"BAD_REQUEST\",\n\t\"3\": \"CONFIGURATION_UNSUPPORTED\",\n\t\"4\": \"DEVICE_INELIGIBLE\",\n\t\"5\": \"TIMEOUT\"\n};\n\nfunction makeError( msg, err )\n{\n\tvar code = err != null ? err.errorCode : 1; // Default to OTHER_ERROR\n\tvar type = API.ErrorNames[ '' + code ];\n\tvar error = new Error( msg );\n\terror.metaData = {\n\t\ttype: type,\n\t\tcode: code\n\t}\n\treturn error;\n}\n\nfunction deferPromise( Promise, promise )\n{\n\tvar ret = { };\n\tret.promise = new Promise( function( resolve, reject ) {\n\t\tret.resolve = resolve;\n\t\tret.reject = reject;\n\t\tpromise.then( resolve, reject );\n\t} );\n\t/**\n\t * Reject request promise and disconnect port if 'disconnect' flag is true\n\t * @param {string} msg\n\t * @param {boolean} disconnect\n\t */\n\tret.promise.cancel = function( msg, disconnect )\n\t{\n\t\tgetBackend( Promise )\n\t\t.then( function( backend )\n\t\t{\n\t\t\tif ( disconnect && !backend.native )\n\t\t\t\tbackend.u2f.disconnect( );\n\n\t\t\tret.reject( makeError( msg, { errorCode: -1 } ) );\n\t\t} );\n\t};\n\treturn ret;\n}\n\nfunction defer( Promise, fun )\n{\n\treturn deferPromise( Promise, new Promise( function( resolve, reject )\n\t{\n\t\ttry\n\t\t{\n\t\t\tfun && fun( resolve, reject );\n\t\t}\n\t\tcatch ( err )\n\t\t{\n\t\t\treject( err );\n\t\t}\n\t} ) );\n}\n\nfunction isSupported( )\n{\n\tvar Promise = this;\n\n\treturn getBackend( Promise )\n\t.then( function( backend )\n\t{\n\t\treturn !!backend.u2f;\n\t} );\n}\n\nfunction _ensureSupport( backend )\n{\n\tif ( !backend.u2f )\n\t{\n\t\tif ( location.protocol === 'http:' )\n\t\t\tthrow new Error( \"U2F isn't supported over http, only https\" );\n\t\tthrow new Error( \"U2F not supported\" );\n\t}\n}\n\nfunction ensureSupport( )\n{\n\tvar Promise = this;\n\n\treturn getBackend( Promise )\n\t.then( _ensureSupport );\n}\n\nfunction register( registerRequests, signRequests /* = null */, timeout )\n{\n\tvar Promise = this;\n\n\tif ( !Array.isArray( registerRequests ) )\n\t\tregisterRequests = [ registerRequests ];\n\n\tif ( typeof signRequests === 'number' && typeof timeout === 'undefined' )\n\t{\n\t\ttimeout = signRequests;\n\t\tsignRequests = null;\n\t}\n\n\tif ( !signRequests )\n\t\tsignRequests = [ ];\n\n\treturn deferPromise( Promise, getBackend( Promise )\n\t.then( function( backend )\n\t{\n\t\t_ensureSupport( backend );\n\n\t\tvar native = backend.native;\n\t\tvar u2f = backend.u2f;\n\n\t\treturn new Promise( function( resolve, reject )\n\t\t{\n\t\t\tfunction cbNative( response )\n\t\t\t{\n\t\t\t\tif ( response.errorCode )\n\t\t\t\t\treject( makeError( \"Registration failed\", response ) );\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tdelete response.errorCode;\n\t\t\t\t\tresolve( response );\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tfunction cbChrome( err, response )\n\t\t\t{\n\t\t\t\tif ( err )\n\t\t\t\t\treject( err );\n\t\t\t\telse if ( response.errorCode )\n\t\t\t\t\treject( makeError( \"Registration failed\", response ) );\n\t\t\t\telse\n\t\t\t\t\tresolve( response );\n\t\t\t}\n\n\t\t\tif ( native )\n\t\t\t{\n\t\t\t\tvar appId = registerRequests[ 0 ].appId;\n\n\t\t\t\tu2f.register(\n\t\t\t\t\tappId, registerRequests, signRequests, cbNative, timeout );\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tu2f.register(\n\t\t\t\t\tregisterRequests, signRequests, cbChrome, timeout );\n\t\t\t}\n\t\t} );\n\t} ) ).promise;\n}\n\nfunction sign( signRequests, timeout )\n{\n\tvar Promise = this;\n\n\tif ( !Array.isArray( signRequests ) )\n\t\tsignRequests = [ signRequests ];\n\n\treturn deferPromise( Promise, getBackend( Promise )\n\t.then( function( backend )\n\t{\n\t\t_ensureSupport( backend );\n\n\t\tvar native = backend.native;\n\t\tvar u2f = backend.u2f;\n\n\t\treturn new Promise( function( resolve, reject )\n\t\t{\n\t\t\tfunction cbNative( response )\n\t\t\t{\n\t\t\t\tif ( response.errorCode )\n\t\t\t\t\treject( makeError( \"Sign failed\", response ) );\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tdelete response.errorCode;\n\t\t\t\t\tresolve( response );\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tfunction cbChrome( err, response )\n\t\t\t{\n\t\t\t\tif ( err )\n\t\t\t\t\treject( err );\n\t\t\t\telse if ( response.errorCode )\n\t\t\t\t\treject( makeError( \"Sign failed\", response ) );\n\t\t\t\telse\n\t\t\t\t\tresolve( response );\n\t\t\t}\n\n\t\t\tif ( native )\n\t\t\t{\n\t\t\t\tvar appId = signRequests[ 0 ].appId;\n\t\t\t\tvar challenge = signRequests[ 0 ].challenge;\n\n\t\t\t\tu2f.sign( appId, challenge, signRequests, cbNative, timeout );\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tu2f.sign( signRequests, cbChrome, timeout );\n\t\t\t}\n\t\t} );\n\t} ) ).promise;\n}\n\nfunction makeDefault( func )\n{\n\tAPI[ func ] = function( )\n\t{\n\t\tif ( !global.Promise )\n\t\t\t// This is very unlikely to ever happen, since browsers\n\t\t\t// supporting U2F will most likely support Promises.\n\t\t\tthrow new Error( \"The platform doesn't natively support promises\" );\n\n\t\tvar args = [ ].slice.call( arguments );\n\t\treturn API( global.Promise )[ func ].apply( null, args );\n\t};\n}\n\n// Provide default functions using the built-in Promise if available.\nmakeDefault( 'isSupported' );\nmakeDefault( 'ensureSupport' );\nmakeDefault( 'register' );\nmakeDefault( 'sign' );\n"],"sourceRoot":"webpack:///"}